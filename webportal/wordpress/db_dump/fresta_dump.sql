-- MySQL dump 10.13  Distrib 5.5.41, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: fresta
-- ------------------------------------------------------
-- Server version	5.5.41-0ubuntu0.12.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

use fresta;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_groups_capability`
--

DROP TABLE IF EXISTS `wp_groups_capability`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_groups_capability` (
  `capability_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `capability` varchar(255) NOT NULL,
  `class` varchar(255) DEFAULT NULL,
  `object` varchar(255) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `description` longtext,
  PRIMARY KEY (`capability_id`),
  UNIQUE KEY `capability` (`capability`),
  KEY `capability_kco` (`capability`(20),`class`(20),`object`(20))
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_groups_capability`
--

LOCK TABLES `wp_groups_capability` WRITE;
/*!40000 ALTER TABLE `wp_groups_capability` DISABLE KEYS */;
INSERT INTO `wp_groups_capability` VALUES (1,'groups_read_post','','','',''),(2,'switch_themes','','','',''),(3,'edit_themes',NULL,NULL,NULL,NULL),(4,'activate_plugins',NULL,NULL,NULL,NULL),(5,'edit_plugins',NULL,NULL,NULL,NULL),(6,'edit_users',NULL,NULL,NULL,NULL),(7,'edit_files',NULL,NULL,NULL,NULL),(8,'manage_options',NULL,NULL,NULL,NULL),(9,'moderate_comments',NULL,NULL,NULL,NULL),(10,'manage_categories',NULL,NULL,NULL,NULL),(11,'manage_links',NULL,NULL,NULL,NULL),(12,'upload_files',NULL,NULL,NULL,NULL),(13,'import',NULL,NULL,NULL,NULL),(14,'unfiltered_html',NULL,NULL,NULL,NULL),(15,'edit_posts',NULL,NULL,NULL,NULL),(16,'edit_others_posts',NULL,NULL,NULL,NULL),(17,'edit_published_posts',NULL,NULL,NULL,NULL),(18,'publish_posts',NULL,NULL,NULL,NULL),(19,'edit_pages',NULL,NULL,NULL,NULL),(20,'read',NULL,NULL,NULL,NULL),(21,'level_10',NULL,NULL,NULL,NULL),(22,'level_9',NULL,NULL,NULL,NULL),(23,'level_8',NULL,NULL,NULL,NULL),(24,'level_7',NULL,NULL,NULL,NULL),(25,'level_6',NULL,NULL,NULL,NULL),(26,'level_5',NULL,NULL,NULL,NULL),(27,'level_4',NULL,NULL,NULL,NULL),(28,'level_3',NULL,NULL,NULL,NULL),(29,'level_2',NULL,NULL,NULL,NULL),(30,'level_1',NULL,NULL,NULL,NULL),(31,'level_0',NULL,NULL,NULL,NULL),(32,'edit_others_pages',NULL,NULL,NULL,NULL),(33,'edit_published_pages',NULL,NULL,NULL,NULL),(34,'publish_pages',NULL,NULL,NULL,NULL),(35,'delete_pages',NULL,NULL,NULL,NULL),(36,'delete_others_pages',NULL,NULL,NULL,NULL),(37,'delete_published_pages',NULL,NULL,NULL,NULL),(38,'delete_posts',NULL,NULL,NULL,NULL),(39,'delete_others_posts',NULL,NULL,NULL,NULL),(40,'delete_published_posts',NULL,NULL,NULL,NULL),(41,'delete_private_posts',NULL,NULL,NULL,NULL),(42,'edit_private_posts',NULL,NULL,NULL,NULL),(43,'read_private_posts',NULL,NULL,NULL,NULL),(44,'delete_private_pages',NULL,NULL,NULL,NULL),(45,'edit_private_pages',NULL,NULL,NULL,NULL),(46,'read_private_pages',NULL,NULL,NULL,NULL),(47,'delete_users',NULL,NULL,NULL,NULL),(48,'create_users',NULL,NULL,NULL,NULL),(49,'unfiltered_upload',NULL,NULL,NULL,NULL),(50,'edit_dashboard',NULL,NULL,NULL,NULL),(51,'update_plugins',NULL,NULL,NULL,NULL),(52,'delete_plugins',NULL,NULL,NULL,NULL),(53,'install_plugins',NULL,NULL,NULL,NULL),(54,'update_themes',NULL,NULL,NULL,NULL),(55,'install_themes',NULL,NULL,NULL,NULL),(56,'update_core',NULL,NULL,NULL,NULL),(57,'list_users',NULL,NULL,NULL,NULL),(58,'remove_users',NULL,NULL,NULL,NULL),(59,'add_users',NULL,NULL,NULL,NULL),(60,'promote_users',NULL,NULL,NULL,NULL),(61,'edit_theme_options',NULL,NULL,NULL,NULL),(62,'delete_themes',NULL,NULL,NULL,NULL),(63,'export',NULL,NULL,NULL,NULL),(64,'groups_access',NULL,NULL,NULL,NULL),(65,'groups_admin_groups',NULL,NULL,NULL,NULL),(66,'groups_admin_options',NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `wp_groups_capability` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_groups_group`
--

DROP TABLE IF EXISTS `wp_groups_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_groups_group` (
  `group_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(20) DEFAULT NULL,
  `creator_id` bigint(20) DEFAULT NULL,
  `datetime` datetime DEFAULT NULL,
  `name` varchar(100) NOT NULL,
  `description` longtext,
  PRIMARY KEY (`group_id`),
  UNIQUE KEY `group_n` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_groups_group`
--

LOCK TABLES `wp_groups_group` WRITE;
/*!40000 ALTER TABLE `wp_groups_group` DISABLE KEYS */;
INSERT INTO `wp_groups_group` VALUES (1,NULL,1,'2013-09-12 12:04:54','Registered',NULL),(4,1,1,'2013-10-10 07:52:26','Developers','Developers can contribute their codes to Website and share with the public.'),(5,1,1,'2013-10-10 07:52:44','Engineers','Engineers take responsibility about setting up vehicle\\\\\\\'s configuration and assembly.');
/*!40000 ALTER TABLE `wp_groups_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_groups_group_capability`
--

DROP TABLE IF EXISTS `wp_groups_group_capability`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_groups_group_capability` (
  `group_id` bigint(20) unsigned NOT NULL,
  `capability_id` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`group_id`,`capability_id`),
  KEY `group_capability_cg` (`capability_id`,`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_groups_group_capability`
--

LOCK TABLES `wp_groups_group_capability` WRITE;
/*!40000 ALTER TABLE `wp_groups_group_capability` DISABLE KEYS */;
INSERT INTO `wp_groups_group_capability` VALUES (4,1),(5,1);
/*!40000 ALTER TABLE `wp_groups_group_capability` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_groups_user_capability`
--

DROP TABLE IF EXISTS `wp_groups_user_capability`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_groups_user_capability` (
  `user_id` bigint(20) unsigned NOT NULL,
  `capability_id` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`user_id`,`capability_id`),
  KEY `user_capability_cu` (`capability_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_groups_user_capability`
--

LOCK TABLES `wp_groups_user_capability` WRITE;
/*!40000 ALTER TABLE `wp_groups_user_capability` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_groups_user_capability` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_groups_user_group`
--

DROP TABLE IF EXISTS `wp_groups_user_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_groups_user_group` (
  `user_id` bigint(20) unsigned NOT NULL,
  `group_id` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`user_id`,`group_id`),
  KEY `user_group_gu` (`group_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_groups_user_group`
--

LOCK TABLES `wp_groups_user_group` WRITE;
/*!40000 ALTER TABLE `wp_groups_user_group` DISABLE KEYS */;
INSERT INTO `wp_groups_user_group` VALUES (1,1),(1,4),(1,5),(3,1),(3,4),(3,5),(5,1),(15,1),(16,1),(16,4),(16,5),(18,1),(19,1),(19,4),(20,1),(20,4),(21,1),(21,5),(22,1),(22,4),(22,5),(29,1),(29,4),(29,5),(30,1),(30,4),(30,5),(31,1),(31,4),(31,5),(33,1),(33,4),(33,5),(34,1),(35,1),(35,4),(35,5);
/*!40000 ALTER TABLE `wp_groups_user_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=5520 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','http://localhost','yes'),(2,'blogname','MOPED','yes'),(3,'blogdescription','Mobile Open Platform for Experimental Design of Cyber-Physical Systems','yes'),(4,'users_can_register','1','yes'),(5,'admin_email','arndt@sics.se','yes'),(6,'start_of_week','1','yes'),(7,'use_balanceTags','0','yes'),(8,'use_smilies','1','yes'),(9,'require_name_email','1','yes'),(10,'comments_notify','1','yes'),(11,'posts_per_rss','10','yes'),(12,'rss_use_excerpt','0','yes'),(13,'mailserver_url','mail.example.com','yes'),(14,'mailserver_login','login@example.com','yes'),(15,'mailserver_pass','password','yes'),(16,'mailserver_port','110','yes'),(17,'default_category','1','yes'),(18,'default_comment_status','closed','yes'),(19,'default_ping_status','open','yes'),(20,'default_pingback_flag','1','yes'),(21,'posts_per_page','10','yes'),(22,'date_format','F j, Y','yes'),(23,'time_format','g:i a','yes'),(24,'links_updated_date_format','F j, Y g:i a','yes'),(28,'comment_moderation','','yes'),(29,'moderation_notify','1','yes'),(30,'permalink_structure','','yes'),(31,'gzipcompression','0','yes'),(32,'hack_file','0','yes'),(33,'blog_charset','UTF-8','yes'),(34,'moderation_keys','','no'),(35,'active_plugins','a:11:{i:0;s:35:\"add-from-server/add-from-server.php\";i:1;s:33:\"content-mirror/content-mirror.php\";i:2;s:17:\"groups/groups.php\";i:3;s:25:\"insert-php/insert_php.php\";i:4;s:25:\"management/management.php\";i:5;s:71:\"multi-file-upload-form-for-fresta/multi-file-upload-form-for-fresta.php\";i:6;s:37:\"portable-phpmyadmin/wp-phpmyadmin.php\";i:7;s:63:\"table-display-form-for-fresta/table-display-form-for-fresta.php\";i:8;s:61:\"user-apps-gallery-for-fresta/user-apps-gallery-for-fresta.php\";i:9;s:45:\"vehicle-config-parser/vehicleConfigParser.php\";i:10;s:33:\"vehicle-configuration/vehicle.php\";}','yes'),(36,'home','http://localhost','yes'),(37,'category_base','','yes'),(38,'ping_sites','http://rpc.pingomatic.com/','yes'),(39,'advanced_edit','0','yes'),(40,'comment_max_links','2','yes'),(41,'gmt_offset','1','yes'),(42,'default_email_category','1','yes'),(43,'recently_edited','a:5:{i:0;s:87:\"/var/www/moped.sics.se/wordpress/wp-content/plugins/add-from-server/add-from-server.php\";i:2;s:75:\"/var/www/sse/moped.sics.se/wordpress/wp-content/plugins/akismet/akismet.php\";i:3;s:127:\"/var/www/sse/moped.sics.se/wordpress/wp-content/plugins/multi-file-upload-form-for-fresta/multi-file-upload-form-for-fresta.php\";i:4;s:79:\"/var/www/sse/moped.sics.se/wordpress/wp-content/themes/twentythirteen/style.css\";i:5;s:0:\"\";}','no'),(44,'template','twentythirteen','yes'),(45,'stylesheet','twentythirteen','yes'),(46,'comment_whitelist','1','yes'),(47,'blacklist_keys','','no'),(48,'comment_registration','','yes'),(49,'html_type','text/html','yes'),(50,'use_trackback','0','yes'),(51,'default_role','subscriber','yes'),(52,'db_version','30133','yes'),(53,'uploads_use_yearmonth_folders','1','yes'),(54,'upload_path','','yes'),(55,'blog_public','1','yes'),(56,'default_link_category','2','yes'),(57,'show_on_front','page','yes'),(58,'tag_base','','yes'),(59,'show_avatars','1','yes'),(60,'avatar_rating','G','yes'),(61,'upload_url_path','','yes'),(62,'thumbnail_size_w','150','yes'),(63,'thumbnail_size_h','150','yes'),(64,'thumbnail_crop','1','yes'),(65,'medium_size_w','300','yes'),(66,'medium_size_h','300','yes'),(67,'avatar_default','mystery','yes'),(68,'large_size_w','1024','yes'),(69,'large_size_h','1024','yes'),(70,'image_default_link_type','','yes'),(71,'image_default_size','','yes'),(72,'image_default_align','','yes'),(73,'close_comments_for_old_posts','','yes'),(74,'close_comments_days_old','14','yes'),(75,'thread_comments','1','yes'),(76,'thread_comments_depth','5','yes'),(77,'page_comments','','yes'),(78,'comments_per_page','50','yes'),(79,'default_comments_page','newest','yes'),(80,'comment_order','asc','yes'),(81,'sticky_posts','a:0:{}','yes'),(82,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(83,'widget_text','a:0:{}','yes'),(84,'widget_rss','a:0:{}','yes'),(85,'uninstall_plugins','a:0:{}','no'),(86,'timezone_string','','yes'),(88,'page_on_front','27','yes'),(89,'default_post_format','0','yes'),(90,'link_manager_enabled','0','yes'),(91,'initial_db_version','24448','yes'),(92,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:65:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:13:\"groups_access\";b:1;s:19:\"groups_admin_groups\";b:1;s:20:\"groups_admin_options\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(93,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(94,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(95,'widget_recent-comments','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(96,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(97,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(98,'sidebars_widgets','a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:5:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:10:\"archives-2\";i:3;s:12:\"categories-2\";i:4;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:13:\"array_version\";i:3;}','yes'),(99,'cron','a:5:{i:1447265220;a:1:{s:20:\"wp_maybe_auto_update\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1447285688;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1447328902;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1447330539;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(108,'dashboard_widget_options','a:4:{s:25:\"dashboard_recent_comments\";a:1:{s:5:\"items\";i:5;}s:24:\"dashboard_incoming_links\";a:5:{s:4:\"home\";s:24:\"http://localhost\";s:4:\"link\";s:100:\"http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:http://localhost/\";s:3:\"url\";s:141:\"http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=10&output=rss&partner=wordpress&q=link:http://moped.i.sics.se/wordpress/\";s:5:\"items\";i:10;s:9:\"show_date\";b:0;}s:17:\"dashboard_primary\";a:7:{s:4:\"link\";s:26:\"http://wordpress.org/news/\";s:3:\"url\";s:31:\"http://wordpress.org/news/feed/\";s:5:\"title\";s:14:\"WordPress Blog\";s:5:\"items\";i:2;s:12:\"show_summary\";i:1;s:11:\"show_author\";i:0;s:9:\"show_date\";i:1;}s:19:\"dashboard_secondary\";a:7:{s:4:\"link\";s:28:\"http://planet.wordpress.org/\";s:3:\"url\";s:33:\"http://planet.wordpress.org/feed/\";s:5:\"title\";s:20:\"Other WordPress News\";s:5:\"items\";i:5;s:12:\"show_summary\";i:0;s:11:\"show_author\";i:0;s:9:\"show_date\";i:0;}}','yes'),(144,'recently_activated','a:0:{}','yes'),(145,'_transient_random_seed','be4369fcc0af9914cce048290d1a2850','yes'),(146,'groups_options','a:2:{s:7:\"general\";a:5:{s:22:\"read_post_capabilities\";a:1:{i:0;s:16:\"groups_read_post\";}s:10:\"post_types\";a:3:{s:4:\"post\";a:1:{s:12:\"add_meta_box\";b:1;}s:4:\"page\";a:1:{s:12:\"add_meta_box\";b:1;}s:10:\"attachment\";a:1:{s:12:\"add_meta_box\";b:1;}}s:21:\"groups-show-tree-view\";b:0;s:27:\"groups-show-in-user-profile\";b:1;s:18:\"groups_delete_data\";b:0;}i:1;a:1:{s:21:\"capabilities_per_page\";i:10;}}','no'),(147,'groups_plugin_version','1.3.11','yes'),(148,'upload_version','1.0','yes'),(149,'pma_key','pma_5231ae161ae4e4.62235364!23922718e7b1dfecd65d65dbbce210c5','yes'),(150,'vehicle_configuration_version','1.0','yes'),(167,'theme_mods_twentythirteen','a:2:{s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:0;}s:16:\"header_textcolor\";s:6:\"220e10\";}','yes'),(168,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(179,'category_children','a:0:{}','yes'),(629,'groups-admin-override','1','yes'),(1636,'content_mirror_save_error_plugin_error','','yes'),(3692,'ftp_credentials','a:3:{s:8:\"hostname\";s:9:\"localhost\";s:8:\"username\";s:4:\"root\";s:15:\"connection_type\";s:3:\"ftp\";}','yes'),(3693,'frmsvr_last_folder','/var/www/moped.sics.se/wordpress/wp-content/plugins','yes'),(3958,'_transient_plugins_delete_result_1','1','yes'),(4711,'page_for_posts','0','yes'),(4712,'WPLANG','','yes'),(4713,'db_upgraded','','yes'),(5421,'_site_transient_timeout_browser_fb7e73d137e6cd6d4a2ec6775f80507c','1447778008','yes'),(5422,'_site_transient_browser_fb7e73d137e6cd6d4a2ec6775f80507c','a:9:{s:8:\"platform\";s:5:\"Linux\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"36.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(5428,'_transient_is_multi_author','0','yes'),(5437,'_transient_timeout_plugin_slugs','1447259615','no'),(5438,'_transient_plugin_slugs','a:2:{i:0;s:19:\"akismet/akismet.php\";i:1;s:9:\"hello.php\";}','no'),(5475,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1447279205','no'),(5476,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 20:18:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://wordpress.org/?v=4.4-beta3-35607\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.4 Beta 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/11/wordpress-4-4-beta-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 22:10:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=3969\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:374:\"WordPress 4.4 Beta 3 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. To get the beta, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download the beta here (zip). For more of what’s new in version 4.4, check out [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Scott Taylor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1245:\"<p>WordPress 4.4 Beta 3 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. To get the beta, try the <a href=\"https://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.4-beta3.zip\">download the beta here</a> (zip).</p>\n<p>For more of what’s new in version 4.4, <a href=\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-1/\" target=\"_blank\">check out the Beta 1 blog post</a>.</p>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.4\">everything we’ve fixed</a>.</p>\n<p><em>Four-four beta three<br />\nEven more activity<br />\nNary a shared term</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.4 Beta 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 28 Oct 2015 20:50:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=3966\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:374:\"WordPress 4.4 Beta 2 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. To get the beta, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download the beta here (zip). For more of what’s new in version 4.4, check out [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Scott Taylor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1246:\"<p>WordPress 4.4 Beta 2 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. To get the beta, try the <a href=\"https://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.4-beta2.zip\">download the beta here</a> (zip).</p>\n<p>For more of what’s new in version 4.4, <a href=\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-1/\" target=\"_blank\">check out the Beta 1 blog post</a>.</p>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.4\">everything we’ve fixed</a>.</p>\n<p><em>Four-four beta two<br />\nAnother week of progress<br />\nREST API lives!</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.4 Beta 1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Oct 2015 23:54:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"https://wordpress.org/news/?p=3926\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:329:\"WordPress 4.4 Beta 1 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.4, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Scott Taylor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4293:\"<p>WordPress 4.4 Beta 1 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.4, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\" target=\"_blank\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"https://wordpress.org/wordpress-4.4-beta1.zip\" target=\"_blank\">download the beta here</a> (zip).</p>\n<p>WordPress 4.4 is slated for release on <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\" target=\"_blank\">December 8</a>, but to get there, we need your help testing what we have been working on, including:</p>\n<ul>\n<li><strong>Twenty Sixteen </strong>— The <a href=\"https://make.wordpress.org/core/2015/08/25/introducing-twenty-sixteen/\">newest</a> default theme for WordPress.</li>\n<li><strong>Responsive Images </strong>— WordPress automatically delivers a <a href=\"https://make.wordpress.org/core/2015/09/30/responsive-images-merge-proposal/\">more appropriate image</a> to users depending on a variety of conditions like screen size, viewport size, and screen resolution.</li>\n<li><strong>Embeds </strong>— WordPress can now embed rich content from nearly all sites that support the oEmbed standard — not just YouTube, Flickr, Twitter, and the like. You can even embed <a href=\"https://make.wordpress.org/core/2015/09/30/feature-plugin-merge-proposal-oembed/\">previews of posts</a> from other WordPress sites by pasting the URL on its own line.</li>\n</ul>\n<p>There have been a lot of changes for developers to play with as well:</p>\n<ul>\n<li><strong>REST API (phase 1) </strong>— The underlying infrastructure of the WordPress REST API <a href=\"https://wordpress.org/plugins/rest-api/\">plugin</a> has been <a href=\"https://make.wordpress.org/core/2015/09/21/wp-rest-api-merge-proposal/\">included in WordPress 4.4</a>. Plugin authors can take advantage of this by adding custom endpoints.</li>\n<li><strong>Term Metadata </strong>— Taxonomy term metadata is <a href=\"https://make.wordpress.org/core/2015/09/04/taxonomy-term-metadata-proposal/\">now included</a> in WordPress 4.4. If you&#8217;ve already been using a plugin to implement term metadata, you should read <a href=\"https://make.wordpress.org/core/2015/09/22/preparing-your-plugins-and-your-client-sites-for-termmeta/\">this post</a> on how to prepare. Also, the underlying <code>WP_Term</code> class improves caching when working with terms. (<a href=\"https://core.trac.wordpress.org/ticket/14162\">#14162</a>)</li>\n<li><strong>Improved <code>&lt;title&gt;</code> output</strong> — <code>wp_title()</code> is now deprecated; WordPress can <a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">handle the rendering</a> of the document title automatically.</li>\n<li><strong>Comments </strong>— Comment queries are now split for performance. Also, the underlying <code>WP_Comment</code> class improves caching and introduces strong-typing. (<a href=\"https://core.trac.wordpress.org/ticket/8071\">#8071</a>, <a href=\"https://core.trac.wordpress.org/ticket/32619\">#32619</a>)</li>\n</ul>\n<p>If you want a more in-depth view of what major changes have made it into 4.4, <a href=\"https://make.wordpress.org/core/tag/4-4/\" target=\"_blank\">check out all 4.4-tagged posts</a> on the main development blog, or check out a <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.4\">list of everything</a> that&#8217;s changed.</p>\n<p><strong>If you think you’ve found a bug</strong>, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\" target=\"_blank\">Alpha/Beta area</a> in the support forums. We’d love to hear from you! If you’re comfortable writing a reproducible bug report, <a href=\"https://make.wordpress.org/core/reports/\" target=\"_blank\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\" target=\"_blank\">a list of known bugs</a>.</p>\n<p>Happy testing!</p>\n<p><em>Many small changes</em><br />\n<em>Some groundbreaking new features<br />\nFun times had by all<br />\n</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.3.1 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/09/wordpress-4-3-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 15 Sep 2015 15:22:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3914\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:439:\"WordPress 4.3.1 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. This release addresses three issues, including two cross-site scripting vulnerabilities and a potential privilege escalation. WordPress versions 4.3 and earlier are vulnerable to a cross-site scripting vulnerability when processing shortcode tags (CVE-2015-5714). Reported by [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Samuel Sidler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4022:\"<div class=\"storycontent\">\n<p>WordPress 4.3.1 is now available. This is a<strong> security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>This release addresses three issues, including two cross-site scripting vulnerabilities and a potential privilege escalation.</p>\n<ul>\n<li>WordPress versions 4.3 and earlier are vulnerable to a cross-site scripting vulnerability when processing shortcode tags (CVE-2015-5714). Reported by Shahar Tal and Netanel Rubin of <a href=\"http://checkpoint.com/\">Check Point</a>.</li>\n<li>A separate cross-site scripting vulnerability was found in the user list table. Reported by Ben Bidner of the WordPress security team.</li>\n<li>Finally, in certain cases, users without proper permissions could publish private posts and make them sticky (CVE-2015-5715). Reported by Shahar Tal and Netanel Rubin of <a href=\"http://checkpoint.com/\">Check Point</a>.</li>\n</ul>\n<p>Our thanks to those who have practiced <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible disclosure</a> of security issues.</p>\n<p>WordPress 4.3.1 also fixes twenty-six bugs. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.3.1\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.3/?rev=34199&amp;stop_rev=33647\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.3.1</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.3.1.</p>\n</div>\n<p>Thanks to everyone who contributed to 4.3.1:</p>\n<p><a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/chriscct7\">chriscct7</a>, <a href=\"https://profiles.wordpress.org/extendwings\">Daisuke Takahashi</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/DrewAPicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/dustinbolton\">dustinbolton</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/hauvong\">hauvong</a>, <a href=\"https://profiles.wordpress.org/macmanx\">James Huff</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jobst\">jobst</a>, <a href=\"https://profiles.wordpress.org/tyxla\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nikeo\">nikeo</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/swissspidy\">Pascal Birchler</a>, <a href=\"https://profiles.wordpress.org/figureone\">Paul Ryan</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/miqrogroove\">Robert Chapin</a>, <a href=\"https://profiles.wordpress.org/otto42\">Samuel Wood</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/SergeyBiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/tmatsuur\">tmatsuur</a>, <a href=\"https://profiles.wordpress.org/liljimmi\">Tracy Levesque</a>, <a href=\"https://profiles.wordpress.org/umeshnevase\">Umesh Nevase</a>, <a href=\"https://profiles.wordpress.org/vortfu\">vortfu</a>, <a href=\"https://profiles.wordpress.org/welcher\">welcher</a>, <a href=\"https://profiles.wordpress.org/westonruter\">Weston Ruter</a></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"WordPress 4.3 “Billie”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"https://wordpress.org/news/2015/08/billie/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 18 Aug 2015 19:12:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:3:\"4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3845\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:352:\"Version 4.3 of WordPress, named &#8220;Billie&#8221; in honor of jazz singer Billie Holiday, is available for download or update in your WordPress dashboard. New features in 4.3 make it even easier to format your content and customize your site. Menus in the Customizer Create your menu, update it, and assign it, all while live-previewing in [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:22531:\"<p style=\"margin: 0;height: 0\"><img src=\"https://wordpress.org/news/files/2015/08/WordPress-4-3-billie-1024x574.png\" alt=\"WordPress 4.3 - &quot;Billie&quot;\" width=\"692\" height=\"388\" class=\"alignnone size-large wp-image-3896\" style=\"height:0px;width: 0px;margin: 0\" srcset=\"https://wordpress.org/news/files/2015/08/WordPress-4-3-billie-300x168.png 300w, https://wordpress.org/news/files/2015/08/WordPress-4-3-billie-1024x574.png 1024w\" sizes=\"(max-width: 692px) 100vw, 692px\" /></p>\n<p>Version 4.3 of WordPress, named &#8220;Billie&#8221; in honor of jazz singer <a href=\"https://en.wikipedia.org/wiki/Billie_Holiday\">Billie Holiday</a>, is available for <a href=\"https://wordpress.org/download/\">download</a> or update in your WordPress dashboard. New features in 4.3 make it even easier to format your content and customize your site.</p>\n<p><iframe width=\'692\' height=\'389\' src=\'https://videopress.com/embed/T54Iy7Tw?hd=1\' frameborder=\'0\' allowfullscreen></iframe><script src=\'https://v0.wordpress.com/js/next/videopress-iframe.js?m=1435166243\'></script></p>\n<hr />\n<h2>Menus in the Customizer</h2>\n<div><img src=\"//s.w.org/images/core/4.3/menu-customizer.png\" alt=\"\" /></div>\n<p>Create your menu, update it, and assign it, all while live-previewing in the customizer. The streamlined customizer design provides a mobile-friendly and accessible interface. With every release, it becomes easier and faster to make your site just the way you want it.</p>\n<hr />\n<h2>Formatting Shortcuts</h2>\n<div style=\"margin-bottom: 0\"><div style=\"width: 640px; \" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement(\'video\');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-3845-1\" width=\"640\" height=\"360\" loop=\"1\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"//s.w.org/images/core/4.3/formatting.mp4?_=1\" /><source type=\"video/webm\" src=\"//s.w.org/images/core/4.3/formatting.webm?_=1\" /><source type=\"video/ogg\" src=\"//s.w.org/images/core/4.3/formatting.ogv?_=1\" /><a href=\"//s.w.org/images/core/4.3/formatting.mp4\">//s.w.org/images/core/4.3/formatting.mp4</a></video></div></div>\n<p>Your writing flow just got faster with new formatting shortcuts in WordPress 4.3. Use asterisks to create lists and number signs to make a heading. No more breaking your flow; your text looks great with a <code>*</code> and a <code>#</code>.</p>\n<hr />\n<h2>Site Icons</h2>\n<p><img src=\"//s.w.org/images/core/4.3/site-icon-customizer.png\" alt=\"\" /><br />\n&nbsp;<br />\nSite icons represent your site in browser tabs, bookmark menus, and on the home screen of mobile devices. Add your unique site icon in the customizer; it will even stay in place when you switch themes. Make your whole site reflect your brand.</p>\n<hr />\n<h2>Better Passwords</h2>\n<p><img src=\"//s.w.org/images/core/4.3/better-passwords.png\" alt=\"\" /><br />\n&nbsp;<br />\nKeep your site more secure with WordPress’ improved approach to passwords. Instead of receiving passwords via email, you’ll get a password reset link. When you add new users to your site or edit a user profile, WordPress will automatically generate a secure password.</p>\n<hr />\n<h2>Other improvements</h2>\n<ul>\n<li><strong>A smoother admin experience</strong> &#8211; Refinements to the list view across the admin make your WordPress more accessible and easier to work with on any device.</li>\n<li><strong>Comments turned off on pages</strong> &#8211; All new pages that you create will have comments turned off. Keep discussions to your blog, right where they’re supposed to happen.</li>\n<li><strong>Customize your site quickly</strong> &#8211; Wherever you are on the front-end, you can click the customize link in the toolbar to swiftly make changes to your site.</li>\n</ul>\n<hr />\n<h2>The Team</h2>\n<p><a class=\"alignleft\" href=\"https://profiles.wordpress.org/obenland\"><img src=\"https://www.gravatar.com/avatar/2370ea5912750f4cb0f3c51ae1cbca55?d=mm&amp;s=180&amp;r=G\" alt=\"Konstantin Obenland\" width=\"80\" height=\"80\" /></a>This release was led by <a href=\"http://konstantin.obenland.it/\">Konstantin Obenland</a>, with the help of these fine individuals. There are 246 contributors with props in this release. Pull up some Billie Holiday on your music service of choice, and check out some of their profiles:</p>\n<a href=\"https://profiles.wordpress.org/mercime\">@mercime</a>, <a href=\"https://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/adamkheckler\">Adam Heckler</a>, <a href=\"https://profiles.wordpress.org/adamsilverstein\">Adam Silverstein</a>, <a href=\"https://profiles.wordpress.org/akibjorklund\">Aki Bjorklund</a>, <a href=\"https://profiles.wordpress.org/akirk\">Alex Kirk</a>, <a href=\"https://profiles.wordpress.org/viper007bond\">Alex Mills (Viper007Bond)</a>, <a href=\"https://profiles.wordpress.org/tellyworth\">Alex Shiels</a>, <a href=\"https://profiles.wordpress.org/deconf\">Alin Marcu</a>, <a href=\"https://profiles.wordpress.org/andfinally\">andfinally</a>, <a href=\"https://profiles.wordpress.org/afercia\">Andrea Fercia</a>, <a href=\"https://profiles.wordpress.org/andg\">Andrea Gandino</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/afragen\">Andy Fragen</a>, <a href=\"https://profiles.wordpress.org/ankit-k-gupta\">Ankit K Gupta</a>, <a href=\"https://profiles.wordpress.org/antpb\">Anthony Burchell</a>, <a href=\"https://profiles.wordpress.org/anubisthejackle\">anubisthejackle</a>, <a href=\"https://profiles.wordpress.org/aramzs\">Aram Zucker-Scharff</a>, <a href=\"https://profiles.wordpress.org/arjunskumar\">Arjun S Kumar</a>, <a href=\"https://profiles.wordpress.org/avnarun\">avnarun</a>, <a href=\"https://profiles.wordpress.org/brad2dabone\">Bad Feather</a>, <a href=\"https://profiles.wordpress.org/bcole808\">Ben Cole</a>, <a href=\"https://profiles.wordpress.org/empireoflight\">Ben Dunkle</a>, <a href=\"https://profiles.wordpress.org/binarykitten\">BinaryKitten</a>, <a href=\"https://profiles.wordpress.org/birgire\">Birgir Erlendsson (birgire)</a>, <a href=\"https://profiles.wordpress.org/bjornjohansen\">Bjorn Johansen</a>, <a href=\"https://profiles.wordpress.org/bolo1988\">bolo1988</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone B. Gorges</a>, <a href=\"https://profiles.wordpress.org/bradt\">Brad Touesnard</a>, <a href=\"https://profiles.wordpress.org/bramd\">Bram Duvigneau</a>, <a href=\"https://profiles.wordpress.org/kraftbj\">Brandon Kraft</a>, <a href=\"https://profiles.wordpress.org/krogsgard\">Brian Krogsgard</a>, <a href=\"https://profiles.wordpress.org/brianlayman\">Brian Layman</a>, <a href=\"https://profiles.wordpress.org/icaleb\">Caleb Burks</a>, <a href=\"https://profiles.wordpress.org/calevans\">CalEvans</a>, <a href=\"https://profiles.wordpress.org/chasewiseman\">Chase Wiseman</a>, <a href=\"https://profiles.wordpress.org/chipbennett\">Chip Bennett</a>, <a href=\"https://profiles.wordpress.org/chouby\">Chouby</a>, <a href=\"https://profiles.wordpress.org/c3mdigital\">Chris Olbekson</a>, <a href=\"https://profiles.wordpress.org/chriscct7\">chriscct7</a>, <a href=\"https://profiles.wordpress.org/craig-ralston\">Craig Ralston</a>, <a href=\"https://profiles.wordpress.org/extendwings\">Daisuke Takahashi</a>, <a href=\"https://profiles.wordpress.org/danielbachhuber\">Daniel Bachhuber</a>, <a href=\"https://profiles.wordpress.org/redsweater\">Daniel Jalkut (Red Sweater)</a>, <a href=\"https://profiles.wordpress.org/mte90\">Daniele Mte90 Scasciafratte</a>, <a href=\"https://profiles.wordpress.org/daniluk4000\">daniluk4000</a>, <a href=\"https://profiles.wordpress.org/dmchale\">Dave McHale</a>, <a href=\"https://profiles.wordpress.org/daveal\">DaveAl</a>, <a href=\"https://profiles.wordpress.org/davidakennedy\">David A. Kennedy</a>, <a href=\"https://profiles.wordpress.org/dlh\">David Herrera</a>, <a href=\"https://profiles.wordpress.org/daxelrod\">daxelrod</a>, <a href=\"https://profiles.wordpress.org/denis-de-bernardy\">Denis de Bernardy</a>, <a href=\"https://profiles.wordpress.org/realloc\">Dennis Ploetner</a>, <a href=\"https://profiles.wordpress.org/valendesigns\">Derek Herman</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/dipeshkakadiya\">dipesh.kakadiya</a>, <a href=\"https://profiles.wordpress.org/dmsnell\">dmsnell</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/drewapicture\">Drew Jaynes</a>, <a href=\"https://profiles.wordpress.org/dustinbolton\">dustinbolton</a>, <a href=\"https://profiles.wordpress.org/kucrut\">Dzikri Aziz</a>, <a href=\"https://profiles.wordpress.org/eclev91\">eclev91</a>, <a href=\"https://profiles.wordpress.org/eligijus\">eligijus</a>, <a href=\"https://profiles.wordpress.org/eliorivero\">Elio Rivero</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Ella Iseulde Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/ericlewis\">Eric Andrew Lewis</a>, <a href=\"https://profiles.wordpress.org/ebinnion\">Eric Binnion</a>, <a href=\"https://profiles.wordpress.org/ericmann\">Eric Mann</a>, <a href=\"https://profiles.wordpress.org/fab1en\">Fabien Quatravaux</a>, <a href=\"https://profiles.wordpress.org/flixos90\">Felix Arntz</a>, <a href=\"https://profiles.wordpress.org/francoeurdavid\">francoeurdavid</a>, <a href=\"https://profiles.wordpress.org/frank-klein\">Frank Klein</a>, <a href=\"https://profiles.wordpress.org/gabrielperezs\">gabrielperezs</a>, <a href=\"https://profiles.wordpress.org/voldemortensen\">Garth Mortensen</a>, <a href=\"https://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"https://profiles.wordpress.org/glennm\">glennm</a>, <a href=\"https://profiles.wordpress.org/gtuk\">gtuk</a>, <a href=\"https://profiles.wordpress.org/hailin\">hailin</a>, <a href=\"https://profiles.wordpress.org/hauvong\">hauvong</a>, <a href=\"https://profiles.wordpress.org/helen\">Helen Hou-Sandí</a>, <a href=\"https://profiles.wordpress.org/henrikakselsen\">henrikakselsen</a>, <a href=\"https://profiles.wordpress.org/hnle\">Hinaloe</a>, <a href=\"https://profiles.wordpress.org/hrishiv90\">Hrishikesh Vaipurkar</a>, <a href=\"https://profiles.wordpress.org/hugobaeta\">Hugo Baeta</a>, <a href=\"https://profiles.wordpress.org/polevaultweb\">Iain Poulson</a>, <a href=\"https://profiles.wordpress.org/imath\">imath</a>, <a href=\"https://profiles.wordpress.org/ipstenu\">Ipstenu (Mika Epstein)</a>, <a href=\"https://profiles.wordpress.org/isaacchapman\">isaacchapman</a>, <a href=\"https://profiles.wordpress.org/izem\">izem</a>, <a href=\"https://profiles.wordpress.org/jdgrimes\">J.D. Grimes</a>, <a href=\"https://profiles.wordpress.org/jacklenox\">Jack Lenox</a>, <a href=\"https://profiles.wordpress.org/jadpm\">jadpm</a>, <a href=\"https://profiles.wordpress.org/macmanx\">James Huff</a>, <a href=\"https://profiles.wordpress.org/jamesgol\">jamesgol</a>, <a href=\"https://profiles.wordpress.org/jancbeck\">jancbeck</a>, <a href=\"https://profiles.wordpress.org/jfarthing84\">Jeff Farthing</a>, <a href=\"https://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"https://profiles.wordpress.org/jpry\">Jeremy Pry</a>, <a href=\"https://profiles.wordpress.org/jmichaelward\">Jeremy Ward</a>, <a href=\"https://profiles.wordpress.org/jesin\">Jesin A</a>, <a href=\"https://profiles.wordpress.org/jipmoors\">jipmoors</a>, <a href=\"https://profiles.wordpress.org/eltobiano\">jjberry</a>, <a href=\"https://profiles.wordpress.org/jobst\">Jobst Schmalenbach</a>, <a href=\"https://profiles.wordpress.org/joedolson\">Joe Dolson</a>, <a href=\"https://profiles.wordpress.org/joehoyle\">Joe Hoyle</a>, <a href=\"https://profiles.wordpress.org/joemcgill\">Joe McGill</a>, <a href=\"https://profiles.wordpress.org/jkudish\">Joey Kudish</a>, <a href=\"https://profiles.wordpress.org/johnbillion\">John Blackbourn</a>, <a href=\"https://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"https://profiles.wordpress.org/picard102\">John Leschinski</a>, <a href=\"https://profiles.wordpress.org/joostdevalk\">Joost de Valk</a>, <a href=\"https://profiles.wordpress.org/maxxsnake\">Josh Davis</a>, <a href=\"https://profiles.wordpress.org/jpyper\">Jpyper</a>, <a href=\"https://profiles.wordpress.org/jrf\">jrf</a>, <a href=\"https://profiles.wordpress.org/juliobox\">Julio Potier</a>, <a href=\"https://profiles.wordpress.org/jtsternberg\">Justin Sternberg</a>, <a href=\"https://profiles.wordpress.org/ungestaltbar\">Kai</a>, <a href=\"https://profiles.wordpress.org/karinchristen\">karinchristen</a>, <a href=\"https://profiles.wordpress.org/karpstrucking\">karpstrucking</a>, <a href=\"https://profiles.wordpress.org/ryelle\">Kelly Dwan</a>, <a href=\"https://profiles.wordpress.org/kevkoeh\">Kevin Koehler</a>, <a href=\"https://profiles.wordpress.org/kitchin\">kitchin</a>, <a href=\"https://profiles.wordpress.org/ixkaito\">Kite</a>, <a href=\"https://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"https://profiles.wordpress.org/lancewillett\">Lance Willett</a>, <a href=\"https://profiles.wordpress.org/leewillis77\">Lee Willis</a>, <a href=\"https://profiles.wordpress.org/leogopal\">Leo Gopal</a>, <a href=\"https://profiles.wordpress.org/loushou\">loushou</a>, <a href=\"https://profiles.wordpress.org/lumaraf\">Lumaraf</a>, <a href=\"https://profiles.wordpress.org/tyxla\">Marin Atanasov</a>, <a href=\"https://profiles.wordpress.org/nofearinc\">Mario Peshev</a>, <a href=\"https://profiles.wordpress.org/clorith\">Marius (Clorith)</a>, <a href=\"https://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"https://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"https://profiles.wordpress.org/marsjaninzmarsa\">marsjaninzmarsa</a>, <a href=\"https://profiles.wordpress.org/martinsachse\">martinsachse</a>, <a href=\"https://profiles.wordpress.org/matt\">Matt Mullenweg</a>, <a href=\"https://profiles.wordpress.org/veraxus\">Matt van Andel</a>, <a href=\"https://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"https://profiles.wordpress.org/mattyrob\">mattyrob</a>, <a href=\"https://profiles.wordpress.org/melchoyce\">Mel Choyce</a>, <a href=\"https://profiles.wordpress.org/nikonratm\">Michael</a>, <a href=\"https://profiles.wordpress.org/mdawaffe\">Michael Adams (mdawaffe)</a>, <a href=\"https://profiles.wordpress.org/michael-arestad\">Michael Arestad</a>, <a href=\"https://profiles.wordpress.org/michaelryanmcneill\">michaelryanmcneill</a>, <a href=\"https://profiles.wordpress.org/mcguive7\">Mickey Kay</a>, <a href=\"https://profiles.wordpress.org/mihai\">mihai</a>, <a href=\"https://profiles.wordpress.org/mikehansenme\">Mike Hansen</a>, <a href=\"https://profiles.wordpress.org/mnelson4\">Mike Nelson</a>, <a href=\"https://profiles.wordpress.org/dh-shredder\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/dimadin\">Milan Dinic</a>, <a href=\"https://profiles.wordpress.org/morganestes\">Morgan Estes</a>, <a href=\"https://profiles.wordpress.org/mrutz\">mrutz</a>, <a href=\"https://profiles.wordpress.org/nabil_kadimi\">nabil_kadimi</a>, <a href=\"https://profiles.wordpress.org/Nao\">Naoko Takano</a>, <a href=\"https://profiles.wordpress.org/nazmulhossainnihal\">Nazmul Hossain Nihal</a>, <a href=\"https://profiles.wordpress.org/nicholas_io\">nicholas_io</a>, <a href=\"https://profiles.wordpress.org/celloexpressions\">Nick Halsey</a>, <a href=\"https://profiles.wordpress.org/nickmomrik\">Nick Momrik</a>, <a href=\"https://profiles.wordpress.org/nikeo\">nikeo</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/rabmalin\">Nilambar Sharma</a>, <a href=\"https://profiles.wordpress.org/onnimonni\">Onni Hakala</a>, <a href=\"https://profiles.wordpress.org/ozh\">Ozh</a>, <a href=\"https://profiles.wordpress.org/pareshradadiya-1\">Paresh Radadiya</a>, <a href=\"https://profiles.wordpress.org/swissspidy\">Pascal Birchler</a>, <a href=\"https://profiles.wordpress.org/djpaul\">Paul Gibbs</a>, <a href=\"https://profiles.wordpress.org/figureone\">Paul Ryan</a>, <a href=\"https://profiles.wordpress.org/paulwilde\">Paul Wilde</a>, <a href=\"https://profiles.wordpress.org/pavelevap\">pavelevap</a>, <a href=\"https://profiles.wordpress.org/gungeekatx\">Pete Nelson</a>, <a href=\"https://profiles.wordpress.org/peterwilsoncc\">Peter Wilson</a>, <a href=\"https://profiles.wordpress.org/peterrknight\">PeterRKnight</a>, <a href=\"https://profiles.wordpress.org/philiparthurmoore\">Philip Arthur Moore</a>, <a href=\"https://profiles.wordpress.org/mordauk\">Pippin Williamson</a>, <a href=\"https://profiles.wordpress.org/posykrat\">posykrat</a>, <a href=\"https://profiles.wordpress.org/pragunbhutani\">pragunbhutani</a>, <a href=\"https://profiles.wordpress.org/rachelbaker\">Rachel Baker</a>, <a href=\"https://profiles.wordpress.org/ramiy\">Rami Yushuvaev</a>, <a href=\"https://profiles.wordpress.org/rarylson\">rarylson</a>, <a href=\"https://profiles.wordpress.org/lamosty\">Rastislav Lamos</a>, <a href=\"https://profiles.wordpress.org/rauchg\">rauchg</a>, <a href=\"https://profiles.wordpress.org/ravinderk\">Ravinder Kumar</a>, <a href=\"https://profiles.wordpress.org/rclations\">RC Lations</a>, <a href=\"https://profiles.wordpress.org/greuben\">Reuben Gunday</a>, <a href=\"https://profiles.wordpress.org/rianrietveld\">Rian Rietveld</a>, <a href=\"https://profiles.wordpress.org/ritteshpatel\">Ritesh Patel</a>, <a href=\"https://profiles.wordpress.org/miqrogroove\">Robert Chapin</a>, <a href=\"https://profiles.wordpress.org/rdall\">Robert Dall</a>, <a href=\"https://profiles.wordpress.org/rodrigosprimo\">Rodrigo Primo</a>, <a href=\"https://profiles.wordpress.org/rommelxcastro\">Rommel Castro</a>, <a href=\"https://profiles.wordpress.org/magicroundabout\">Ross Wintle</a>, <a href=\"https://profiles.wordpress.org/rhurling\">Rouven Hurling</a>, <a href=\"https://profiles.wordpress.org/ryan\">Ryan Boren</a>, <a href=\"https://profiles.wordpress.org/rmarks\">Ryan Marks</a>, <a href=\"https://profiles.wordpress.org/rmccue\">Ryan McCue</a>, <a href=\"https://profiles.wordpress.org/ohryan\">Ryan Neudorf</a>, <a href=\"https://profiles.wordpress.org/welcher\">Ryan Welcher</a>, <a href=\"https://profiles.wordpress.org/sagarjadhav\">Sagar Jadhav</a>, <a href=\"https://profiles.wordpress.org/salcode\">Sal Ferrarello</a>, <a href=\"https://profiles.wordpress.org/solarissmoke\">Samir Shah</a>, <a href=\"https://profiles.wordpress.org/santagada\">santagada</a>, <a href=\"https://profiles.wordpress.org/sc0ttkclark\">Scott Kingsley Clark</a>, <a href=\"https://profiles.wordpress.org/coffee2code\">Scott Reilly</a>, <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>, <a href=\"https://profiles.wordpress.org/scribu\">scribu</a>, <a href=\"https://profiles.wordpress.org/scruffian\">scruffian</a>, <a href=\"https://profiles.wordpress.org/seanchayes\">Sean Hayes</a>, <a href=\"https://profiles.wordpress.org/sebastiantiede\">Sebastian</a>, <a href=\"https://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"https://profiles.wordpress.org/shooper\">Shawn Hooper</a>, <a href=\"https://profiles.wordpress.org/designsimply\">Sheri Bigelow</a>, <a href=\"https://profiles.wordpress.org/simonwheatley\">Simon Wheatley</a>, <a href=\"https://profiles.wordpress.org/siobhan\">Siobhan</a>, <a href=\"https://profiles.wordpress.org/metodiew\">Stanko Metodiev</a>, <a href=\"https://profiles.wordpress.org/stephdau\">Stephane Daury (stephdau)</a>, <a href=\"https://profiles.wordpress.org/netweb\">Stephen Edgar</a>, <a href=\"https://profiles.wordpress.org/stevegrunwell\">Steve Grunwell</a>, <a href=\"https://profiles.wordpress.org/stevenkword\">Steven Word</a>, <a href=\"https://profiles.wordpress.org/stuartshields\">stuartshields</a>, <a href=\"https://profiles.wordpress.org/sudar\">Sudar Muthu</a>, <a href=\"https://profiles.wordpress.org/sunnyratilal\">Sunny Ratilal</a>, <a href=\"https://profiles.wordpress.org/taka2\">taka2</a>, <a href=\"https://profiles.wordpress.org/tharsheblows\">tharsheblows</a>, <a href=\"https://profiles.wordpress.org/thorbrink\">Thor Brink</a>, <a href=\"https://profiles.wordpress.org/creativeinfusion\">Tim Smith</a>, <a href=\"https://profiles.wordpress.org/tlexcellent\">tlexcellent</a>, <a href=\"https://profiles.wordpress.org/tmatsuur\">tmatsuur</a>, <a href=\"https://profiles.wordpress.org/tobiasbg\">TobiasBg</a>, <a href=\"https://profiles.wordpress.org/tomasm\">Tomas Mackevicius</a>, <a href=\"https://profiles.wordpress.org/tomharrigan\">TomHarrigan</a>, <a href=\"https://profiles.wordpress.org/toro_unit\">Toro_Unit (Hiroshi Urabe)</a>, <a href=\"https://profiles.wordpress.org/toru\">Toru Miki</a>, <a href=\"https://profiles.wordpress.org/liljimmi\">Tracy (LilJimmi) Levesque</a>, <a href=\"https://profiles.wordpress.org/tryon\">Tryon Eggleston</a>, <a href=\"https://profiles.wordpress.org/tywayne\">Ty Carlson</a>, <a href=\"https://profiles.wordpress.org/desaiuditd\">Udit Desai</a>, <a href=\"https://profiles.wordpress.org/umeshnevase\">Umesh Nevase</a>, <a href=\"https://profiles.wordpress.org/vivekbhusal\">vivekbhusal</a>, <a href=\"https://profiles.wordpress.org/vortfu\">vortfu</a>, <a href=\"https://profiles.wordpress.org/westonruter\">Weston Ruter</a>, <a href=\"https://profiles.wordpress.org/willnorris\">Will Norris</a>, <a href=\"https://profiles.wordpress.org/willgladstone\">willgladstone</a>, <a href=\"https://profiles.wordpress.org/earnjam\">William Earnhardt</a>, <a href=\"https://profiles.wordpress.org/willstedt\">willstedt</a>, <a href=\"https://profiles.wordpress.org/yoavf\">Yoav Farhi</a>, <a href=\"https://profiles.wordpress.org/ysalame\">Yuri Salame</a>, <a href=\"https://profiles.wordpress.org/oxymoron\">Zach Wills</a>, <a href=\"https://profiles.wordpress.org/katzwebdesign\">Zack Katz</a>, and <a href=\"https://profiles.wordpress.org/tollmanz\">Zack Tollman</a>.\n<p>&nbsp;</p>\n<p>Special thanks go to <a href=\"http://siobhanmckeown.com/\">Siobhan McKeown</a> for producing the release video, <a href=\"http://hugobaeta.com/\">Hugo Baeta</a> for the design, and <a href=\"http://jacklenox.com/\">Jack Lenox</a> for the voice-over.</p>\n<p>Finally, thanks to all of the contributors who provided subtitles for the release video, which at last count had been translated into 30 languages!</p>\n<p>If you want to follow along or help out, check out <a href=\"https://make.wordpress.org/\">Make WordPress</a> and our <a href=\"https://make.wordpress.org/core/\">core development blog</a>. Thanks for choosing WordPress. See you soon for version 4.4!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.2.4 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://wordpress.org/news/2015/08/wordpress-4-2-4-security-and-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 04 Aug 2015 12:10:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3827\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:397:\"WordPress 4.2.4 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. This release addresses six issues, including three cross-site scripting vulnerabilities and a potential SQL injection that could be used to compromise a site, which were discovered by Marc-Alexandre Montpas of Sucuri, Helen Hou-Sandí [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Samuel Sidler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2011:\"<p>WordPress 4.2.4 is now available. This is a<strong> security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>This release addresses six issues, including three cross-site scripting vulnerabilities and a potential SQL injection that could be used to compromise a site, which were discovered by <a href=\"https://sucuri.net/\">Marc-Alexandre Montpas</a> of Sucuri, <a href=\"http://helenhousandi.com/\">Helen Hou-Sandí</a> of the WordPress security team, <a href=\"http://www.checkpoint.com/\">Netanel Rubin</a> of Check Point, and <a href=\"https://hackerone.com/reactors08\">Ivan Grigorov</a>. It also includes a fix for a potential timing side-channel attack, discovered by <a href=\"http://www.scrutinizer-ci.com/\">Johannes Schmitt</a> of Scrutinizer, and prevents an attacker from locking a post from being edited, discovered by <a href=\"https://www.linkedin.com/in/symbiansymoh\">Mohamed A. Baset</a>.</p>\n<p>Our thanks to those who have practiced <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/\">responsible disclosure</a> of security issues.</p>\n<p>WordPress 4.2.4 also fixes four bugs. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.2.4\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.2?rev=33573&amp;stop_rev=33396\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.2.4</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.2.4.</p>\n<p><em>Already testing WordPress 4.3? The second release candidate is now available (<a href=\"https://wordpress.org/wordpress-4.3-RC2.zip\">zip</a>) and it contains these fixes. For more on 4.3, see <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-release-candidate/\">the RC 1 announcement post</a>.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress 4.3 Release Candidate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/news/2015/07/wordpress-4-3-release-candidate/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Jul 2015 23:50:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3817\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:340:\"The release candidate for WordPress 4.3 is now available. We&#8217;ve made more than 100 changes since releasing Beta 4 a week ago. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.3 on Tuesday, August 18, but we [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Konstantin Obenland\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2256:\"<p>The release candidate for WordPress 4.3 is now available.</p>\n<p>We&#8217;ve made more than <a href=\"https://core.trac.wordpress.org/log/trunk?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=33512&amp;stop_rev=33372&amp;limit=120\">100 changes</a> since releasing Beta 4 a week ago. RC means we think we’re done, but with millions of users and thousands of plugins and themes, it’s possible we’ve missed something. We hope to ship WordPress 4.3 on <strong>Tuesday, August 18</strong>, but we need your help to get there.</p>\n<p>If you haven’t tested 4.3 yet, now is the time!</p>\n<p><strong>Think you&#8217;ve found a bug?</strong> Please post to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta support forum</a>. If any known issues come up, you&#8217;ll be able to <a href=\"https://core.trac.wordpress.org/report/5\">find them here</a>.</p>\n<p>To test WordPress 4.3 RC1, you can use the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin or you can <a href=\"https://wordpress.org/wordpress-4.3-RC1.zip\">download the release candidate here</a> (zip).</p>\n<p>For more information about what’s new in version 4.3, check out the <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-2/\">Beta 2</a>, <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-3/\">Beta 3</a>, and <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-4/\">Beta 4</a> blog posts.</p>\n<p><strong>Developers</strong>, please test your plugins and themes against WordPress 4.3 and update your plugin&#8217;s <em>Tested up to</em> version in the readme to 4.3 before next week. If you find compatibility problems, we never want to break things, so please be sure to post to the support forums so we can figure those out before the final release.</p>\n<p>Be sure to <a href=\"https://make.wordpress.org/core/\">follow along the core development blog</a>, where we&#8217;ll continue to post <a href=\"https://make.wordpress.org/core/tag/dev-notes+4-3/\">notes for developers</a> for 4.3.</p>\n<p><em>Drei Monate Arbeit</em><br />\n<em>Endlich das Ziel vor Augen</em><br />\n<em>Bald hab ich Urlaub!</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 4.2.3 Security and Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/news/2015/07/wordpress-4-2-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Jul 2015 11:21:10 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3807\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:380:\"WordPress 4.2.3 is now available. This is a security release for all previous versions and we strongly encourage you to update your sites immediately. WordPress versions 4.2.2 and earlier are affected by a cross-site scripting vulnerability, which could allow users with the Contributor or Author role to compromise a site. This was initially reported by Jon Cave and [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Gary Pendergast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2708:\"<p>WordPress 4.2.3 is now available. This is a<strong> security release</strong> for all previous versions and we strongly encourage you to update your sites immediately.</p>\n<p>WordPress versions 4.2.2 and earlier are affected by a cross-site scripting vulnerability, which could allow users with the Contributor or Author role to compromise a site. This was initially reported by <a href=\"https://profiles.wordpress.org/duck_\">Jon Cave</a> and fixed by <a href=\"http://www.miqrogroove.com/\">Robert Chapin</a>, both of the WordPress security team, and later reported by <a href=\"http://klikki.fi/\">Jouko Pynnönen</a>.</p>\n<p>We also fixed an issue where it was possible for a user with Subscriber permissions to create a draft through Quick Draft. Reported by Netanel Rubin from <a href=\"https://www.checkpoint.com/\">Check Point Software Technologies</a>.</p>\n<p>Our thanks to those who have practiced <a href=\"https://make.wordpress.org/core/handbook/reporting-security-vulnerabilities/\">responsible disclosure</a> of security issues.</p>\n<p>WordPress 4.2.3 also contains fixes for 20 bugs from 4.2. For more information, see the <a href=\"https://codex.wordpress.org/Version_4.2.3\">release notes</a> or consult the <a href=\"https://core.trac.wordpress.org/log/branches/4.2?rev=33382&amp;stop_rev=32430\">list of changes</a>.</p>\n<p><a href=\"https://wordpress.org/download/\">Download WordPress 4.2.3</a> or venture over to Dashboard → Updates and simply click “Update Now.” Sites that support automatic background updates are already beginning to update to WordPress 4.2.3.</p>\n<p>Thanks to everyone who contributed to 4.2.3:</p>\n<p><a href=\"https://profiles.wordpress.org/jorbin\">Aaron Jorbin</a>, <a href=\"https://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"https://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"https://profiles.wordpress.org/boonebgorges\">Boone Gorges</a>, <a href=\"https://profiles.wordpress.org/chriscct7\">Chris Christoff</a>, <a href=\"https://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"https://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"https://profiles.wordpress.org/iseulde\">Ella Iseulde Van Dorpe</a>, <a href=\"https://profiles.wordpress.org/gabrielperezs\">Gabriel Pérez</a>, <a href=\"https://profiles.wordpress.org/pento\">Gary Pendergast</a>, <a href=\"https://profiles.wordpress.org/mdawaffe\">Mike Adams</a>, <a href=\"https://profiles.wordpress.org/miqrogroove\">Robert Chapin</a>, <a href=\"https://profiles.wordpress.org/nbachiyski\">Nikolay Bachiyski</a>, <a href=\"https://profiles.wordpress.org/magicroundabout\">Ross Wintle</a>, and <a href=\"https://profiles.wordpress.org/wonderboymusic\">Scott Taylor</a>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.3 Beta 4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Jul 2015 21:55:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3796\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:337:\"WordPress 4.3 Beta 4 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.3, try the WordPress Beta Tester plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Konstantin Obenland\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2212:\"<p>WordPress 4.3 Beta 4 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.3, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"https://wordpress.org/wordpress-4.3-beta4.zip\">download the beta here</a> (zip).</p>\n<p>For more information about what’s new in version 4.3, check out the <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-1/\">Beta 1</a>, <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-2/\">Beta 2</a>, and <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-3/\">Beta 3</a> blog posts. Some of the changes in Beta 4 include:</p>\n<ul>\n<li><span class=\"s1\">Fixed several bugs and broken flows in the </span><span class=\"s1\"><strong>publish box </strong></span><span class=\"s1\">in the edit screen.</span></li>\n<li>Addressed a number of edge cases for word count in the <strong>editor</strong>.</li>\n<li><span class=\"s1\"><strong>Site icons</strong> </span><span class=\"s1\">can now be previewed within the customizer. The feature has been removed from general settings.</span></li>\n<li><strong>Various bug fixes</strong>. We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log/trunk?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=33369&amp;stop_rev=33289\">more than 60 changes</a> in the last week.</li>\n</ul>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.3\">everything we’ve fixed</a>.</p>\n<p><em>Few Tickets Remain</em><br />\n<em>Edge Cases Disappearing</em><br />\n<em>You Must Test Today</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:39:\"\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 4.3 Beta 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Jul 2015 21:49:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"4.3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=3787\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:337:\"WordPress 4.3 Beta 3 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.3, try the WordPress Beta Tester plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Konstantin Obenland\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2529:\"<p>WordPress 4.3 Beta 3 is now available!</p>\n<p><strong>This software is still in development,</strong> so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.3, try the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"https://wordpress.org/wordpress-4.3-beta3.zip\">download the beta here</a> (zip).</p>\n<p>For more information about what’s new in version 4.3, check out the <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-1/\">Beta 1</a> and <a href=\"https://wordpress.org/news/2015/07/wordpress-4-3-beta-2/\">Beta 2</a> blog posts. Some of the changes in Beta 3 include:</p>\n<ul>\n<li>Performance improvements for <strong>Menus in the Customizer</strong>, as well as bug fixes and visual enhancements.</li>\n<li>Added <strong>Site Icon</strong> to the Customizer. The feature is now complete and requires lots of testing. Please help us ensure the site icon feature works well in both Settings and the Customizer.</li>\n<li>The improvements to <strong>Passwords</strong> have been added to the installation flow. When installing and setting up WordPress, a strong password will be suggested to site administrators. Please test and let us know if you encounter issues.</li>\n<li>Improved <strong>accessibility of comments and media list tables</strong>. If you use a screen reader, please let us know if you encounter any issues.</li>\n<li>Lots and lots of code documentation improvements.</li>\n<li><strong>Various other bug fixes</strong>. We&#8217;ve made <a href=\"https://core.trac.wordpress.org/log?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=33286&amp;stop_rev=33141&amp;limit=150\">more than 140 changes</a> in the last week.</li>\n</ul>\n<p>If you think you’ve found a bug, you can post to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a bug report, <a href=\"https://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"https://core.trac.wordpress.org/tickets/major\">a list of known bugs</a> and <a href=\"https://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=4.3\">everything we’ve fixed</a>.</p>\n<p><em>Want to test new things?</em><br />\n<em>Wonder how four three shapes up?</em><br />\n<em>Answer: beta three</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:32:\"https://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Wed, 11 Nov 2015 10:00:05 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:13:\"last-modified\";s:29:\"Fri, 06 Nov 2015 20:18:47 GMT\";s:4:\"link\";s:77:\"<https://wordpress.org/news/wp-json/>; rel=\"https://github.com/WP-API/WP-API\"\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";}s:5:\"build\";s:14:\"20130911040210\";}','no'),(5477,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1447279205','no'),(5478,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1447236005','no'),(5479,'_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9','1447279207','no'),(5480,'_transient_feed_d117b5738fbd35bd8c0391cda1f2b5d9','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"WPTavern: BuddyPress 2.3.5 Patches Privilege Escalation Issue\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48918\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"http://wptavern.com/buddypress-2-3-5-patches-privilege-escalation-issue\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:994:\"<p>BuddyPress 2.3.5 <a href=\"https://buddypress.org/2015/11/buddypress-2-3-5/\">is available</a> and patches a security vulnerability that may allow privilege escalation for logged-in users. BuddyPress 2.3.4 and previous versions are affected however, versions 2.0.4, 2.1.2, and 2.2.4 include the patch.</p>\n<p>According to the BuddyPress development team, there is no evidence that the bug has been exploited in the wild. If your WordPress site supports automatic updates to point releases, it will likely be updated by the time you read this post.</p>\n<p><a href=\"https://profiles.wordpress.org/slaFFik\">Slava Abakumov</a> discovered the vulnerability and <a href=\"https://make.wordpress.org/core/handbook/reporting-security-vulnerabilities/\">responsibly disclosed</a> it to the development team. If you run into any issues with the update, you&#8217;re encouraged to post on the BuddyPress <a href=\"https://buddypress.org/support/\">support forums</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Nov 2015 07:42:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"Matt: Arthur C. Clarke on Distributed Work\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45546\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://ma.tt/2015/11/arthur-c-clarke-on-distributed-work/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1737:\"<p><span class=\"embed-youtube\"></span></p>\n<p>I saw the new Steve Jobs movie a few days ago, which I enjoyed as a movie even though <a href=\"http://daringfireball.net/linked/2015/10/22/mossberg-steve-jobs\">the main elements were fiction and it should have been titled something else</a>.</p>\n<p>But they had an awesome video interview with <a href=\"https://en.wikipedia.org/wiki/Arthur_C._Clarke\">the amazing Arthur C. Clarke</a> in 1974, which I&#8217;ve embedded above, where he said the following right around 0:56.</p>\n<blockquote><p>Interviewer: I wonder though, what sort of a life will it be in social terms if our whole life is built around the computer, if we become a computer-dependent society, computer-dependent individuals.</p>\n<p>ACC: In some ways, but they&#8217;ll also enrich our society because it&#8217;ll make it possible for us to live anywhere we like. Any businessman, any executive could live almost anywhere on earth and still do his business through a device like this, and this is a wonderful thing, it means we won&#8217;t have to be stuck in cities, we can live out in the country or wherever we please, and still carry on complete interaction with human beings, as well as with other computers.</p></blockquote>\n<p>Wow, extremely prescient. Remember, this was 1974! The dominant technology companies of today still follow the same office-centric model as when computers took up entire rooms, but the dominant companies of tomorrow will be built and grow in a completely distributed fashion. (And of course, <a href=\"https://automattic.com/work-with-us/\">we&#8217;re hiring</a>.)</p>\n<p>See also, from 2012: <a href=\"http://ma.tt/2012/09/future-of-work/\">Automattic, Forbes, and the Future of Work</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 22:00:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"WPTavern: More Than 250 Tickets Still Available for WordCamp US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48902\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://wptavern.com/more-than-250-tickets-still-available-for-wordcamp-us\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2861:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/WordCampUSAFeaturedImage.png\" rel=\"attachment wp-att-32754\"><img class=\"size-full wp-image-32754\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/WordCampUSAFeaturedImage.png?resize=640%2C276\" alt=\"WordCamp USA Featured Image\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/vgrigoriu/363904283/\">vgrigoriu</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a>\n<p>In a little less than a month, the first annual <a href=\"https://2015.us.wordcamp.org/\">WordCamp US</a> will be underway in Philadelphia, PA. There&#8217;s still <a href=\"https://2015.us.wordcamp.org/tickets/\">251 tickets available</a> to attend the event in person. The <a href=\"https://2015.us.wordcamp.org/schedule/\">schedule and sessions</a> are published and it looks like an informational packed two-day event.</p>\n<p>There are three tracks available, two of which will have typical length sessions with a third track dedicated to lightning talks. I highly encourage you to <a href=\"https://2015.us.wordcamp.org/schedule/\">view the schedule</a> and create a list of sessions to attend as the first day has over 40 of them.</p>\n<p>Reed Gustow, one of the event&#8217;s primary organizers says they&#8217;re expecting a lot of attendees, &#8220;We&#8217;re expecting 2,000 attendees from across the United States and from many other countries, and it will be a wonderful opportunity to learn, share knowledge and meet others in the amazing WordPress community.&#8221;</p>\n<p>In addition to WordCamp US, there will be a <a href=\"https://2015.us.wordcamp.org/2015/11/09/join-us-for-the-wordcamp-us-contributor-day/\">WordPress contributor day</a> on December 6th. During contributor day, people from all walks of life get together and contribute to various parts of the WordPress project whether it&#8217;s the support forums, core code, documentation, and more. Mentors will be on hand to help new contributors.</p>\n<p>Last but not least, the most important information is where to eat a great tasting cheesesteak. After all, it&#8217;s one of the things <a href=\"http://www.visitphilly.com/itineraries/philadelphia/where-to-find-the-best-cheesesteaks-in-philadelphia/\">Philadelphia is known for</a>. The WordCamp US organizing team has you <a href=\"https://2015.us.wordcamp.org/2015/11/09/the-cheesesteak-post/\">covered with a post</a> that describes the different types of cheesesteaks and where to find the best tasting ones.</p>\n<p><a href=\"https://2015.us.wordcamp.org/location/\">Hotel and venue information</a> for the event is on the WordCamp US website. Unfortunately, I&#8217;m not attending the event this year, but <a href=\"http://wptavern.com/contributors\">Sarah Gooding</a> will be there. If you see her, stop her and say hi.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 05:39:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: A Quarter of the Top 10 Million Sites Ranked by Alexa Use WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48885\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/a-quarter-of-the-top-10-million-sites-ranked-by-alexa-use-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4996:\"<p>According to Matthias Gelbmann of <a href=\"http://w3techs.com\">W3Techs</a>, 25% of the <a href=\"http://w3techs.com/blog/entry/wordpress-powers-25-percent-of-all-websites\">sites it surveys</a> are using WordPress. The milestone comes two years after reaching the 20% mark.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/QuarterOfTheWebWP.png\" rel=\"attachment wp-att-48888\"><img class=\"size-full wp-image-48888\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/QuarterOfTheWebWP.png?resize=557%2C398\" alt=\"Quarter of the Web\" /></a>Quarter of the Web\n<p>The following image shows WordPress&#8217; rapid growth from 13.1% in January 2011 to 25% today.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/UsageHistory.png\" rel=\"attachment wp-att-48889\"><img class=\"size-full wp-image-48889\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/UsageHistory.png?resize=900%2C298\" alt=\"WordPress\' Growth\" /></a>WordPress&#8217; Growth\n<p>Drupal and Joomla, two other popular open source content management systems combine for 4.9%, slightly less than 1/5th of WordPress.</p>\n<p>W3Techs counts both self hosted WordPress and WordPress.com sites, &#8220;We only count the hosted sites if they are reachable via their own domain (not only as subdomain of wordpress.com), and they must qualify like all other sites in our surveys by getting enough visitors on that separate domain to make it into the top 10 million Alexa sites,&#8221; Gelbmann says.</p>\n<p>This means that only those sites on WordPress.com that use domain mapping and have enough traffic to be in the top 10 million Alexa sites are counted leaving millions of WordPress.com sites uncounted. Only 1.25% of WordPress sites in the survey are hosted at WordPress.com.</p>\n<h2>The Fastest Growing CMS</h2>\n<p>The survey also shows that WordPress is still the fastest growing CMS, &#8220;Every 74 seconds a site within the top 10 million starts using WordPress. Compare this with Shopify, the second-fastest growing CMS, which is gaining a new site every 22 minutes,&#8221; Gelbmann says.</p>\n<p>When sites are broken down into languages, WordPress is used on 37.3% of English language sites. Portuguese, Spanish, Swedish and Turkish sites are inbetween 38-40% while Bengali is 51.3% and 54.4% for Bosnian. Only 10.6% of WordPress sites are in Chinese with 6.9% for Korean.</p>\n<p>About 94% of sites surveyed use a Unix-like operating system such as Ubuntu. Windows servers host 6.2% of WordPress sites making it the most popular CMS running on Windows servers.</p>\n<p>Matt Mullenweg, Co-founder of the WordPress project, says the <a href=\"http://ma.tt/2015/11/seventy-five-to-go/\">largest opportunity for growth</a> is in the 57% of sites not using <em>any</em> identifiable CMS. Earlier this year, we learned that <a href=\"http://wptavern.com/how-important-is-jetpack-on-wordpress-road-to-50-market-share\">Jetpack is going to play a significant role</a> in WordPress gaining 50% or more of market share.</p>\n<p>In an <a href=\"http://kitchensinkwp.com/podcast-e048-interview-with-matt-mullenweg/\" target=\"_blank\">interview with Adam Silver on the KitchensinkWP podcast</a>, Mullenweg explains the path to 50% and beyond.</p>\n<blockquote><p>The next goal is the majority of websites. We want to get to 50%+ and there’s a lot of work between now and then. As the percentage increases, it gets harder and harder to grow the market share, and we have to grow the market share by doing things we haven’t done in the past – really thinking about the onboarding process, really thinking about the integration with social networks, and with how WordPress works on touch devices, which is going to be the predominant computing platform of the future. These things are going to be really important.</p>\n<p>What got us here isn’t going to get us there. Once we get to 50%, we can decide something new we want to do</p></blockquote>\n<p>Automattic is experimenting with a new side project called <a href=\"https://github.com/automattic/jetpack-onboarding\">Jetpack Onboarding</a>. The project is an attempt to improve WordPress&#8217; new user experience. Hosting companies that choose to implement it can modify, add, or remove steps.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackOnboardingScreen.png\" rel=\"attachment wp-att-48891\"><img class=\"size-full wp-image-48891\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackOnboardingScreen.png?resize=1025%2C469\" alt=\"Jetpack Onboarding Screen\" /></a>Jetpack Onboarding Wizard\n<p>Keep in mind that W3Techs&#8217; market share numbers are based on the top 10 million sites in Alexa. Fifty percent market share is 5 million of those 10 million sites. Are these the sites WordPress should be targeting with development efforts? Are they more important than the millions of sites not ranked by Alexa? I don&#8217;t think so but only time will tell.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 04:34:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Matt: AVC On Tracking\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45572\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://ma.tt/2015/11/avc-on-tracking/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:524:\"<blockquote><p>If you listed the habits of successful people, tracking and measuring would be near the top of that list. I see it with people, companies, and teams that I work with. I see it in my own behavior.</p></blockquote>\n<p>Fred Wilson writes on <a href=\"http://avc.com/2015/11/track-and-measure/\">Tracking and Measuring</a>. Lack of measurement &#8212; picking stats and watching them before and after a launch &#8212; is one of the most common mistakes I see product teams make, certainly inside of Automattic.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 23:29:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Seventy-Five to Go\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45568\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/11/seventy-five-to-go/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1391:\"<p>People are abuzz because it looks like the <a href=\"http://w3techs.com/\">W3Techs survey</a> of the web <a href=\"http://w3techs.com/technologies/history_overview/content_management/all/y\">now has WordPress at 25% market share</a>.</p>\n<p><a href=\"https://cloudup.com/cys3qUJxyRT\"><img src=\"https://cldup.com/jX4J6C_emK-900x900.png\" alt=\"Screen Shot\" width=\"900\" height=\"298\" /></a></p>\n<p>Sometimes it goes up and down through the course of a month, but it&#8217;s still a pretty fun milestone that we can now say about one in four websites are now powered by the <a href=\"https://wordpress.org/\">scrappy open source underdog</a> with its roots stretching all the way back to a single person in Corsica, France. We should be comfortably past 25% by the end of the year.</p>\n<p>The big opportunity is still the 57% of websites that don&#8217;t use <em>any</em> identifiable CMS yet, and that&#8217;s where I think there is still a ton of growth for us (and I&#8217;m also rooting for all the other open source CMSes).</p>\n<p>If you want to celebrate with us <a href=\"https://2015.us.wordcamp.org/\">come to the first-ever WordCamp US event next month in Philadelphia</a> (tickets still available) &#8212; it&#8217;s shaping up to be an amazing event. We just <a href=\"https://2015.us.wordcamp.org/schedule/\">published the schedule and there are some amazing speakers and sessions</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 13:15:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"WPTavern: How Not to Communicate Grievances with WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48861\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wptavern.com/how-not-to-communicate-grievances-with-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9778:\"<p>A few days ago, <a href=\"http://wptavern.com/how-non-developers-can-contribute-to-and-influence-wordpress-core-development\">I offered advice</a> on how non-developers can contribute to and influence core WordPress development. Communicating online is hard but where and how you communicate affects the likelihood of making an impact.</p>\n<p><a href=\"https://www.cmscritic.com/\">CMS Critic</a> is a site I&#8217;ve read for years as it routinely publishes articles on a variety of content management systems, including WordPress.</p>\n<p>In late October, Kaya Ismail <a href=\"http://www.cmscritic.com/how-wordpress-needs-to-improve-itself/\">published an article</a> that describes how WordPress needs to improve itself in six ways. What could have been a great article, is instead a great example of <strong>how not to</strong> communicate grievances you have with WordPress.</p>\n<h2>Twenty Sixteen Developers Are Lazy</h2>\n<p>Many people, including myself <a href=\"http://wptavern.com/first-look-at-the-twenty-sixteen-default-wordpress-theme#comments\">have an opinion</a> of the Twenty Sixteen theme in WordPress 4.4. Ismail thinks the developers behind the theme are lazy.</p>\n<blockquote><p>I totally understand that WordPress doesn&#8217;t need to compete with the massive library of third-party themes available out there, but that doesn&#8217;t mean that they should lead with a default theme as bad as that. It&#8217;s nothing short of lazy.</p></blockquote>\n<p>Tammie Lister, Takashi Irie, and others continue to work hard on Twenty Sixteen to prepare it for the WordPress 4.4 release in December. They are far from lazy people making Ismail&#8217;s opinion more of an insult. He doesn&#8217;t provide any examples or ideas on what should be in a default theme.</p>\n<h2>The WordPress Plugin Directory</h2>\n<p>According to Ismail, the WordPress plugin directory is filled with large chunks of trash in addition to great plugins. While some plugins in the directory could be coded better, his explanation falls short of describing a solution.</p>\n<blockquote><p>Many plugins simply don&#8217;t work, while many more are poorly put together, which in turn makes WordPress as a platform harder to use. Quality control needs to improve.</p></blockquote>\n<p>He doesn&#8217;t link to plugins that are broken, provide any code samples, or show where quality control is lacking. His statement is an assumption that&#8217;s not backed by evidence.</p>\n<p>Those who <a href=\"http://wptavern.com/behind-the-scenes-in-the-wordpress-plugin-directory-with-mika-epstein\">oversee the plugin directory</a> don&#8217;t test every submitted plugin to make sure it works with WordPress. Among other things, their job is to make sure plugin submissions don&#8217;t have security issues. If the moderators performed quality control on every plugin, the submission queue would likely have a substantial backlog.</p>\n<p>Instead of writing baseless assumptions, Ismail should monitor the <a href=\"https://make.wordpress.org/plugins/\">Make WordPress Plugins</a> site to stay on top of what&#8217;s going on with the plugin directory and submit feedback where necessary. If a broken plugin is discovered, he should create a forum thread within the plugin&#8217;s support area.</p>\n<p>This way, his feedback is seen by those who directly control the WordPress plugin directory. The simple act of reporting a broken plugin to the developer is a major step towards being part of the solution and not the problem.</p>\n<h2>Admin Menu Clutter</h2>\n<p>I agree with Ismail&#8217;s opinion that the WordPress admin menus can become cluttered if the right plugins are activated. At least in this case, he suggests an alternative.</p>\n<blockquote><p>I&#8217;d like to see WordPress group third-party menu options together, in a way that&#8217;s a little more organized and less intrusive. Perhaps this can be done by giving them a sub-section within the menu which can be collapsed. The solution itself is up to them, but the problem is evident.</p></blockquote>\n<p>There <a href=\"https://codex.wordpress.org/Administration_Menus\">are guidelines</a> for when plugin developers should create top-level or sub-level menu items but they&#8217;re not followed as well as they could be. Without strictly enforcing these guidelines, it&#8217;s out of WordPress&#8217; hands. The complaint is aimed in the wrong direction and should point towards third-party developers, not WordPress itself.</p>\n<p>If you want more control in how items are displayed in the admin menu, I recommend using the <a href=\"https://wordpress.org/plugins/menu-humility/\">Menu Humility</a> plugin by Mark Jaquith.</p>\n<h2>Akismet is Not Enough</h2>\n<p>According to Ismail, comment spam is a major issue with WordPress sites and Akismet doesn&#8217;t do enough to stop it.</p>\n<blockquote><p>Akismet, a spam comment filter, now comes with every WordPress install &#8211; which is a good thing. But the free version doesn&#8217;t do enough for me, as comments still pile up in the back end. If you ask me, WordPress needs to find another way to turn the unrelenting tide of spam.</p></blockquote>\n<p>To clarify, Akismet has been bundled with WordPress since <a href=\"https://wordpress.org/news/2005/12/wp2/\">version 2.0</a> and there&#8217;s no difference between the free and commercial versions in how Akismet protects sites. He doesn&#8217;t provide any suggestions on what WordPress could do to thwart spam but says it has to do something.</p>\n<p>What are members of the WordPress core team supposed to do with this kind of feedback? It&#8217;s not helpful, doesn&#8217;t provide any ideas, and is easy to discard.</p>\n<h2>Updates are Hard</h2>\n<p>Depending on your webhost&#8217;s configuration, updating themes, plugins, and WordPress is as simple as clicking a button. For the more adventurous, you can configure them to happen automatically. For Ismail, the update process is difficult.</p>\n<blockquote><p>Updating a plugin may cause conflicts between it and another plugin. Updating a theme can erase your modifications (unless you use a child theme), whereas updating WordPress itself can render a variety of your plugins redundant until their developers apply a patch. Confused yet? You should be.</p></blockquote>\n<p>He makes a few good points but editing a theme instead of a child theme is like editing WordPress core files which should almost never happen. It&#8217;s true that there is a slight risk of <a href=\"http://wptavern.com/plugin-developers-demand-a-better-security-release-process-after-wordpress-4-2-3-breaks-thousands-of-websites\">things breaking</a> after an update but it&#8217;s more of an anomaly than a common occurrence.</p>\n<p>Ismail suggests that WordPress look into preserving theme changes across the board and to provide alerts if  plugins interfere with each other. I like these suggestions and my hope is that one day, WordPress will be able to create a snapshot during the update process to provide assurance that the site won&#8217;t break after an update is applied.</p>\n<h2>WordPress Hack-a-thon</h2>\n<p>Ismail&#8217;s last point is how WordPress can improve its security.</p>\n<blockquote><p>I think we can all agree that WordPress needs to beef itself up (by shoring up its admin login page, for example), but I call for it to go a step further and start offering better protection, even if it comes at a small price.</p>\n<p>Third party solutions exist, sure. But why should I have to patch together several security plugins, each with their own confusing settings, just to secure my website? Many WordPress users have become accustom to handling their own security in this way; but I think WordPress needs to take on more responsibility.</p></blockquote>\n<p>He wants WordPress to go a step further and offer better protection but doesn&#8217;t say what that protection is. He also doesn&#8217;t explain where, how, or why WordPress should take on more responsibility to make sites more secure.</p>\n<h2>Be Part of the Solution, Not the Problem</h2>\n<p>Ismail concludes his article by saying it&#8217;s time for WordPress to innovate. He also says, &#8220;The onus isn&#8217;t on me to provide the solution, it&#8217;s upon WordPress. And it&#8217;s about time they started coming up with innovative solutions for their long-standing issues.&#8221;</p>\n<p>The article is <a href=\"https://www.cmscritic.com/wordpress-4.4-beta-bare-bones/\">another example</a> of how CMS Critic chooses not to be part of the solution. Everyone is entitled to their opinions, but airing grievances which sound more like demands and telling core developers to start innovating is not a recipe for results.</p>\n<p><a href=\"http://www.smashingmagazine.com/2013/05/contributing-to-wordpress/\">This quote</a> from WordPress core developer, Mark Jaquith, eloquently describes how important communication skills are in an open source project.</p>\n<blockquote><p>The number one skill you need for just about any job, but specifically working on open source, is communication skills. You need to have clarity, consistency, compassion, relatability, a little bit of a thick skin and a decent sense of humor.</p></blockquote>\n<p>The onus may not be on Ismail or any of us to come up with solutions, but he and others can help discover and be part of solutions by taking an active role in giving constructive feedback in <a href=\"http://hughlashbrooke.com/2015/11/03/a-non-developers-guide-to-getting-involved-in-wordpress-core-development/\">the right place</a>. WordPress has its fair share of issues but there are <a href=\"http://www.smashingmagazine.com/2013/05/contributing-to-wordpress/\">plenty of opportunities</a> for people to step up and contribute to make the software better.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 18:52:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"WPTavern: Jetpack 3.8 Adds Google+ Badges and Fixes Contact Form Response Emails\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48853\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wptavern.com/jetpack-3-8-adds-google-badges-and-fixes-contact-form-response-emails\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3200:\"<p>Jetpack 3.8 is <a href=\"http://jetpack.me/2015/11/04/jetpack-3-8-google-badges-and-more/\">available for download</a> and includes, Google+ badges, Twitch.TV embed shortcode, improvements to the contact form module, and bug fixes.</p>\n<p>Users can now display a Google+ Badge widget that shows your Google+ profile, page, or community.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/GooglePlusBadgeSettings.png\" rel=\"attachment wp-att-48854\"><img class=\"size-full wp-image-48854\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/GooglePlusBadgeSettings.png?resize=443%2C493\" alt=\"Google Plus Badge Settings\" /></a>Google Plus Badge Settings\n<p>You can configure the badge&#8217;s width, layout, and choose between a light or dark color scheme. A Google+ icon has also been added to the Social Media Icons widget bringing the total number of available icons to nine.</p>\n<p>Those who use the Shortcode Embeds module can now easily embed videos from <a href=\"http://www.twitch.tv/\">Twitch.tv</a> using the <a href=\"https://en.support.wordpress.com/videos/twitch-tv-shortcode/\">[ twitchtv ] shortcode</a>. The shortcode&#8217;s attributes allow you to modify the width, height, and whether or not the video autoplays.</p>\n<p>In previous versions of Jetpack, the Contact Form module checkbox field type was limited to a single item. In Jetpack 3.8, check box field types can have multiple items.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackContactFormMultipleFields.png\" rel=\"attachment wp-att-48855\"><img class=\"size-full wp-image-48855\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackContactFormMultipleFields.png?resize=746%2C713\" alt=\"Multiple Options Field\" /></a>Multiple Options Field\n<p>One of my favorite enhancements in Jetpack 3.8 is the improved styling to contact form email responses. In previous versions of Jetpack, emails <a href=\"https://github.com/Automattic/jetpack/issues/49\">didn&#8217;t match the order of the fields</a> within the contact form. Now, any responses to the contact form will show up in the order you set.</p>\n<p>Other notable improvements in Jetpack 3.8 include:</p>\n<ul>\n<li>Lots of new filters to allow further customization of Jetpack.</li>\n<li>Better error messaging for Subscription Widget sign up forms.</li>\n<li>Improvements and enhancements to accessibility.</li>\n</ul>\n<p>In addition to features and bug fixes, this release contains contributions from Daisuke Takahashi and Eduardo Reveles. Takahashi lives in Japan and is responsible for the Google+ Badge Widget. Reveles not only filed a <a href=\"https://github.com/osiux\">substantial amount of issue reports on Github</a> but also submitted a lot of patches.</p>\n<p>These two are among a group of more than 40 people who worked on Jetpack 3.8. Check out Jetpack&#8217;s <a href=\"http://jetpack.me/contribute/\">contribute page</a> if you&#8217;d like to get involved with the project. Also, be sure to read how you can <a href=\"http://wptavern.com/jetpack-relaunches-beta-testing-program\">join the Jetpack beta testing team</a> to be among the first to test new features.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 07:12:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Matt: Most Miles of Road: Texas\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45563\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://ma.tt/2015/11/most-miles-of-road-texas/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:405:\"<p>I was wondering the other day how many miles of road were in every state, and guessed that Texas must be the highest. It turns out it is, <a href=\"http://blog.cubitplanning.com/2010/02/road-miles-by-state/\">according to this list of the road mileage of every state</a>. It&#8217;s about 70% more than the runner-up, California. After TX and CA, it&#8217;s Illinois, Kansas, Minnesota, and Missouri.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 05 Nov 2015 16:20:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: Justin Tadlock Explains Taxonomy Term Meta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48843\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/justin-tadlock-explains-taxonomy-term-meta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1323:\"<p>While developers celebrate the <a href=\"http://wptavern.com/the-first-half-of-the-rest-api-is-officially-added-to-wordpress-core\">first half of the WordPress REST API</a> being merged into WordPress, there&#8217;s also another reason to celebrate. Six years <a href=\"https://core.trac.wordpress.org/ticket/10142\">in the making</a>, taxonomy term meta <a href=\"https://make.wordpress.org/core/2015/10/23/4-4-taxonomy-roundup/\">will be available</a> in WordPress 4.4.</p>\n<p>If you&#8217;re like me and don&#8217;t have a clue as to what taxonomy term meta is, I highly encourage you to read Justin Tadlock&#8217;s <a href=\"http://themehybrid.com/weblog/introduction-to-wordpress-term-meta\">explanation and tutorial</a>. In the post, Tadlock explains why term meta is significant and some of the possibilities it affords developers.</p>\n<p>After reading through the tutorial, I have a better understanding as to why developers are so excited. Not only does it create more opportunities to extend WordPress, but does so in a standard and expected way. Previous to WordPress 4.4, developers had to rely on work-arounds to add term meta to taxonomies.</p>\n<p>Let us know what you think of the tutorial and how you plan to take advantage of this feature once WordPress 4.4 is released.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 05 Nov 2015 08:45:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WPTavern: Easily Add Citations to Quotes With the Better Blockquotes Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48833\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"http://wptavern.com/easily-add-citations-to-quotes-with-the-better-blockquotes-plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2123:\"<p><a href=\"https://github.com/devinsays/better-blockquotes\">Better Blockquotes</a> is a free WordPress plugin created by <a href=\"http://wptheming.com/\">Devin Price</a> that makes it easy to add citations to blockquotes. When a user clicks the blockquote button with no text highlighted, a dialogue box pops up with options to add a quote, citation, and a citation link.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquoteOptions.png\" rel=\"attachment wp-att-48834\"><img class=\"size-full wp-image-48834\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquoteOptions.png?resize=448%2C307\" alt=\"Better Blockquote Options\" /></a>Better Blockquote Options\n<p>Citations are inserted into the post with HTML5 markup. The blockquote button retains its default behaviour with highlighted text. I tested the plugin on WordPress 4.4 beta 3 and it works as advertised.</p>\n<p>I did notice however, that the citation displays immediately after the last character in the quote. I&#8217;d prefer to have</p>\n<p>a space between the last character and the citation.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesVisualEditor.png\" rel=\"attachment wp-att-48835\"><img class=\"size-full wp-image-48835\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesVisualEditor.png?resize=593%2C321\" alt=\"Better Blockquotes in the Visual Editor\" /></a>Better Blockquotes in the Visual Editor\n<p>An example of how better blockquotes looks in a post.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesInaPost.png\" rel=\"attachment wp-att-48836\"><img class=\"size-full wp-image-48836\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesInaPost.png?resize=605%2C195\" alt=\"How a Blockquote Looks in a Post\" /></a>How a Better Blockquote Looks in a Post\n<p>Based on feedback, Price says he&#8217;ll attempt to add it to WordPress core as an enhancement. Is better blockquotes something you&#8217;d like to see added to WordPress?</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 05 Nov 2015 00:08:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Matt: Journalistic Accountability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45560\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://ma.tt/2015/11/journalistic-accountability/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:522:\"<p>Tech blog idea: A site that covers the top headlines on <a href=\"http://techmeme.com/\">Techmeme</a> 6, 12, or 18 months after they happened, and explores the delta between what people said was going to happen when they raised funding, or did an acquisition, and what actually happens after time has run its course. We keep covering announcements like they matter. Can also compare analyst and commentator predictions for <a href=\"https://duckduckgo.com/?q=site%3Adaringfireball.net+claim+chowder\">claim chowder</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 15:01:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"WPTavern: How Non-Developers Can Contribute to and Influence WordPress Core Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48823\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"http://wptavern.com/how-non-developers-can-contribute-to-and-influence-wordpress-core-development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1995:\"<p>If you don&#8217;t consider yourself a developer and want to contribute to WordPress core, <a href=\"http://hughlashbrooke.com/2015/11/03/a-non-developers-guide-to-getting-involved-in-wordpress-core-development/\">Hugh Lashbrooke&#8217;s guide</a> offers a few different techniques. The guide explains how and where to provide feedback and how important it is to beta test new features.</p>\n<p>Over the years, I&#8217;ve used WP Tavern to advocate for and against features in WordPress. One of the best pieces of advice I can give non-developers is to organize your thoughts or stance on a specific feature or direction and publish them on your site. This allows you to control the conversation and gives you plenty of space to explain your perspective.</p>\n<p>A great example <a href=\"http://wptavern.com/help-me-add-comment-approval-notifications-to-wordpress\">is this post</a> asking for help to add comment moderation approval notifications to WordPress. I explain why it&#8217;s needed with a <a href=\"https://core.trac.wordpress.org/ticket/33717\">link to the ticket</a> I created to keep track of the conversation. I prefer to write about potential features and based on feedback, I&#8217;ll either create a trac ticket myself or someone will do it for me with a link to the post.</p>\n<p>The Tavern is in the dashboard and is read by a large audience, including core developers. However, thanks to social media, a well constructed post with solid points will make the rounds on Twitter, Facebook, and within WordPress sub-communities.</p>\n<p>It&#8217;s those posts and associated comments that serve as one of many foundations for change in WordPress without touching a line of code. Keep in mind that there&#8217;s no guarantee you&#8217;ll be able to directly influence WordPress core development with words alone, but respectful, in-depth conversations with differing opinions and perspectives are an important part of the community regardless.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 08:42:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"WPTavern: Daniel Bachhuber Raises More Than $17.5K to Develop a RESTful WP-CLI\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48819\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/daniel-bachhuber-raises-more-than-17-5k-to-develop-a-restful-wp-cli\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1664:\"<p><a href=\"https://danielbachhuber.com/\">Daniel Bachhuber</a>, who maintains <a href=\"http://wp-cli.org/\">WP-CLI</a>, has successfully raised more than $21K through his <a href=\"https://www.kickstarter.com/projects/danielbachhuber/a-more-restful-wp-cli\">Kickstarter campaign</a>. He created the campaign to generate funding to develop a CLI interface for the WordPress REST API.</p>\n<p>According to Bachhuber, the project will allow WordPress REST API endpoints registered via plugins and themes to automatically be usable as WP-CLI commands. Developers will also be able to push and pull posts including, custom post types, users, and other WordPress REST API data between separate WordPress installations with a simple WP-CLI command.</p>\n<p>Bachhuber requested $17.5K and within twelve hours of publishing the campaign, he received more than the asking amount from 51 backers, including one who contributed $8,500. Bachhuber will donate one hour of time to the WordPress REST API project in 2016 for every $100 over the funding goal. Based on the current amount, that&#8217;s 46 hours.</p>\n<p>With funding in place, Bachhuber will work on the project throughout the first half of 2016, &#8220;$17,500 represents 150 hours of development at $100/hour, plus Kickstarter&#8217;s cut and costs associated with the rewards. I intend to use this time over the first six months of 2016,&#8221; he said.</p>\n<p>There&#8217;s still 28 days left in the campaign and if it reaches $40K, he pledges to help figure out how the REST API will handle <a href=\"https://github.com/WP-API/WP-API/issues/1055\">password protected posts</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 07:04:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: 93Digital Publishes WordPress Time Machine\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48814\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/93digital-publishes-wordpress-time-machine\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1528:\"<p><a href=\"https://93digital.co.uk/\">93Digital</a>, a London-based WordPress development agency, has published a <a href=\"https://93digital.co.uk/wphistory/\">WordPress time machine</a>. The page features a timeline where visitors can browse every major version of WordPress released since 1.0. Versions are displayed in a horizontal timeline format with fancy animations when hovered over.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/WordPresstimeMachine.png\" rel=\"attachment wp-att-48815\"><img class=\"size-full wp-image-48815\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/WordPresstimeMachine.png?resize=1025%2C554\" alt=\"WordPress Time Machine\" /></a>WordPress Time Machine\n<p>Unfortunately, the animations are more distracting than they are useful and add a small delay when viewing images. The full-size images are not large enough and appear blurry when clicked on. If 93Digital removes the animations and uses larger images, the timeline would be a nice way to visually browse through WordPress&#8217; history.</p>\n<p>If you&#8217;d like to see clear, large images of past WordPress releases and learn about some of the key features in each version, I recommend reading <a href=\"http://www.inmotionhosting.com/support/website/wordpress/wordpress-through-the-ages\">WordPress through the ages</a>. Through the images, you can see the natural progression of features, designs, and layouts WordPress has gone through during the past 10 years.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 03 Nov 2015 18:18:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Matt: Mario and NUX\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45552\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://ma.tt/2015/11/mario-and-nux/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:734:\"<p><span class=\"embed-youtube\"></span></p>\n<p>In this video Shigeru Miyamoto and Takashi Tezuka discuss World 1-1, or the very first level in the very first Super Mario Bros. It&#8217;s fascinating how every element on the level is designed to introduce you to a mechanic of the game, or how Mario moves and jumps. This is interesting if you like Mario, but also important for any developer in any medium who is thinking about the NUX (new user experience) of their product. I sometimes joke that in <a href=\"http://wordpress.org/\">WordPress</a> we put people on the boss monster level the first time they enter the dashboard. There have been improvements but still so much to do to naturally introduce people to our interface.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 02 Nov 2015 15:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Matt: Fixing DST\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45543\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"http://ma.tt/2015/11/fixing-dst/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:230:\"<p>The Atlantic: <a href=\"http://www.theatlantic.com/business/archive/2013/11/daylight-saving-time-is-terrible-heres-a-simple-plan-to-fix-it/281075/\">Daylight Saving Time Is Terrible: Here&#8217;s a Simple Plan to Fix It</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 01 Nov 2015 17:59:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"WPTavern: WordPress 4.4 Streamlines Content Sharing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48797\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wptavern.com/wordpress-4-4-streamlines-content-sharing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4151:\"<p>For the last six years, WordPress has been an <a href=\"https://codex.wordpress.org/Embeds\">oEmbed consumer</a>, adding support for services with nearly every major release since 2.9. In WordPress 4.4, it switches roles and is an oEmbed provider.</p>\n<p>Proposed by Pascal Birchler <a href=\"https://make.wordpress.org/core/2015/09/30/feature-plugin-merge-proposal-oembed/\">earlier this year</a>, oEmbeds for posts streamlines how they&#8217;re shared across the web. Here&#8217;s an example of what an oEmbedded post looks like.</p>\n<p></p>\n<p>Content is displayed in an iFrame with a link to comments, a sharing button, and a link to the main page the article is hosted on. The continue reading link takes visitors to the source site. In the last three months, Birchler and members of the core team have worked hard to make sure embedded content is secure.</p>\n<ul>\n<li>The iFrames use the <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#Attributes\">sandbox attribute</a> to enable extra restrictions on content that can appear in the inline frame.</li>\n<li>The host and the embedded site communicate via postMessage to allow resizing and clicking on links safely</li>\n</ul>\n<p>oEmbed discovery is turned on by default in WordPress 4.4. Too disable it, you&#8217;ll need install and activate the <a href=\"https://wordpress.org/plugins/disable-embeds/\">Disable Embeds</a> plugin. The plugin does the following:</p>\n<ul>\n<li>Prevents others from embedding your site.</li>\n<li>Prevents you from embedding other non-whitelisted sites.</li>\n<li>Disables all JavaScript</li>\n</ul>\n<p>Some people <a href=\"https://make.wordpress.org/core/2015/10/28/new-embeds-feature-in-wordpress-4-4/#comment-28263\">are requesting</a> that an option be added to disable oEmbeds rather than installing a plugin. In response to requests, Aaron Jorbin, WordPress core contributor, reemphasized <a href=\"https://wordpress.org/about/philosophy/#decisions\">WordPress&#8217; philosophy</a> on adding options.</p>\n<blockquote><p>Every time you give a user an option, you are asking them to make a decision. When a user doesn’t care or understand the option this ultimately leads to frustration. As developers we sometimes feel that providing options for everything is a good thing, you can never have too many choices, right?</p>\n<p>Ultimately these choices end up being technical ones, choices that the average end-user has no interest in. It’s our duty as developers to make smart design decisions and avoid putting the weight of technical choices on our end users.</p></blockquote>\n<p>Birchler also responded saying, &#8220;The new embed functionality was developed with the majority of users in mind.&#8221; One of the largest problems with adding to options to WordPress is that they&#8217;re difficult to remove.</p>\n<p>Some WordPress developers are excited to see how post embeds can be extended. <a href=\"http://hughlashbrooke.com/\">Hugh Lashbrooke</a>, who works for Automattic, thinks post embeds will be great for Custom Post Types, &#8220;I think the oEmbed feature has loads of awesome use cases for Custom Post Types. For example, being able to embed eCommerce products on other sites with dynamic add to cart links,&#8221; he said.</p>\n<p>The easiest way to try post embeds is to log into <a href=\"http://wptavern.com/test-new-wordpress-features-without-installing-anything-via-trywpbeta\">TryWPBeta</a> using these credentials.</p>\n<ul>\n<li><strong>Username</strong>: wcpdx</li>\n<li><strong>Password</strong>: wcpdx15</li>\n</ul>\n<p>Create a new post and make sure the visual editor is selected. Copy a URL from one of the Make Core WordPress blog posts and paste it into the editor.</p>\n<p>If you&#8217;d like to learn more about how this feature works, check out <a href=\"https://make.wordpress.org/core/2015/10/28/new-embeds-feature-in-wordpress-4-4/\">Birchler&#8217;s post</a> where he explains what developers need to take note of and how to customize the output. WordPress 4.4 is <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\">scheduled for release</a> in December.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Oct 2015 20:50:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Lifehacker Japan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/10/lifehacker-japan/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:301:\"<p>When I was last in Tokyo <a href=\"http://www.lifehacker.jp/2015/10/151022wordpress_matt.html\">I sat down with Lifehacker Japan and they have a long interview in Japanese and some photos from the trip</a>. I don&#8217;t remember what I said, but the Google Translate version is pretty hilarious.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Oct 2015 20:11:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: WPWeekly Episode 211 – Kyle Maurer Co-founder of Real Big Marketing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48791\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"http://wptavern.com/wpweekly-episode-211-kyle-maurer-co-founder-of-real-big-marketing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2590:\"<p>In this episode, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by Kyle Maurer, Co-founder of <a href=\"http://realbigmarketing.com/\">Real Big Marketing. </a>Maurer grew up in rural Michigan working on farms without much knowledge of the IT industry. He registered an account on meetup.com after discovering a WordPress meetup in his local area.</p>\n<p>During the meetup, Maurer discovered how powerful WordPress is. The knowledge he gained motivated him to dive deep into WordPress and eventually start his own development agency.</p>\n<p>We discuss his most recent project, <a href=\"http://wordcrash.net/\">WordCrash,</a> which allows people in the WordPress community to offer travelers a place to stay for free. We also discuss his involvement with <a href=\"http://wordpress.tv/\">WordPress.TV</a> where Maurer volunteers to moderate videos, contribute code to the site, and coordinate projects. Last but not least, we discuss <a href=\"http://wproundtable.com/\">WP Roundtable</a>, a weekly WordPress podcast hosted by Maurer and a <a href=\"http://wproundtable.com/panel/\">panel of WordPress personalities</a>.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-2/\">WordPress 4.4 Beta 2 Released</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/media-deduper/\">Media DeDuper</a> saves disk space and brings some order to the chaos of your media library by removing and preventing duplicate files.</p>\n<p><a href=\"https://wordpress.org/plugins/feature-request/\">Feature Request</a> is an advanced feature request and suggestion submitter with a built-in voting system for WordPress.</p>\n<p><a href=\"https://wordpress.org/plugins/minimum-dimensions-for-image-field/\">Minimum Dimensions For Image Field</a> allows the user to set size constraints for the Featured Image field.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, November 4th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #211:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Oct 2015 16:50:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Joe McGill Explains How Responsive Images Work in WordPress 4.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48780\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/joe-mcgill-explains-how-responsive-images-work-in-wordpress-4-4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2895:\"<p>One of the key features in WordPress 4.4 is <a href=\"https://make.wordpress.org/core/2015/09/30/responsive-images-merge-proposal/\">responsive images</a>. Joe McGill, who is helping to merge the feature to core, joined me for a thirty minute interview to explain how it works.</p>\n<p>When users upload images in WordPress, it automatically crops new images to smaller sizes. For example, if you upload an image that&#8217;s 1500 x 706, the image sizes might look like this:</p>\n<ul>\n<li>Full Size &#8211; 1500 x 706</li>\n<li>Large &#8211; 500 x 235</li>\n<li>Medium &#8211; 300 x 141</li>\n<li>Thumbnail &#8211; 150 x 150</li>\n</ul>\n<p>Additional sizes are created depending on the theme. If the full size image is attached to a post, users on desktop and mobile devices will see the full size image. However, it doesn&#8217;t make sense to use the full size image on mobile devices because of its display and file size.</p>\n<p>Responsive images in WordPress 4.4 adds <code>srcset</code>&nbsp;and <code>sizes</code> support to WordPress. This allows the software to automatically use and display the right image based on a device&#8217;s screen size. If I attach a full size 1500 x 706 image to a post in WordPress 4.4, mobile devices will see the large or medium-sized image instead.</p>\n<p>Responsive images don&#8217;t have any settings to configure as the magic happens behind the scenes. I encourage you to listen to the interview as it may be easier to understand listening to us talk through the feature.</p>\n<div class=\"audio-shortcode-wrap\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/ResponsiveImagesinWordPress.png?resize=175%2C131\" alt=\"Responsive Images in WordPress\" class=\"landscape thumbnail post-thumbnail audio-image\" /><!--[if lt IE 9]><script>document.createElement(\'audio\');</script><![endif]-->\n<a href=\"http://wptavern.com/wp-content/uploads/2015/10/Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3\">http://wptavern.com/wp-content/uploads/2015/10/Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3</a></div><div class=\"media-shortcode-extend\"><div class=\"media-info audio-info\"><ul class=\"media-meta\"><li><span class=\"prep\">Run Time</span> <span class=\"data\">26:50</span></li><li><span class=\"prep\">Artist</span> <span class=\"data\">Jeff Chandler</span></li><li><span class=\"prep\">File Name</span> <span class=\"data\"><a href=\"http://wptavern.com/wp-content/uploads/2015/10/Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3\">Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3</a></span></li><li><span class=\"prep\">File Size</span> <span class=\"data\">12.09 MB</span></li><li><span class=\"prep\">File Type</span> <span class=\"data\">MP3</span></li><li><span class=\"prep\">Mime Type</span> <span class=\"data\">audio/mpeg</span></li></ul></div><button class=\"media-info-toggle\">Audio Info</button></div>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 29 Oct 2015 00:43:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"WPTavern: The WordPress Theme Directory No Longer Counts Automated Downloads\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48766\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://wptavern.com/the-wordpress-theme-directory-no-longer-counts-automated-downloads\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5745:\"<p>The <a href=\"https://wordpress.org/themes/browse/popular/\">popular themes page</a> on the WordPress theme directory usually displays a mix of default themes and those that meet a certain criteria. While the criteria to reach the page is not publicly known, download counts are one form of measurement.</p>\n<p>Since September, the <a href=\"https://wordpress.org/themes/swift/\">Swift theme</a> has routinely shown up on the popular themes page. According to download stats, Swift was downloaded between, 2,000 to 3,500 times a day in September and early October.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/SwiftThemeDownloadNumbers.png\"><img class=\"size-full wp-image-48767\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/SwiftThemeDownloadNumbers.png?resize=665%2C500\" alt=\"Swift Download Count\" /></a>Swift Download Count\n<p>However, the stats drop off abruptly on October 15th and have yet to reach previous levels. On October 18th, a few members inside the Theme Review Team Slack channel <a href=\"https://wordpress.slack.com/archives/themereview/p1445155458000095\">shared suspicions</a> that something was not right with Swift&#8217;s download stats.</p>\n<p>Ionut Neagu discovered that Swift does not appear on the <a href=\"https://garage.godaddy.com/top-100-wordpress-themes/\">GoDaddy Hot 100</a> while other themes on the popular page do. While not conclusive, the evidence points towards some sort of anomaly.</p>\n<p>Samuel &#8216;Otto&#8217; Wood, who helps maintain WordPress.org <a href=\"https://wordpress.slack.com/archives/themereview/p1445180169000105\">looked at the raw</a> data for Swift and discovered that a lot of the downloads appeared to be automated.</p>\n<blockquote><p>The swift theme is indeed getting an exceptional number of downloads, so I took a closer look at the raw data. It appears that a lot of these downloads are automated in some way. However, there&#8217;s no evidence that it is malicious, nor does the pattern apply only to the swift theme. Perhaps it is included in some installer system that auto-downloads themes for newly installed sites. It&#8217;s hard to say.</p>\n<p>In any case, I made a way to detect and block these types of automated downloads from appearing in the stats, and retroactively applied it for the last three days of data (which is all we retain). Going forward, automated downloads will not appear as downloads and will not affect the popular listings.</p></blockquote>\n<p>Once the changes were implemented, Swift&#8217;s download stats significantly decreased. The changes also apply to all other themes hosted on the directory. Otto declined to comment on the specific changes made but tells the Tavern, &#8220;If we can detect a case where downloads aren&#8217;t being made by users, then we will try not to count it in the results.&#8221;</p>\n<h2>Swift’s Side of the Story</h2>\n<p>Satish Gandham, founder of <a href=\"https://swiftthemes.com/\">Swiftthemes</a>, explains what Swift has gone through the last few weeks which may account for the high download numbers, &#8220;Swift was featured for a couple of days and we spent money on Facebook ads to promote the free version. Also, there were a couple of hosted WordPress providers who asked permission to include Swift on their platform.</p>\n<p>&#8220;The premium version of Swift also had the same slug URL as the free version. The WordPress theme directory saw v7.2.48 to be higher than 7.2.6 and premium users downgraded to the free version thinking it was an upgrade. It was a support nightmare,&#8221; Gandham tells the Tavern.</p>\n<p>Swift&#8217;s <a href=\"https://swiftthemes.com/forums/topic/how-to-returning-to-version-7-2-6/\">support forums</a> confirm that some customers of the commercial version were automatically updated to the free version in early August.</p>\n<h2>Download Counts are Almost Irrelevant</h2>\n<p>When the <a href=\"http://wptavern.com/wordpress-plugin-directory-launches-new-design\">plugin directory was redesigned</a> earlier this year, download counts were removed in favor of active installs. Active installs are more accurate and difficult to manipulate. On the other hand, when the <a href=\"http://wptavern.com/wordpress-theme-directory-launches-new-design\">theme directory was redesigned</a>, download counts remained.</p>\n<p>It&#8217;s possible that the theme directory will one day show active installs but the data gathering aspect is not ready yet. Also, the numbers are lower for themes than for plugins, which may lead to incorrect conclusions in regards to relative popularity.</p>\n<h2>It Happens More Than You Might Think</h2>\n<p>In this particular instance, there&#8217;s no evidence that points to a malicious intent to inflate stats to manipulate the popular themes page. In the years I&#8217;ve written about WordPress, I&#8217;ve heard rumors that certain plugins and themes automate their download counts to appear more popular than they really are. However, I&#8217;ve yet to write about a theme or plugin caught in the act.</p>\n<p>According to Otto, it happens more often than you might think. When he or other volunteer moderators for the plugin and theme directories notice fishy download counts, they contact the author and the process usually stops. If it continues, the author risks having their themes and plugins suspended or banned from the directory.</p>\n<p>If you notice suspicious activity with a theme hosted on WordPress.org, you can voice your concern in the <a href=\"https://make.wordpress.org/chat/\">Theme Review Slack</a> channel during non-meeting times. For suspicious activity related to plugins hosted on the directory, email <strong>plugins at WordPress.org</strong>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 28 Oct 2015 20:23:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Post Status: Using WordPress as an application framework — Draft podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=14800\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://poststatus.com/using-wordpress-as-an-application-framework-draft-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2324:\"<p>Welcome to the Post Status Draft podcast, which you can find <a href=\"https://itunes.apple.com/us/podcast/post-status-draft-wordpress/id976403008\">on iTunes</a> and <a href=\"http://simplecast.fm/podcasts/1061/rss\">via RSS</a> for your favorite podcatcher. Brian and his co-host, <a href=\"https://twitter.com/joe_hoyle\">Joe Hoyle</a>, a co-founder and the CTO of <a href=\"https://hmn.md/\">Human Made</a>, discuss some of today’s hottest, current WordPress news.</p>\n<p>In this episode of Draft, Joe and Brian discuss a popular site’s redesign, and how the developers viewed WordPress’s shortcomings. They also talk about WordPress’s chops generally for complex sites and applications.</p>\n<p><!--[if lt IE 9]><script>document.createElement(\'audio\');</script><![endif]-->\n<a href=\"https://audio.simplecast.fm/19270.mp3\">https://audio.simplecast.fm/19270.mp3</a><br />\n<a href=\"https://audio.simplecast.fm/19270.mp3\">Direct Download</a></p>\n<p><strong>Topics:</strong></p>\n<h3>An outside look at WordPress</h3>\n<ul>\n<li><a href=\"https://poststatus.com/notes/wordpress-shortcomings-from-developers-that-prefer-other-software/\">WordPress shortcomings, from developers that prefer other software</a></li>\n<li><a href=\"http://responsivewebdesign.com/toast/backend/\">Redesigning The Toast</a></li>\n<li><a href=\"http://upstatement.com/timber/\">Timber, Twig templating for WordPress</a></li>\n<li><a href=\"http://blog.apps.chicagotribune.com/2011/10/19/turning-wordpress-into-a-framework-with-mtv/\">WordPress MTV</a></li>\n<li><a href=\"http://www.advancedcustomfields.com/\">Advanced Custom Fields </a></li>\n<li><a href=\"http://cmb2.io/\">CMB2</a></li>\n</ul>\n<h3>WordPress as an application framework</h3>\n<ul>\n<li><a href=\"https://pippinsplugins.com/series/building-a-database-abstraction-layer/\">Building a database abstraction layer</a></li>\n<li><a href=\"https://nomadbase.io/\">Nomad Base</a></li>\n<li><a href=\"https://github.com/10up/ElasticPress\">ElasticPress, by 10up</a></li>\n<li><a href=\"https://github.com/alleyinteractive/searchpress\">SearchPress, by Alley</a></li>\n<li><a href=\"https://developer.wordpress.com/docs/elasticsearch/\">Elasticsearch on WordPress.com</a></li>\n<li><a href=\"https://vip.wordpress.com/2015/07/08/scaling-wp-queries-with-elasticsearch/\">Scaling WP queries with Elasticsearch</a></li>\n</ul>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 28 Oct 2015 04:05:24 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Katie Richards\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"WPTavern: ManageWP Launches Orion Dashboard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48756\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://wptavern.com/managewp-launches-orion-dashboard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2334:\"<p>If you use <a href=\"https://managewp.com/\">ManageWP</a>, you may have noticed a new dashboard design. That&#8217;s because the <a href=\"https://managewp.com/developer-diary-9-managewp-orion-is-out\">company released Orion</a>, a completely redesigned dashboard for managing sites.</p>\n<p>To give users a chance to alter workflows and explore the Orion dashboard, ManageWP linked the original dashboard to Orion. Actions performed in one dashboard are mirrored to the other. Users can switch between the two with the click of a button.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/ManageWPOrianOldNew.gif\"><img class=\"size-full wp-image-48757\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/ManageWPOrianOldNew.gif?resize=638%2C512\" alt=\"ManageWP Dashboard Compared to Orion\" /></a>ManageWP Dashboard Compared to Orion\n<p>Users can now sort sites by tags and clients in addition to groups. Websites can be assigned to clients while tags can describe whether a site is in development or live. Each site can up to five tags and one client.</p>\n<p>Unlike the native dashboard, Orion uses Angular.js which allows users to run asynchronous calls. For example, you can run more than one command why performing other tasks.</p>\n<p>One distinct difference between both dashboards is the way backups are generated. ManageWP backups and Orion backups are <a href=\"https://managewp.com/managewp-orion-developer-diary-3-bulletproof-backup-solution\">completely different</a> from each other. However, you can use both at the same time.</p>\n<p>The company says Orion comes with essential features but additional features will be completed and added by February of 2016 which is also when Orion will become the default dashboard. WordPress Multisite is not supported as the company cites it as a major undertaking and doesn&#8217;t consider it a high priority.</p>\n<p>The new dashboard contains more features than what&#8217;s listed here. I encourage you to read the <a href=\"https://managewp.com/developer-diary-9-managewp-orion-is-out\">official announcement</a> and if you&#8217;re a customer, to explore Orion as it will soon be the default experience to managing sites. If you&#8217;re a ManageWP customer, let us know what you think of the new dashboard design.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Oct 2015 18:09:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WPTavern: How to Prepare and Take Advantage of Language Packs for Plugins Hosted on WordPress.org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48727\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"http://wptavern.com/how-to-prepare-and-take-advantage-of-language-packs-for-plugins-hosted-on-wordpress-org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:15607:\"<hr />\n<p>This is a guest post contributed by <a href=\"https://mpswp.wordpress.com/\">Matthew Sparrow</a> who is a young, self-taught developer with minimal coding knowledge that loves to use WordPress. He mostly uses WordPress for personal projects although he has completed a couple of projects for others. In addition to <a href=\"https://profiles.wordpress.org/kidsguide/\">maintaining a few plugins</a>, he&#8217;s an active translations contributor.</p>\n<hr />\n<p>Automatic translations for plugins have been a long time coming. WordPress itself already auto-downloads and auto-updates core translations, so it is a natural progression that plugins and themes will receive the same treatment.</p>\n<p>For those who have been following auto plugin translations, it has <a href=\"http://ottopress.com/2013/language-packs-101-prepwork/\">been in the works for years</a>. It came as a welcome surprise in September when it was announced that plugins will <a href=\"https://make.wordpress.org/plugins/2015/09/01/plugin-translations-on-wordpress-org/\">finally be able to have language packs</a>.</p>\n<p>If you have a plugin in the WordPress.org directory, then this is important, welcome, and exciting news. However, as great as an initiative as language packs are for plugins, it <em>seems</em> simpler than it actually is.</p>\n<p>If you are a plugin developer, you have to go through a few steps in order to get this to work for your plugins. So let’s get started.</p>\n<h2 class=\"font-headlines\">Should You Be Excited About Plugin Language Packs?</h2>\n<p>As a plugin author, I&#8217;m really excited about the new translation system, and so should you. The <a href=\"https://make.wordpress.org/polyglots/\">Polyglots team</a> is making it so that you no longer have to include all of your <code>.mo</code> and <code>.po</code> files directly in your plugin. Instead, they will be hosted on WordPress.org.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-1.png\"><img class=\"aligncenter size-full wp-image-48731\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-1.png?resize=582%2C575\" alt=\"screenshot-1\" /></a>The ideal scenario is when a user selects their language (either through a new WordPress install or through <code>Settings &gt; General</code>), the language pack for your plugin will be automatically installed and kept updated.</p>\n<p>This new system accomplishes a few things:</p>\n<ul>\n<li>Plugin files are smaller. There&#8217;s no need to include translation files with your plugin.</li>\n<li>Plugin authors no longer need to manage translations/translators.</li>\n<li>End users are automatically able to see a plugin in their own language assuming a translation has already been created for their locale.</li>\n</ul>\n<h2 class=\"font-headlines\">How to Prepare for Plugin Language Packs</h2>\n<p>Before we jump into translating plugins, you first need to prepare your plugin for it to work with the new translation setup.</p>\n<p>In order for you to get your plugin prepared to be moved over to the new system, you need to change your text domain to exactly match your WordPress plugin slug. An important reminder is that even if you have changed your plugin&#8217;s name (as <a href=\"https://wordpress.org/plugins/wordpress-seo/\">Yoast SEO</a> recently did), the slug does not change. For a more in-depth discussion and tutorial, please follow Otto&#8217;s great post on <a href=\"http://ottopress.com/2013/language-packs-101-prepwork/\">language pack prepwork</a>.</p>\n<p>You are still welcome to include translation files in your plugin, even with language packs enabled. Translation files in your plugin take priority, and if those aren&#8217;t present, that&#8217;s where language packs come in.</p>\n<p>When you are preparing your plugin for language packs, it is important to note that you should avoid removing translation files from your plugin. If you do so, and your plugin is selected for language packs, your existing translations will not be automatically moved over to the new system.</p>\n<p>Do your best to keep your translation files with your plugin until the Polyglots team has informed you that your plugin is ready for language packs.</p>\n<h2 class=\"font-headlines\">Wait to Receive the Official Notice</h2>\n<p>The Polyglot team is preparing the plugins in stages to avoid any major hiccups. Assuming your WordPress.org email is up-to-date, you will receive an email when your plugin is ready.</p>\n<p>You may be wondering how long it takes before the team reaches your plugin. There are 40,000+ plugins on WordPress.org, so it is not a quick process. WordPress is preparing plugins in batches according to the amount of active installs each plugin has.</p>\n<p>If your plugin has over 30,000+ active installs, then chances are you are on the new system, although I&#8217;ve seen plugins with 10,000+ active installs also be approved.</p>\n<p>Unfortunately, there is no way to make the process quicker. Please practice patience and eventually your turn will come.</p>\n<h2 class=\"font-headlines\">You’ve Received the E-Mail That Your Plugin Is Ready</h2>\n<p>So you finally receive the email saying that your plugin is going to be uploaded with language pack support. Awesome! This is what the email that I received looks like. Note that I&#8217;m using one of my approved plugins as an example.</p>\n<blockquote><p>Howdy!<br />\n​<br />\nWe&#8217;re emailing you because you&#8217;re an author for the following plugin on WordPress.org:<br />\n​<br />\n* Easy Updates Manager : https://wordpress.org/plugins/stops-core-theme-and-plugin-updates/<br />\n​<br />\nNext week, we intend to import the plugin listed above into the translate.wordpress.org translation system. Language packs will also be enabled for your plugin, for any locales that are fully translated (at 100%).<br />\n​<br />\nAs part of this process, all of the strings in your plugin will be imported into translate.wordpress.org. Additionally, any language files that you ship with your plugin (&#8216;mo&#8217; files) will be imported and synced with their respective locales within translate.wordpress.org.<br />\n​<br />\nNo strings in your plugin? Plugin translations include the ability to translate the readme and display these translations in the localized WordPress.org plugin directories.</p>\n<p>If you have prepared your plugin already then this notice is of no real importance. If you have not yet prepared your plugin and you have received the notice then you need to prepare your plugin ASAP. If you don’t prepare your plugin then… well… I don’t really know, but it won’t be good. So go and prepare your plugin if you have not yet done so.<br />\n&#8230;</p></blockquote>\n<h2 class=\"font-headlines\">Your Plugin Is Semi-Ready for Language Packs. Now What?</h2>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-22.png\"><img class=\"alignright wp-image-48741 size-full\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-22.png?resize=291%2C321\" alt=\"screenshot-22\" /></a>A week or so after you receive the notice, your plugin and its translations are moved to <a href=\"https://translate.wordpress.org\">translate.wordpress.org</a>. You will likely not receive a notice when your plugin is moved.</p>\n<p>To find out if it&#8217;s been uploaded, visit your plugin&#8217;s WordPress.org page where you should see a translations section in the right sidebar. Click the <strong>Translate Plugin Name </strong>button<strong>.</strong> If you are brought to a page that looks like the one below then your plugin is uploaded and is ready to be translated.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-3.png\"><img class=\"aligncenter size-full wp-image-48734\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-3.png?resize=954%2C611\" alt=\"screenshot-3\" /></a>If you see a page that looks different from this (i.e., a Not Found error), your plugin is not yet ready.</p>\n<p>Assuming you&#8217;ve received the e-mail, your plugin is ready, and you&#8217;ve waited a reasonable amount of time, you should be good to go as far as preparing your plugin.</p>\n<p>If it has been over two weeks and your plugin has not yet been uploaded, you should contact the Polyglot team <a href=\"https://make.wordpress.org/polyglots/\">on their blog</a>, or in the <a href=\"https://make.wordpress.org/chat/\">#polyglots channel on WordPress Slack</a>. Please exercise extreme patience as the process can take a week or sometimes even two.</p>\n<h2 class=\"font-headlines\">Removing Your Translation Files From Your Plugin</h2>\n<p>Now that your plugin is uploaded to the system, you can safely remove the translation files from your plugin. If you don’t have any <code>.mo</code> and <code>.po</code> files in your plugin, then you can skip this step.</p>\n<p>One thing to note: You may not want to remove your translation files if your plugin does not have any translations on <a href=\"https://translate.wordpress.org/\">translate.wordpress.org</a> or translations are not 100% complete.</p>\n<h2 class=\"font-headlines\">Making Your Plugin Translatable</h2>\n<p>With all of that stuff out-of-the-way, it’s time to focus on translating your plugin. This is where it can get confusing but try to stick with me.</p>\n<p>By default, you cannot submit translations for your plugin in any language. Because of this, you need to ask the Polyglots team to add you as a translator for your plugin. You can do so by heading over to the <a href=\"https://make.wordpress.org/polyglots/\">Polyglots blog</a> and ask them. To make it easier they came up with a template of <a href=\"https://make.wordpress.org/polyglots/handbook/rosetta/theme-plugin-directories/#sample-post\">what to say</a>.</p>\n<blockquote><p>Hello Polyglots!</p>\n<p>I am the plugin author for [plugin-name and link to plugin directory]. We have a number of great translation editors that we’d like to be able to approve translation for our plugin(s). Please add the following WordPress.org users as translation editors for their respective locales:<br />\no #ar – @username<br />\no #bn – @username, @username<br />\no #da – @username<br />\no #de-ch – @username<br />\netc…</p>\n<p>If you have any questions, just comment here. Thank you!</p></blockquote>\n<p>Ideally, the above will include requests for multiple plugins, but as plugins are being rolled out slowly, it&#8217;s acceptable at the moment to include one request per plugin.</p>\n<p>Make sure that you use WordPress.org usernames and that the user is still active. If you are wondering what languages there are, you can visit <a href=\"https://translate.wordpress.org/\">https://translate.wordpress.org/</a> and scroll through the different languages that WordPress supports.</p>\n<p>Please only ask to be added as a translator for the languages you know. You will not be approved if you are not a native speaker for a language.</p>\n<p>At this point, again, patience is needed. The Polyglot team will receive your request and will work through it. If your post doesn&#8217;t show up right away, it&#8217;s because first-time posters are moderated.</p>\n<p>In a week or two, the translators you requested should be added to your plugin. If there are any issues, a Polyglot member will comment on your request with any difficulties encountered or notify you that they have approved your request.</p>\n<p>You&#8217;ll know when you are added when you see new badges appear on your WordPress.org profile page. One is a translation editor badge and the other is a translation contributor badge.</p>\n<h2><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-4.png\"><img class=\"aligncenter size-full wp-image-48735\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-4.png?resize=601%2C322\" alt=\"screenshot-4\" /></a>How Do I Translate?</h2>\n<p>First, visit <a href=\"https://translate.wordpress.org/\">https://translate.wordpress.org/</a>, select your language, then click the plugins tab. Search for your plugin and then click the translate project button. You&#8217;ll be brought to a page that looks like the one below. This page is where you can translate your plugin. In this case, my plugin is already translated in the language that I selected.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-5.png\"><img class=\"aligncenter size-full wp-image-48736\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-5.png?resize=957%2C587\" alt=\"screenshot-5\" /></a>On this table, there are four separate things to translate. Trunk, the stable release (version), and the <code>readme.txt</code> variations. In order for language packs to work, <em>you need to translate all four versions</em>.</p>\n<p>To translate, click on one of the sub-projects. This takes you to the translation page. Here, you can see all of the different strings that need to be translated in your plugin. You can edit a string by clicking the details button, translating it in the text editor, and then clicking the <strong>add translations</strong> button.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-6.png\"><img class=\"aligncenter size-full wp-image-48737\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-6.png?resize=947%2C561\" alt=\"screenshot-6\" /></a>Even if you&#8217;re not added as an editor for a language, you can still translate a plugin. The only difference is instead of adding the translations directly, you can only request that it be changed. Someone from the Polyglots team will need review and approve your translation suggestions.</p>\n<h2 class=\"font-headlines\">Once Your Translations Are Ready</h2>\n<p>Once you&#8217;ve finished translating a language completely, it will be available for people to use. However, it doesn’t become available immediately. It can take one to three days for a translation to be available once you finish it. Again, exercise patience.</p>\n<p>You&#8217;ll know when the translation is available when you see it in the translation section on your WordPress.org plugin&#8217;s page. For example, you can see what it looks like in the picture below.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-7.png\"><img class=\"aligncenter size-full wp-image-48744\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-7.png?resize=447%2C377\" alt=\"screenshot-7\" /></a>Also, you&#8217;ll know it&#8217;s working if you go into a website (preferably not a live website), download your plugin, and select the language that you want to test in <strong>Settings &gt; General</strong>.</p>\n<h2 class=\"font-headlines\">Plugin Language Packs Are Here to Stay</h2>\n<p>Getting language packs to work properly in WordPress plugins is not exactly a straightforward process, which is precisely why plugins are being rolled out slowly.</p>\n<p>Please remember that everyone is a volunteer, from the Polyglots team, to translators, and to the plugin authors. Please give props where appropriate as everyone is working hard to make plugin language packs the norm.</p>\n<p>If you are having any trouble, the Polyglots team also has a <a href=\"https://make.wordpress.org/polyglots/handbook/\">handbook</a> available which provides some good information on how this new system works.</p>\n<p>I&#8217;ll also do my best to answer any questions in the comment section. If you have additional insight, please weigh in as well.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Oct 2015 02:52:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: Test New WordPress Features Without Installing Anything via TryWPBeta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48713\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wptavern.com/test-new-wordpress-features-without-installing-anything-via-trywpbeta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3568:\"<p>Over the weekend at <a href=\"https://portland.wordcamp.org/2015/\">WordCamp Portland, Oregon</a>, Drew Jaynes, a WordPress core developer who also led the 4.2 development cycle presented on the topic of beta testing WordPress.</p>\n<p>In the presentation, Jaynes highlights the pros and cons of using the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Testing plugin</a> on a testing site and a production site. However, he also cites a third way to test WordPress via <a href=\"http://wcpdx.trywpbeta.com/\">TryWPBeta.com</a>.</p>\n<p> \n<div> <strong> <a href=\"https://www.slideshare.net/DrewAPicture/trying-out-tomorrows-wordpress-today\" title=\"Trying Out Tomorrow’s WordPress Today\" target=\"_blank\">Trying Out Tomorrow’s WordPress Today</a> </strong> from <strong><a href=\"http://www.slideshare.net/DrewAPicture\" target=\"_blank\">DrewAPicture</a></strong> </div>\n<p>TryWPBeta is a locked down, vanilla install of WordPress trunk using Multisite. To login to the site, use the following credentials.</p>\n<ul>\n<li><strong>Username</strong>: wcpdx</li>\n<li><strong>Password</strong>: wcpdx15</li>\n</ul>\n<p>I asked Jaynes what inspired him to create the site, &#8220;The inspiration for TryWPBeta is to actually have a place for core contributors to test patches on mobile devices, because setting up a tunnel to a local development setup is difficult and a high barrier for a lot of people.&#8221;</p>\n<p>The idea is to make it possible to spin up a site using trunk (Bleeding edge version of WordPress), apply a specific patch and then freeze it in time so that we can point people there to test on mobile devices,&#8221; Jaynes told the Tavern.</p>\n<p>While you can&#8217;t install themes and plugins yet, the site gives users an opportunity to test new features without worrying about breaking the site. Thanks to TryWPBeta, I was able to test the new <a href=\"https://core.trac.wordpress.org/changeset/34903\">Post oEmbed feature</a> in 4.4.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/TestingPostoEmbeds.png\"><img class=\"size-full wp-image-48714\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/TestingPostoEmbeds.png?resize=1025%2C458\" alt=\"Testing oEmbeds of Posts\" /></a>Testing oEmbeds of Posts\n<p>Jaynes started the project at 10up&#8217;s company summit. So far, Scott Reilly, John Blackbourn, Zach Brown, Morgan Estes, and Chris Weigman have contributed to the project. The site is hosted on a DigitalOcean droplet and updates hourly. He stresses that the site is a work in progress and not quite ready for prime time, &#8220;There’s a couple features I’d like to add to make it more robust first,&#8221; Jaynes said.</p>\n<p>Unlike <a href=\"https://demo.joomla.org/\">Joomla</a>, WordPress doesn&#8217;t have a dedicated demo site for users to test drive the software. While I like the idea behind TryWPBeta, there are a few things I&#8217;d like to see added to make it more useful. For instance, a list of items to test that users can check off. Also, an easy way to provide feedback on the listed items that is sent to a place where core developers will read it.</p>\n<p>Ultimately, I&#8217;d like to see the WordPress Beta Testing plugin extended to have the features I mentioned above. Between the communication challenges and setting up the environment, the beta testing process in WordPress is not as easy and streamlined as it could be. What ideas do you have that would help increase the testing audience and make the process easier?</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Oct 2015 00:37:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"WPTavern: VersionPress Raises $400K in Seed Funding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48709\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://wptavern.com/versionpress-raises-400k-in-seed-funding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2780:\"<p><a href=\"http://versionpress.net/\">VersionPress</a>, a version control plugin for WordPress, has <a href=\"http://blog.versionpress.net/2015/10/seed-funding/\">raised $400K in seed funding</a> from five investors, led by <a href=\"http://www.credoventures.com/\">Credo Ventures</a> based in Prague. In July of 2014, VersionPress conducted a <a href=\"http://wptavern.com/versionpress-misses-crowdfunding-goal-by-14-5k\">crowdfunding campaign</a> to raise $30K. However, the team raised only <strong>45% of the $30,000</strong> funding goal.</p>\n<p>The team pressed on and released the first version back in January. Since then, the team has relied on funding from the <a href=\"http://versionpress.net/\">Early Access Program</a>. Borek Bernard, the lead developer of VersionPress, says the influx of cash will help fuel rapid development:</p>\n<blockquote><p>First and foremost, it means that we will be able to develop VersionPress at a more rapid pace. What we currently have in the <a href=\"http://blog.versionpress.net/2015/10/versionpress-2-0-released/\">recently released v2.0</a> is a great start but the vision and the technical challenge are just so large that this new fuel will is more than welcome. We have many cool features planned and this will allow us to deliver them in a timely manner.</p></blockquote>\n<p>The funding comes on the heels of <a href=\"http://blog.versionpress.net/2015/10/versionpress-2-0-released/\">VersionPress 2.0</a> which includes, database synchronization functionality and an updated user interface that is completely JavaScript based, along with a number of other features. In addition to funding, Bernard says talking to investors gives him a fresh perspective on the project:</p>\n<blockquote><p>One big benefit of talking to investors is that it provides a fresh perspective on the problems one is trying to solve, how to solve them, for whom, etc. Speaking to them made us realize a couple of important things which will greatly benefit our users down the road.</p></blockquote>\n<p>VersionPress joins a growing list of WordPress products and services that have raised venture capital. In 2014, <a title=\"http://wordpress.org/plugins/coschedule-by-todaymade/\" href=\"http://wordpress.org/plugins/coschedule-by-todaymade/\">CoSchedule</a>, the editorial workflow and activity scheduling plugin, <a title=\"http://coschedule.com/blog/coschedule-series-a-funding/\" href=\"http://coschedule.com/blog/coschedule-series-a-funding/\">secured $500K</a> in a Series A round of funding. Prior to being acquired by Automattic, <a href=\"http://wptavern.com/wordpress-service-provider-bruteprotect-secures-funding-forms-parka-llc\">BruteProtect secured a round of funding</a> from a private angel investor in California.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 26 Oct 2015 20:00:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Matt: .Ly Domains\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45516\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"http://ma.tt/2015/10/ly-domains/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:154:\"<p>Priceonomics on <a href=\"http://priceonomics.com/the-rise-and-fall-of-ly/\">The Rise and Fall of .Ly</a>. Some of my favorite domains I own are .ly.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 26 Oct 2015 19:04:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"WPTavern: Nikhil Vimal Acquires Front End Registration and Login Forms Plugin From Pippin Williamson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48695\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"http://wptavern.com/nikhil-vimal-acquires-front-end-registration-and-login-forms-plugin-from-pippin-williamson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2679:\"<p>Nikhil Vimal, who runs <a href=\"https://techvoltz.com/\">Techvoltz.com</a>, a WordPress development agency, <a href=\"https://techvoltz.com/blog/2015/10/23/new-plugin-front-end-registration-and-login-forms-plugin/\">is the new owner</a> of the <a href=\"https://techvoltz.com/downloads/front-end-registration-login-forms-plugin/\">Front End Registration and Login Forms Plugin</a> created by Pippin Williamson. Earlier this month, Williamson put the plugin up for sale and noted that it needed some development work.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\">I would like to sell my Frontend Registration and Login Forms plugin. <a href=\"https://t.co/HLGc8OVxq4\">https://t.co/HLGc8OVxq4</a> &#8211; It needs some work. Interested? Ping me</p>\n<p>&mdash; Pippinsplugins (@pippinsplugins) <a href=\"https://twitter.com/pippinsplugins/status/651489362052431872\">October 6, 2015</a></p></blockquote>\n<p></p>\n<p>The plugin was created in December of 2011, when Williamson <a href=\"https://pippinsplugins.com/creating-custom-front-end-registration-and-login-forms/\">published a tutorial</a> that explains how to create custom front end registration and login forms for WordPress. Although Vimal is participating in the commercial plugin space by selling a <a href=\"https://ninjaforms.com/extensions/slack/\">Slack add-on for Ninja Forms</a>, this acquisition marks the first plugin sold directly from his site.</p>\n<p>With the acquisition, <a href=\"https://pippinsplugins.com/nikhil-vimal-adopts-front-end-registration-and-login-forms-plugin/\">Williamson notes</a> that existing customers will no longer be able to renew license keys on <a href=\"https://pippinsplugins.com\">Pippinsplugins.com</a>. A complete customer list was given to Vimal and Williamson is no long providing support.</p>\n<p>When the opportunity presented itself to adopt a plugin created by Williamson, Vimal jumped on it, &#8220;Shortly after I saw his tweet, I quickly contacted Pippin. His work is something I’ve always looked up to. His work on plugins has inspired me to pursue the plugin/product market,&#8221; Vimal said.</p>\n<p>Licenses start at $10 for single sites, $20 for two to five sites, and $35 for an unlimited number of sites. Vimal says that he is working on a new version with changes in design, functionality, and more. The plugin will also receive its own dedicated site with a change in branding.</p>\n<p>It will be interesting to see what changes Vimal has in store for the plugin. Until then, existing customers from Pippinsplugins.com should watch their inbox for details on renewing their subscription to TechVoltz.com.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 23 Oct 2015 20:02:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WPTavern: WordPress 4.4 Beta 1 Released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48687\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://wptavern.com/wordpress-4-4-beta-1-released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4051:\"<p>After more than eight weeks in development, <a href=\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-1/\">WordPress 4.4. beta 1 is available</a> for testing. With over <a href=\"https://github.com/WordPress/WordPress/compare/4.3-branch...master\">1,600 commits</a> since WordPress 4.3&#8217;s release, it&#8217;s important that 4.4 be tested by as many people as possible.</p>\n<p>Commits are bug fixes, additional functions or filters, new features, corrected typos, and anything inbetween. As a rule of thumb, think of commits as an incremental improvement to WordPress core.</p>\n<p>There are three new distinct user facing features in WordPress 4.4.</p>\n<ul>\n<li><strong>Twenty Sixteen</strong> &#8211; Twenty Sixteen is a <a href=\"http://wptavern.com/first-look-at-the-twenty-sixteen-default-wordpress-theme\">new default theme</a> with a simple layout and color scheme designed by <a href=\"https://profiles.wordpress.org/iamtakashi\">Takashi Irie,</a> who also designed the <a href=\"http://takashiirie.com/2013/12/13/twenty-fourteen-wordpress-3-8-parker/\">Twenty Fourteen</a> and <a href=\"http://takashiirie.com/2015/03/19/twenty-fifteen-the-wordpress-default-theme-for-2015/\">Twenty Fifteen</a> default themes.</li>\n<li><strong>Responsive Images</strong> &#8211; WordPress will automatically deliver a <a href=\"https://make.wordpress.org/core/2015/09/30/responsive-images-merge-proposal/\">more appropriate image</a> to users depending on a variety of conditions like screen size, view port size, and screen resolution.</li>\n<li><strong>oEmbed Posts</strong> &#8211; In addition to YouTube, WordCamp.TV and other whitelisted providers, users will be able to easily embed content from almost any site that supports the <a href=\"http://oembed.com/\">oEmbed standard</a>, including <a href=\"https://make.wordpress.org/core/2015/09/30/feature-plugin-merge-proposal-oembed/\">WordPress sites</a>.</li>\n</ul>\n<p>Scott Taylor, who is leading the 4.4 development cycle, gives developers at least four reasons to be excited.</p>\n<ul>\n<li><strong>REST API (phase 1) </strong>— The underlying infrastructure of the WordPress REST API <a href=\"https://wordpress.org/plugins/rest-api/\">plugin</a> is <a href=\"https://make.wordpress.org/core/2015/09/21/wp-rest-api-merge-proposal/\">included in WordPress 4.4</a>. Plugin authors can take advantage of this by adding custom endpoints.</li>\n<li><strong>Term Metadata </strong>— Taxonomy term metadata <a href=\"https://make.wordpress.org/core/2015/09/04/taxonomy-term-metadata-proposal/\">is included</a> in WordPress 4.4. Developers who are using a plugin to implement term metadata should <a href=\"https://make.wordpress.org/core/2015/09/22/preparing-your-plugins-and-your-client-sites-for-termmeta/\">read this post</a> on how to prepare for the switch. Also, the underlying <a href=\"https://make.wordpress.org/core/2015/09/22/preparing-your-plugins-and-your-client-sites-for-termmeta/\">WP_Term class</a> improves caching when working with terms.</li>\n<li><strong>Improved <code>&lt;title&gt;</code> output</strong> — <code>wp_title()</code> is deprecated; WordPress will <a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">handle the rendering</a> of the document title automatically.</li>\n<li><strong>Comments </strong>— Comment queries are now split for performance. Also, the underlying <code>WP_Comment</code> class improves caching and introduces strong-typing. (<a href=\"https://core.trac.wordpress.org/ticket/8071\">#8071</a>, <a href=\"https://core.trac.wordpress.org/ticket/32619\">#32619</a>)</li>\n</ul>\n<p>Users are highly encouraged to test WordPress 4.4 and report bugs to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta section</a> of the support forums. Remember, the beta is software still in development and therefor not recommend for use on a production site. WordPress 4.4 <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\">is scheduled</a> for release on December 8th.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 23 Oct 2015 18:57:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WPTavern: WPWeekly Episode 210 – Great Scott!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48680\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wptavern.com/wpweekly-episode-210-great-scott\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2994:\"<p>In this time travel inspired episode of WordPress Weekly, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I catch you up on the news of the week. I start the show by sharing my experience attending the first WordCamp Hampton Roads in Virginia Beach, VA. While in Virginia Beach, I visited and worked from the <a href=\"http://www.rocketgenius.com/\">Rocketgenius</a> office and observed how the team behind Gravity Forms works on a daily basis. In the show, I explain why I think the company&#8217;s setup is the best of both worlds for distributed workers.</p>\n<p>We discuss what the future of WordPress may be like 10 years from now and whether or not it&#8217;s time for the XML-RPC protocol to be removed from WordPress. We end the show with the plugin picks of the week.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"http://wptavern.com/anyssa-ferreira-awarded-the-kim-parsell-memorial-scholarship\">Anyssa Ferreira Awarded the Kim Parsell Memorial Scholarship</a><br />\n<a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">WP_Title is deprecated in WordPress 4.4</a><br />\n<a href=\"http://torquemag.io/what-will-wordpress-be-like-in-next-10-years/\">What Will WordPress Be Like In Next 10 Years?</a> Here’s an <a href=\"http://torquemag.io/what-will-wordpress-be-like-in-next-10-years/#comment-2299329174\">awesome comment</a> on the article.<br />\n<a href=\"http://wptavern.com/its-time-for-xml-rpc-in-wordpress-to-hit-the-road\">It’s Time for XML-RPC in WordPress to Hit the Road</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/woo-price-per-word/\">WooCommerce Price Per Word</a> allows customers to upload a document to the product page. The word-count of the document is used to calculate the price based on the price-per-word entered for the product.</p>\n<p><a href=\"https://wordpress.org/plugins/shortcode-tester/\">Shortcode Tester</a> is a post editor tool for WordPress developers that displays the HTML generated by WordPress shortcodes in a popup window. You can quickly view the generated HTML without having to view the entire post.</p>\n<p><a href=\"https://wordpress.org/plugins/beehive/\">Beehive cells</a> arranges the content on your front page into a series of hexagonal cells similar to a beehive.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, October 28th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #210:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Oct 2015 09:06:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"WPTavern: WordPress 4.4 to Deprecate the wp_title Function\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48669\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wptavern.com/wordpress-4-4-to-deprecate-the-wp_title-function\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1711:\"<p>A year after <a href=\"https://make.wordpress.org/core/2014/10/29/title-tags-in-4-1/\">WordPress 4.1 introduced</a> a new way to display titles in themes, WordPress 4.4 <a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">will deprecate</a> <code>wp_title()</code>. With <a href=\"https://core.trac.wordpress.org/changeset/35294\">the change</a>, plugin authors will be able to check for theme support and use a few new filters to manipulate the title. The new filters are as follows:</p>\n<ul>\n<li><code>\'pre_get_document_title\'</code> short-circuits <code>wp_get_document_title()</code> if it returns anything other than an empty value.</li>\n<li><code>\'document_title_separator\'</code> filters the separator between title parts.</li>\n<li><code>\'document_title_parts\'</code> filters the parts that make up the document title, passed in an associative array.</li>\n</ul>\n<p>Theme authors should no longer use <code>wp_title()</code> to generate document titles. If theme authors add <code>add_theme_support( ‘title-tag’ );</code> to the <code>after_setup_theme</code> callback, the title will be handled natively via an internal WordPress core function. If you use a theme that utilizes wp_title and have <a href=\"https://codex.wordpress.org/WP_DEBUG\">wp_debug enabled</a> in WordPress 4.4, you&#8217;ll see a deprecation notice.</p>\n<p>In general, users who upgrade to WordPress 4.4 won&#8217;t notice a difference. However, with nearly a <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\">month to go</a> before WordPress 4.4 is released, theme developers are highly encouraged to check and update their themes accordingly.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Oct 2015 07:52:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Anyssa Ferreira Awarded the Kim Parsell Memorial Scholarship\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48662\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wptavern.com/anyssa-ferreira-awarded-the-kim-parsell-memorial-scholarship\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2542:\"<p>Back in August, the WordPress Foundation <a href=\"http://wptavern.com/the-wordpress-foundation-begins-accepting-applications-for-the-kim-parsell-memorial-scholarship\">began accepting applications</a> for the <a href=\"http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell\">Kim Parsell Memorial Scholarship</a>. The scholarship not only serves as a memorial, but gives one woman in the WordPress community an opportunity to attend WordCamp US with financial assistance from the foundation.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/AnyssaFerreira.jpg\"><img class=\"wp-image-48664 size-full\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/AnyssaFerreira.jpg?resize=256%2C256\" alt=\"AnyssaFerreira\" /></a>Anyssa FerreiraThe WordCamp US website <a href=\"https://2015.us.wordcamp.org/2015/10/14/announcing-the-kim-parsell-memorial-scholarship-winner-anyssa-ferreira/\">announced</a> Anyssa Ferreira, a Brazilian designer, feminist, and WordPress community activist as the first recipient of the scholarship. Ferreira organized and spoke at WordCamp São Paulo in 2014 and designed the event&#8217;s website. She was the only woman to speak and volunteer at the event.</p>\n<p>In 2015, Ferreira spoke at WordCamp Belo Horizonte&nbsp;on women working with WordPress in the Brazilian community. According to the post, Ferreira continues to play an active role encouraging women to get involved with WordPress and the technology field in Brazil:</p>\n<blockquote><p>She has worked to debunk the myth that women have no interest in WordPress and web development. She has explored why women were not participating, speaking personally with many female programmers, designers and other WordPress professionals about this important topic. She regularly invites women to attend her local WordPress meetup, and works to ensure that they feel welcome and wanted when they do attend.</p></blockquote>\n<p>Not only does Ferreira fulfill the <a href=\"http://wptavern.com/the-wordpress-foundation-begins-accepting-applications-for-the-kim-parsell-memorial-scholarship\">scholarship&#8217;s requirements</a>, she&#8217;s the type of woman Kim Parsell would love to meet and talk to in person.</p>\n<p>Thanks again to Jen Mylo, the WordPress foundation, and Matt Mullenweg for not only creating the scholarship, but for providing an opportunity for people like Ferreira to experience the largest annual WordPress conference first-hand.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Oct 2015 23:00:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"WPTavern: It’s Time for XML-RPC in WordPress to Hit the Road\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48643\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wptavern.com/its-time-for-xml-rpc-in-wordpress-to-hit-the-road\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8672:\"<hr />\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/JesseNicklesAvatar.jpg\"><img class=\"alignright wp-image-48651 size-thumbnail\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/JesseNicklesAvatar.jpg?resize=150%2C150\" alt=\"Jesse Nickles Founder of Little Bizzy\" /></a>This post was contributed by <a href=\"https://www.linkedin.com/pub/jesse-nickles/61/807/435\" target=\"_blank\">Jesse Nickles</a>. He is the founder of <a href=\"https://www.littlebizzy.com\" target=\"_blank\">LittleBizzy</a>, a managed WordPress hosting company, and a part-time blogger at <a href=\"https://collegetimes.co/\" target=\"_blank\">CollegeTimes</a>, where he gets into trouble exploring controversial issues.</p>\n<hr />\n<p>Two weeks ago, I <a href=\"https://www.littlebizzy.com/blog/disable-xml-rpc\">announced</a> that all current and future domains hosted at <a href=\"https://www.littlebizzy.com\" target=\"_blank\">LittleBizzy</a> would have <a href=\"https://codex.wordpress.org/XML-RPC_Support\" target=\"_blank\">XML-RPC</a> permanently blocked due to the non-stop problems it was causing. In the announcement, we recommended that other WordPress users across the globe urgently consider blocking the technology on their own web servers as well.</p>\n<h2>XML-RPC in WordPress Has a Troubled Past</h2>\n<p>Days after the announcement<em>,</em> Daniel Cid, founder and CTO of Sucuri, and Mark Maunder, CEO of WordFence, <a href=\"https://blog.sucuri.net/2015/10/brute-force-amplification-attacks-against-wordpress-xmlrpc.html\" target=\"_blank\">confirmed</a> the <a href=\"https://www.wordfence.com/blog/2015/10/wordpress-xml-rpc-brute-force-attacks-amplification-multiple-logins/\" target=\"_blank\">reports</a> that a new type of Brute Force login attack was being carried out on a massive scale against WordPress sites around the world using XML-RPC. Apparently, hackers have wised up to the fact that <code>wp-login.php</code> is often well protected.</p>\n<p>Perhaps more shocking than this latest wave of attacks is that <em>they are nothing new,</em> as Sucuri previously <a href=\"https://blog.sucuri.net/2014/07/new-brute-force-attacks-exploiting-xmlrpc-in-wordpress.html\">reported a similar wave of attacks</a> in July 2014. Let&#8217;s also not forget the wide-scale use of XML-RPC to perform <a href=\"http://www.webopedia.com/TERM/D/DDoS_attack.html\">DDoS attacks</a> on WordPress websites <a href=\"https://www.incapsula.com/blog/wordpress-security-alert-pingback-ddos.html\">reported by Incapsula</a> in 2013. Combine these reports with <a href=\"https://www.google.com/search?hl=en&q=site%3Awordpress.org%2Fsupport%2F+xml-rpc+attack\">hundreds of posts</a> on the wordpress.org support forums and <a href=\"https://www.google.com/search?hl=en&q=site%3Astackoverflow.com+xml-rpc+attack\">Stack Overflow</a> and a picture is painted of years of unhindered attacks against millions of WordPress sites due to this single PHP file, yikes!</p>\n<blockquote><p>It is common sense to take a method and try it. If it fails, admit it frankly and try another. But above all, try something. ― Franklin D. Roosevelt</p></blockquote>\n<p>I didn&#8217;t expect to be the one to advocate that XML-RPC be removed from WordPress but that&#8217;s exactly what I&#8217;m doing: <strong>It&#8217;s time for WordPress XML-RPC to hit the road, for good.</strong></p>\n<h2>XML-RPC Was a Conscious Mistake</h2>\n<p>I understand that thousands of volunteer hours have been invested into XML-RPC support for the WordPress platform, as is the nature of open-source communities. I sincerely respect and thank said programmers and volunteers for creating a very cool way to remotely connect to a website built on WordPress. But sometimes, we need to be honest with ourselves and admit when something isn&#8217;t working; <em>This one of those times.</em></p>\n<p>If you&#8217;re wondering why I&#8217;m framing the XML-RPC mess as a conscious mistake, <strong>that&#8217;s because it was</strong>. Three years ago, Andrew Nacin, a WordPress core developer, <a href=\"https://core.trac.wordpress.org/ticket/21509\" target=\"_blank\">announced</a> in a trac ticket that, <em>&#8220;Security is no greater a concern than the rest of core. There is no longer a compelling reason to disable [XML-RPC] by default. It’s time we should remove the option entirely.&#8221;</em></p>\n<p>Three years later, millions of WordPress sites have been hacked, crashed, or attacked, due to XML-RPC. It’s undeniable that removing the option to disable it (and/or enabling it by default) was wrong.</p>\n<h2>Out of Touch With the Average User</h2>\n<p>When broken down, it&#8217;s a classic case of extremely talented and intelligent software developers being out of touch with the millions of <strong>average Joes</strong> that use WordPress and have no idea what XML-RPC is. When developers inevitably argue that there are several free security plugins available that can help combat XML-RPC attacks, they completely miss the point: <u>the majority of webmasters being attacked are the same ones who don&#8217;t even know what a security plugin is or how to use it</u>.</p>\n<p>Ironically, the one good <a href=\"https://wordpress.org/plugins/bruteprotect/\" target=\"_blank\">standalone plugin</a> that fought Brute Force login attempts was <a href=\"http://wptavern.com/automattic-acquires-parka-llc-the-creators-of-bruteprotect\" target=\"_blank\">foolishly</a> <a href=\"http://wptavern.com/jetpack-protect-blocks-brute-force-amplification-attacks\" target=\"_blank\">combined</a> into the controversial Jetpack plugin, which most serious webmasters would never consider installing.</p>\n<p>The premise, of course, for XML-RPC support in WordPress is a noble idea that sounds versatile: it allows, as previously mentioned, remote connections (logins, usually) to any given domain that is running a WordPress installation. In reality, however, this XML-RPC functionality is primarily used for three common reasons:</p>\n<ol>\n<li>Pingbacks/trackbacks (great for Viagra spam, <a href=\"http://wptavern.com/wptavern-was-trackbacked-to-death\" target=\"_blank\">DDoS attacks</a>, and not much else)</li>\n<li>Jetpack (an all-in-one solution to <a href=\"http://blog.arunas.co/project-measure-jetpack/\" target=\"_blank\">slowing down</a> and/or bloating your WordPress site with third-party scripts)</li>\n<li>WP mobile apps (I&#8217;m not sure who blogs from their smart phone, but the <a href=\"https://itunes.apple.com/us/app/yo./id834335592\" target=\"_blank\">YO app</a> is literally rated higher than <a href=\"https://itunes.apple.com/en/app/wordpress/id335703880\" target=\"_blank\">WordPress</a> on the iTunes store, and the user reviews of the <a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\" target=\"_blank\">Android</a> version repeatedly point to XML-RPC login issues)</li>\n</ol>\n<p>Do recall that the WordPress backend is now responsive, which means you can login to your blog from practically any mobile device; this wasn’t the case when the native WordPress mobile apps were first launched. And arguably, the vast majority of WordPress sites have absolutely no use for pingbacks, trackbacks, or XML-RPC in general.</p>\n<h2>XML-RPC Needs to Be Disabled or Removed From WordPress</h2>\n<p><u>The logical conclusion should be immediately clear:</u> XML-RPC needs to die a quick death in the WordPress community, or at least be shifted into an optional (non-default) plugin or otherwise, in order to bring an immediate and measurable improvement to the security and stability of not only WordPress sites, but the internet overall.</p>\n<p>Perhaps Jeff Chandler <a href=\"http://wptavern.com/how-to-prevent-wordpress-from-participating-in-pingback-denial-of-service-attacks\" target=\"_blank\">said it best</a>:</p>\n<blockquote><p>WP Tavern is no stranger to denial of service attacks due to pingbacks and trackbacks. In 2010, I explained how WP Tavern was trackbacked to death. Shortly after the website came back online, I disabled both as I feared they might end up taking the site down again. A few years have gone by and I’ve re-enabled pingbacks and trackbacks with no ill effects. However, I wonder if it’s time to kill them once and for all, not just on WP Tavern but in WordPress in general.</p></blockquote>\n<p>Sometimes, we as developers and others with a technical mindset get caught up in solving the challenge of the day, when what is really needed is to step back and take a more philosophical look at the bigger picture. Is this thing worth our time, or is it causing more problems than solutions? When it comes to XML-RPC in WordPress, the conclusion is obvious.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Oct 2015 21:33:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Post Status: Playing with type\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=14750\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://poststatus.com/playing-with-type/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8443:\"<p>I am far from a typography expert, but I do love playing with type. I delight in a great reading experience, and I strongly believe typography is the key to creating a great reading experience.</p>\n<p>In my own journeys searching for and choosing typefaces for my projects, I&#8217;ve discovered some great tools, and also some pitfalls of using different delivery services.</p>\n<p>I have <a href=\"http://typography.com\">Typography.com</a> and <a href=\"http://typekit.com\">Typekit</a> accounts, and of course using <a href=\"http://google.com/fonts\">Google Fonts</a> is very simple. Many folks also use <a href=\"http://www.myfonts.com/\">Myfonts</a>, generate their own on <a href=\"http://www.fontsquirrel.com/\">Fontsquirrel</a>, self-host direct from foundries, or use a variety of other methods.</p>\n<p>When you use a font delivery service, where the font is hosted elsewhere, and you simply connect (like Typekit or Typography.com), one of the things you deal with is the authentication of your site with the service that can often cause sad delays in pageload times. Zach Tollman did a great post discussing how <a href=\"https://www.tollmanz.com/typography-coms-cssom-blocking-font-loader/\">Typography.com in particular is not good at handling this authentication</a>, from a performance perspective.</p>\n<p>Given that I host Post Status fonts on Typography.com &#8212; I use Gotham Round, Gotham Condensed, and Sentinel here, and none of them are available anywhere else &#8212; the hit on performance perturbs me. However, I love these fonts and hate to replace them. However, I&#8217;ve lately been doing some research so I can at least test font stacks from Typekit and Google to see how big of an impact it could have.</p>\n<h3>Finding Typefaces</h3>\n<p>Finding quality typefaces is a challenge. There are <em>so many</em> out there, and the differences in quality can be vast. Part of what I love about Typography.com is that the quality of the display and cross-browser rendering is outstanding. Typekit serves typefaces from a variety of foundries, but they too have built great tools over the years to try and ensure quality rendering. Google is more of a mixed bag, though open source typefaces are getting more attention to detail in recent years than ever before.</p>\n<p>By far, my favorite tool for browsing and finding typefaces is <a href=\"https://www.typewolf.com\">Typewolf</a>. Typewolf has PDF guides (free with your email), trending typefaces, sites of the day, and high quality recommendations on when and where to use a particular typeface. A sample resource that&#8217;s outstanding is their list of the <a href=\"https://www.typewolf.com/open-source-web-fonts\">top 30 open source Google fonts</a>. They have many others like that. It&#8217;s definitely a must-visit site when you are considering changing up your site typography.</p>\n<p>You can also browse delivery services directly. Typekit&#8217;s <a href=\"https://typekit.com/lists\">lists</a> are pretty good for narrowing typefaces by their intended purpose. <a href=\"http://justmytype.co/\">Justmytype</a> is another great resource that shows recommended pairings for fonts from Typekit and Typography.com. And of course Google has filters in their directory to help narrow it down, but it&#8217;s still a bit of the wild west, so I usually rely on Googling good pairings for Google.</p>\n<h3>Tinkering with typefaces with real content</h3>\n<p>Once you find some Typefaces you like, then it&#8217;s fun to put them into practice. <a href=\"http://typecast.com/\">Typecast</a> is excellent. You can find fonts from many foundries with a free account, and do all sorts of manipulations to see the typefaces in action, using a variety of font combinations, before you move to your actual site.</p>\n<p><img class=\"aligncenter size-large wp-image-14749\" src=\"https://cdn.poststatus.com/wp-content/uploads/2015/10/typecast-view-752x462.png\" alt=\"typecast-view\" width=\"752\" height=\"462\" /></p>\n<p>Beware, it&#8217;s easy to spend hours in this tool. I love that you can edit the CSS directly, and there are also tools within Typecast to insert particular types of content, so you can have a working prototype pretty quickly.</p>\n<h3>Performance implications</h3>\n<p>Loading fonts is a huge performance issue sometimes. Too many fonts, content blocking loading, time-outs from third party delivery services, and other gotchas can severely impact a site&#8217;s load times.</p>\n<p>Anytime you are looking at new typefaces to use, consider where you can serve them from, whether you can self host them, how the delivery authenticates, and potentially more &#8212; before you get your heart set.</p>\n<p>Some good rules of thumb are this:</p>\n<ul>\n<li>Google is by far the fastest, but you just don&#8217;t have access to some of the greatest font foundries this way, because all Google fonts are free.</li>\n<li>Self hosting is probably similar to or faster than serving them from Google. Most Google fonts are locally cached on lots of folks computers. Self hosting may be better for a more rare font, but for common fonts, Google may actually be faster.</li>\n<li>System fonts are always the fastest, but you might not be able to deliver your preferred typeface if the system the reader is using doesn&#8217;t support the typeface. If using system typefaces, creating thorough font stacks is a necessity. Sometimes, especially for sans-serifs, I&#8217;m tempted to just declare sans-serif, so that the system serves its favorite font &#8212; as Android, Mac, iOS, Windows, et al each have their own defaults. For serifs, I&#8217;d say just use Georgia if using system fonts only <img src=\"https://cdn.poststatus.com/wp-includes/images/smilies/simple-smile.png\" alt=\":)\" class=\"wp-smiley\" /></li>\n<li>Typekit and Myfonts and other delivery services are usually similar in quality, but it&#8217;s one of the slowest options for delivery. Be sure to only use the weights and versions you need, and considering limiting character sets if you can get away with it.</li>\n<li>Have a performance budget for your type. Sometimes you have to make hard choices. Does your body font really need to be a non-system font? What if you just used a single display font to add the character you seek? Can you get away without italics for a certain typeface you&#8217;re using? What about bold? If you use the regular/bold/italic/bold-italic for every typeface, that adds up quickly. Use the bare minimum and add whenever you need to only.</li>\n</ul>\n<h3>Don&#8217;t get too fancy, and consider your tone</h3>\n<p>My biggest mistakes over the years playing with type have been getting too fancy, especially with body copy. Simple is good with type. Especially when choosing body copy, be sure to learn about the typeface you like &#8212; and don&#8217;t just trust your own eye early on &#8212; to see if it&#8217;s an appropriate workhorse typeface.</p>\n<p>With display type, you have more leeway, but consider the mood that the typeface sets. Slabs, serifs, gothic, humanist, and other styles of type each tend to have their own tone that they set. For instance, when you read the New York Times, Georgia is a serious workhorse font, and the custom display font also sets a sober tone. Compared to Vox, for example, which uses a more casual sans-serif body copy and quite decorative display typeface. In both scenarios, readability is very good, but they set a different tone.</p>\n<h3>Learning typography takes time</h3>\n<p>Learning and understanding good typography practices takes time. Many factors are at play to make a typeface look great, and even the greatest typefaces can get screwed up when not used well.</p>\n<p>Learning best practices for things like line length, line height, pairing, and much much more can probably get you farther than what typeface you choose. And different typefaces obviously do better in different settings. The key is to take it slow, learn what you like when you are reading other websites, and see what they are doing that you are not. Also, ask your friends about your choices and get feedback; sometimes just a minor change can make a big difference, and suddenly your design clicks.</p>\n<p>We can easily be blind to our own typography mistakes. If you can limit mistakes and learn the essentials of choosing typefaces and using them well, your websites will look much, much better and your readers will be thankful, even if they never say it.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Oct 2015 17:23:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"Post Status: Work life balance — Draft podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=14740\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://poststatus.com/work-life-balance-draft-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1393:\"<p>Welcome to the Post Status Draft podcast, which you can find <a href=\"https://itunes.apple.com/us/podcast/post-status-draft-wordpress/id976403008\">on iTunes</a> and <a href=\"http://simplecast.fm/podcasts/1061/rss\">via RSS</a> for your favorite podcatcher. Brian and his co-host, <a href=\"https://twitter.com/joe_hoyle\">Joe Hoyle</a>, a co-founder and the CTO of <a href=\"https://hmn.md/\">Human Made</a>, discuss some of today’s hottest, current WordPress news.</p>\n<p>In this episode of Draft, Joe and Brian discuss work life balance. We discuss working long hours, managing and preventing burnout, moonlighting and its challenges, side projects, embracing hobbies, and creating exercise routines.</p>\n<a href=\"https://audio.simplecast.fm/18534.mp3\">https://audio.simplecast.fm/18534.mp3</a>\n<p><a href=\"http://audio.simplecast.fm/18534.mp3\">Direct Download</a></p>\n<p>Links</p>\n<ul>\n<li><a href=\"http://www.carriedils.com/overcoming-burnout/\">Overcoming burnout</a></li>\n<li><a href=\"http://dangerousminds.net/comments/photographer_removes_smartphones_from_images_to_show_how_obsessed_we_are_wi\">People without phones in phone poses</a></li>\n<li><a href=\"http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html\">Epic procrastination series</a></li>\n<li><a href=\"http://andyadams.org/why-you-shouldnt-moonlight/\">Don&#8217;t moonlight long-term</a></li>\n</ul>\n<p>&nbsp;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Oct 2015 13:24:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Katie Richards\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"WPTavern: Akismet 3.1.5 Fixes Critical XSS Security Vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48619\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wptavern.com/akismet-3-1-5-fixes-critical-xss-security-vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1629:\"<p>If you use <a href=\"https://wordpress.org/plugins/akismet/\">Akismet</a> to battle comment spam, make sure it&#8217;s running version 3.1.5 as it patches a critical security vulnerability. Due to the nature of the bug, the Akismet team pushed out auto updates to sites that can accept them. According <a href=\"https://blog.sucuri.net/2015/10/security-advisory-stored-xss-in-akismet-wordpress-plugin.html\">to Sucuri</a>, sites using Akismet 3.1.4 and lower and that have the <strong><em>Convert emoticons like <img class=\"wp-smiley\" src=\"https://blog.sucuri.net/wp-includes/images/smilies/simple-smile.png\" alt=\":-)\" /> and <img src=\"http://s.w.org/images/core/emoji/72x72/1f61b.png\" alt=\"','no'),(5481,'_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1447279208','no'),(5482,'_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1447236008','no'),(5487,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1447279209','no'),(5488,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2015/11/wordpress-4-4-beta-3/\'>WordPress 4.4 Beta 3</a> <span class=\"rss-date\">November 4, 2015</span><div class=\"rssSummary\">WordPress 4.4 Beta 3 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. To get the beta, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download the beta here (zip). For more of what’s new in version 4.4, check out [&hellip;]</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://wptavern.com/buddypress-2-3-5-patches-privilege-escalation-issue\'>WPTavern: BuddyPress 2.3.5 Patches Privilege Escalation Issue</a></li><li><a class=\'rsswidget\' href=\'http://ma.tt/2015/11/arthur-c-clarke-on-distributed-work/\'>Matt: Arthur C. Clarke on Distributed Work</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/more-than-250-tickets-still-available-for-wordcamp-us\'>WPTavern: More Than 250 Tickets Still Available for WordCamp US</a></li></ul></div><div class=\"rss-widget\"><ul><li class=\'dashboard-news-plugin\'><span>Popular Plugin:</span> <a href=\'https://wordpress.org/plugins/updraftplus/\' class=\'dashboard-news-plugin-link\'>UpdraftPlus Backup and Restoration</a>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=updraftplus&amp;_wpnonce=36d99d5573&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'UpdraftPlus Backup and Restoration\'>Install</a>)</span></li></ul></div>','no'),(5493,'_transient_timeout_dash_20494a3d90a6669585674ed0eb8dcd8f','1447283175','no'),(5494,'_transient_dash_20494a3d90a6669585674ed0eb8dcd8f','<p><strong>RSS Error</strong>: A feed could not be found at http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=10&output=rss&partner=wordpress&q=link:http://moped.i.sics.se/wordpress/. A feed with an invalid mime type may fall victim to this error, or SimplePie was unable to auto-discover it.. Use force_feed() if you are certain this URL is a real feed.</p>','no'),(5496,'_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c','1447283177','no'),(5497,'_transient_feed_867bd5c64f85878d03a060509cd2f92c','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"WPTavern: BuddyPress 2.3.5 Patches Privilege Escalation Issue\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48918\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"http://wptavern.com/buddypress-2-3-5-patches-privilege-escalation-issue\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:994:\"<p>BuddyPress 2.3.5 <a href=\"https://buddypress.org/2015/11/buddypress-2-3-5/\">is available</a> and patches a security vulnerability that may allow privilege escalation for logged-in users. BuddyPress 2.3.4 and previous versions are affected however, versions 2.0.4, 2.1.2, and 2.2.4 include the patch.</p>\n<p>According to the BuddyPress development team, there is no evidence that the bug has been exploited in the wild. If your WordPress site supports automatic updates to point releases, it will likely be updated by the time you read this post.</p>\n<p><a href=\"https://profiles.wordpress.org/slaFFik\">Slava Abakumov</a> discovered the vulnerability and <a href=\"https://make.wordpress.org/core/handbook/reporting-security-vulnerabilities/\">responsibly disclosed</a> it to the development team. If you run into any issues with the update, you&#8217;re encouraged to post on the BuddyPress <a href=\"https://buddypress.org/support/\">support forums</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Nov 2015 07:42:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"Matt: Arthur C. Clarke on Distributed Work\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45546\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://ma.tt/2015/11/arthur-c-clarke-on-distributed-work/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1737:\"<p><span class=\"embed-youtube\"></span></p>\n<p>I saw the new Steve Jobs movie a few days ago, which I enjoyed as a movie even though <a href=\"http://daringfireball.net/linked/2015/10/22/mossberg-steve-jobs\">the main elements were fiction and it should have been titled something else</a>.</p>\n<p>But they had an awesome video interview with <a href=\"https://en.wikipedia.org/wiki/Arthur_C._Clarke\">the amazing Arthur C. Clarke</a> in 1974, which I&#8217;ve embedded above, where he said the following right around 0:56.</p>\n<blockquote><p>Interviewer: I wonder though, what sort of a life will it be in social terms if our whole life is built around the computer, if we become a computer-dependent society, computer-dependent individuals.</p>\n<p>ACC: In some ways, but they&#8217;ll also enrich our society because it&#8217;ll make it possible for us to live anywhere we like. Any businessman, any executive could live almost anywhere on earth and still do his business through a device like this, and this is a wonderful thing, it means we won&#8217;t have to be stuck in cities, we can live out in the country or wherever we please, and still carry on complete interaction with human beings, as well as with other computers.</p></blockquote>\n<p>Wow, extremely prescient. Remember, this was 1974! The dominant technology companies of today still follow the same office-centric model as when computers took up entire rooms, but the dominant companies of tomorrow will be built and grow in a completely distributed fashion. (And of course, <a href=\"https://automattic.com/work-with-us/\">we&#8217;re hiring</a>.)</p>\n<p>See also, from 2012: <a href=\"http://ma.tt/2012/09/future-of-work/\">Automattic, Forbes, and the Future of Work</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 22:00:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"WPTavern: More Than 250 Tickets Still Available for WordCamp US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48902\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://wptavern.com/more-than-250-tickets-still-available-for-wordcamp-us\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2861:\"<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/WordCampUSAFeaturedImage.png\" rel=\"attachment wp-att-32754\"><img class=\"size-full wp-image-32754\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2014/10/WordCampUSAFeaturedImage.png?resize=640%2C276\" alt=\"WordCamp USA Featured Image\" /></a>photo credit: <a href=\"https://www.flickr.com/photos/vgrigoriu/363904283/\">vgrigoriu</a> &#8211; <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/\">cc</a>\n<p>In a little less than a month, the first annual <a href=\"https://2015.us.wordcamp.org/\">WordCamp US</a> will be underway in Philadelphia, PA. There&#8217;s still <a href=\"https://2015.us.wordcamp.org/tickets/\">251 tickets available</a> to attend the event in person. The <a href=\"https://2015.us.wordcamp.org/schedule/\">schedule and sessions</a> are published and it looks like an informational packed two-day event.</p>\n<p>There are three tracks available, two of which will have typical length sessions with a third track dedicated to lightning talks. I highly encourage you to <a href=\"https://2015.us.wordcamp.org/schedule/\">view the schedule</a> and create a list of sessions to attend as the first day has over 40 of them.</p>\n<p>Reed Gustow, one of the event&#8217;s primary organizers says they&#8217;re expecting a lot of attendees, &#8220;We&#8217;re expecting 2,000 attendees from across the United States and from many other countries, and it will be a wonderful opportunity to learn, share knowledge and meet others in the amazing WordPress community.&#8221;</p>\n<p>In addition to WordCamp US, there will be a <a href=\"https://2015.us.wordcamp.org/2015/11/09/join-us-for-the-wordcamp-us-contributor-day/\">WordPress contributor day</a> on December 6th. During contributor day, people from all walks of life get together and contribute to various parts of the WordPress project whether it&#8217;s the support forums, core code, documentation, and more. Mentors will be on hand to help new contributors.</p>\n<p>Last but not least, the most important information is where to eat a great tasting cheesesteak. After all, it&#8217;s one of the things <a href=\"http://www.visitphilly.com/itineraries/philadelphia/where-to-find-the-best-cheesesteaks-in-philadelphia/\">Philadelphia is known for</a>. The WordCamp US organizing team has you <a href=\"https://2015.us.wordcamp.org/2015/11/09/the-cheesesteak-post/\">covered with a post</a> that describes the different types of cheesesteaks and where to find the best tasting ones.</p>\n<p><a href=\"https://2015.us.wordcamp.org/location/\">Hotel and venue information</a> for the event is on the WordCamp US website. Unfortunately, I&#8217;m not attending the event this year, but <a href=\"http://wptavern.com/contributors\">Sarah Gooding</a> will be there. If you see her, stop her and say hi.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 05:39:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WPTavern: A Quarter of the Top 10 Million Sites Ranked by Alexa Use WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48885\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/a-quarter-of-the-top-10-million-sites-ranked-by-alexa-use-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4996:\"<p>According to Matthias Gelbmann of <a href=\"http://w3techs.com\">W3Techs</a>, 25% of the <a href=\"http://w3techs.com/blog/entry/wordpress-powers-25-percent-of-all-websites\">sites it surveys</a> are using WordPress. The milestone comes two years after reaching the 20% mark.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/QuarterOfTheWebWP.png\" rel=\"attachment wp-att-48888\"><img class=\"size-full wp-image-48888\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/QuarterOfTheWebWP.png?resize=557%2C398\" alt=\"Quarter of the Web\" /></a>Quarter of the Web\n<p>The following image shows WordPress&#8217; rapid growth from 13.1% in January 2011 to 25% today.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/UsageHistory.png\" rel=\"attachment wp-att-48889\"><img class=\"size-full wp-image-48889\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/UsageHistory.png?resize=900%2C298\" alt=\"WordPress\' Growth\" /></a>WordPress&#8217; Growth\n<p>Drupal and Joomla, two other popular open source content management systems combine for 4.9%, slightly less than 1/5th of WordPress.</p>\n<p>W3Techs counts both self hosted WordPress and WordPress.com sites, &#8220;We only count the hosted sites if they are reachable via their own domain (not only as subdomain of wordpress.com), and they must qualify like all other sites in our surveys by getting enough visitors on that separate domain to make it into the top 10 million Alexa sites,&#8221; Gelbmann says.</p>\n<p>This means that only those sites on WordPress.com that use domain mapping and have enough traffic to be in the top 10 million Alexa sites are counted leaving millions of WordPress.com sites uncounted. Only 1.25% of WordPress sites in the survey are hosted at WordPress.com.</p>\n<h2>The Fastest Growing CMS</h2>\n<p>The survey also shows that WordPress is still the fastest growing CMS, &#8220;Every 74 seconds a site within the top 10 million starts using WordPress. Compare this with Shopify, the second-fastest growing CMS, which is gaining a new site every 22 minutes,&#8221; Gelbmann says.</p>\n<p>When sites are broken down into languages, WordPress is used on 37.3% of English language sites. Portuguese, Spanish, Swedish and Turkish sites are inbetween 38-40% while Bengali is 51.3% and 54.4% for Bosnian. Only 10.6% of WordPress sites are in Chinese with 6.9% for Korean.</p>\n<p>About 94% of sites surveyed use a Unix-like operating system such as Ubuntu. Windows servers host 6.2% of WordPress sites making it the most popular CMS running on Windows servers.</p>\n<p>Matt Mullenweg, Co-founder of the WordPress project, says the <a href=\"http://ma.tt/2015/11/seventy-five-to-go/\">largest opportunity for growth</a> is in the 57% of sites not using <em>any</em> identifiable CMS. Earlier this year, we learned that <a href=\"http://wptavern.com/how-important-is-jetpack-on-wordpress-road-to-50-market-share\">Jetpack is going to play a significant role</a> in WordPress gaining 50% or more of market share.</p>\n<p>In an <a href=\"http://kitchensinkwp.com/podcast-e048-interview-with-matt-mullenweg/\" target=\"_blank\">interview with Adam Silver on the KitchensinkWP podcast</a>, Mullenweg explains the path to 50% and beyond.</p>\n<blockquote><p>The next goal is the majority of websites. We want to get to 50%+ and there’s a lot of work between now and then. As the percentage increases, it gets harder and harder to grow the market share, and we have to grow the market share by doing things we haven’t done in the past – really thinking about the onboarding process, really thinking about the integration with social networks, and with how WordPress works on touch devices, which is going to be the predominant computing platform of the future. These things are going to be really important.</p>\n<p>What got us here isn’t going to get us there. Once we get to 50%, we can decide something new we want to do</p></blockquote>\n<p>Automattic is experimenting with a new side project called <a href=\"https://github.com/automattic/jetpack-onboarding\">Jetpack Onboarding</a>. The project is an attempt to improve WordPress&#8217; new user experience. Hosting companies that choose to implement it can modify, add, or remove steps.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackOnboardingScreen.png\" rel=\"attachment wp-att-48891\"><img class=\"size-full wp-image-48891\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackOnboardingScreen.png?resize=1025%2C469\" alt=\"Jetpack Onboarding Screen\" /></a>Jetpack Onboarding Wizard\n<p>Keep in mind that W3Techs&#8217; market share numbers are based on the top 10 million sites in Alexa. Fifty percent market share is 5 million of those 10 million sites. Are these the sites WordPress should be targeting with development efforts? Are they more important than the millions of sites not ranked by Alexa? I don&#8217;t think so but only time will tell.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 04:34:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Matt: AVC On Tracking\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45572\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://ma.tt/2015/11/avc-on-tracking/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:524:\"<blockquote><p>If you listed the habits of successful people, tracking and measuring would be near the top of that list. I see it with people, companies, and teams that I work with. I see it in my own behavior.</p></blockquote>\n<p>Fred Wilson writes on <a href=\"http://avc.com/2015/11/track-and-measure/\">Tracking and Measuring</a>. Lack of measurement &#8212; picking stats and watching them before and after a launch &#8212; is one of the most common mistakes I see product teams make, certainly inside of Automattic.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 23:29:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Matt: Seventy-Five to Go\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45568\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://ma.tt/2015/11/seventy-five-to-go/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1391:\"<p>People are abuzz because it looks like the <a href=\"http://w3techs.com/\">W3Techs survey</a> of the web <a href=\"http://w3techs.com/technologies/history_overview/content_management/all/y\">now has WordPress at 25% market share</a>.</p>\n<p><a href=\"https://cloudup.com/cys3qUJxyRT\"><img src=\"https://cldup.com/jX4J6C_emK-900x900.png\" alt=\"Screen Shot\" width=\"900\" height=\"298\" /></a></p>\n<p>Sometimes it goes up and down through the course of a month, but it&#8217;s still a pretty fun milestone that we can now say about one in four websites are now powered by the <a href=\"https://wordpress.org/\">scrappy open source underdog</a> with its roots stretching all the way back to a single person in Corsica, France. We should be comfortably past 25% by the end of the year.</p>\n<p>The big opportunity is still the 57% of websites that don&#8217;t use <em>any</em> identifiable CMS yet, and that&#8217;s where I think there is still a ton of growth for us (and I&#8217;m also rooting for all the other open source CMSes).</p>\n<p>If you want to celebrate with us <a href=\"https://2015.us.wordcamp.org/\">come to the first-ever WordCamp US event next month in Philadelphia</a> (tickets still available) &#8212; it&#8217;s shaping up to be an amazing event. We just <a href=\"https://2015.us.wordcamp.org/schedule/\">published the schedule and there are some amazing speakers and sessions</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 13:15:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"WPTavern: How Not to Communicate Grievances with WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48861\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wptavern.com/how-not-to-communicate-grievances-with-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:9778:\"<p>A few days ago, <a href=\"http://wptavern.com/how-non-developers-can-contribute-to-and-influence-wordpress-core-development\">I offered advice</a> on how non-developers can contribute to and influence core WordPress development. Communicating online is hard but where and how you communicate affects the likelihood of making an impact.</p>\n<p><a href=\"https://www.cmscritic.com/\">CMS Critic</a> is a site I&#8217;ve read for years as it routinely publishes articles on a variety of content management systems, including WordPress.</p>\n<p>In late October, Kaya Ismail <a href=\"http://www.cmscritic.com/how-wordpress-needs-to-improve-itself/\">published an article</a> that describes how WordPress needs to improve itself in six ways. What could have been a great article, is instead a great example of <strong>how not to</strong> communicate grievances you have with WordPress.</p>\n<h2>Twenty Sixteen Developers Are Lazy</h2>\n<p>Many people, including myself <a href=\"http://wptavern.com/first-look-at-the-twenty-sixteen-default-wordpress-theme#comments\">have an opinion</a> of the Twenty Sixteen theme in WordPress 4.4. Ismail thinks the developers behind the theme are lazy.</p>\n<blockquote><p>I totally understand that WordPress doesn&#8217;t need to compete with the massive library of third-party themes available out there, but that doesn&#8217;t mean that they should lead with a default theme as bad as that. It&#8217;s nothing short of lazy.</p></blockquote>\n<p>Tammie Lister, Takashi Irie, and others continue to work hard on Twenty Sixteen to prepare it for the WordPress 4.4 release in December. They are far from lazy people making Ismail&#8217;s opinion more of an insult. He doesn&#8217;t provide any examples or ideas on what should be in a default theme.</p>\n<h2>The WordPress Plugin Directory</h2>\n<p>According to Ismail, the WordPress plugin directory is filled with large chunks of trash in addition to great plugins. While some plugins in the directory could be coded better, his explanation falls short of describing a solution.</p>\n<blockquote><p>Many plugins simply don&#8217;t work, while many more are poorly put together, which in turn makes WordPress as a platform harder to use. Quality control needs to improve.</p></blockquote>\n<p>He doesn&#8217;t link to plugins that are broken, provide any code samples, or show where quality control is lacking. His statement is an assumption that&#8217;s not backed by evidence.</p>\n<p>Those who <a href=\"http://wptavern.com/behind-the-scenes-in-the-wordpress-plugin-directory-with-mika-epstein\">oversee the plugin directory</a> don&#8217;t test every submitted plugin to make sure it works with WordPress. Among other things, their job is to make sure plugin submissions don&#8217;t have security issues. If the moderators performed quality control on every plugin, the submission queue would likely have a substantial backlog.</p>\n<p>Instead of writing baseless assumptions, Ismail should monitor the <a href=\"https://make.wordpress.org/plugins/\">Make WordPress Plugins</a> site to stay on top of what&#8217;s going on with the plugin directory and submit feedback where necessary. If a broken plugin is discovered, he should create a forum thread within the plugin&#8217;s support area.</p>\n<p>This way, his feedback is seen by those who directly control the WordPress plugin directory. The simple act of reporting a broken plugin to the developer is a major step towards being part of the solution and not the problem.</p>\n<h2>Admin Menu Clutter</h2>\n<p>I agree with Ismail&#8217;s opinion that the WordPress admin menus can become cluttered if the right plugins are activated. At least in this case, he suggests an alternative.</p>\n<blockquote><p>I&#8217;d like to see WordPress group third-party menu options together, in a way that&#8217;s a little more organized and less intrusive. Perhaps this can be done by giving them a sub-section within the menu which can be collapsed. The solution itself is up to them, but the problem is evident.</p></blockquote>\n<p>There <a href=\"https://codex.wordpress.org/Administration_Menus\">are guidelines</a> for when plugin developers should create top-level or sub-level menu items but they&#8217;re not followed as well as they could be. Without strictly enforcing these guidelines, it&#8217;s out of WordPress&#8217; hands. The complaint is aimed in the wrong direction and should point towards third-party developers, not WordPress itself.</p>\n<p>If you want more control in how items are displayed in the admin menu, I recommend using the <a href=\"https://wordpress.org/plugins/menu-humility/\">Menu Humility</a> plugin by Mark Jaquith.</p>\n<h2>Akismet is Not Enough</h2>\n<p>According to Ismail, comment spam is a major issue with WordPress sites and Akismet doesn&#8217;t do enough to stop it.</p>\n<blockquote><p>Akismet, a spam comment filter, now comes with every WordPress install &#8211; which is a good thing. But the free version doesn&#8217;t do enough for me, as comments still pile up in the back end. If you ask me, WordPress needs to find another way to turn the unrelenting tide of spam.</p></blockquote>\n<p>To clarify, Akismet has been bundled with WordPress since <a href=\"https://wordpress.org/news/2005/12/wp2/\">version 2.0</a> and there&#8217;s no difference between the free and commercial versions in how Akismet protects sites. He doesn&#8217;t provide any suggestions on what WordPress could do to thwart spam but says it has to do something.</p>\n<p>What are members of the WordPress core team supposed to do with this kind of feedback? It&#8217;s not helpful, doesn&#8217;t provide any ideas, and is easy to discard.</p>\n<h2>Updates are Hard</h2>\n<p>Depending on your webhost&#8217;s configuration, updating themes, plugins, and WordPress is as simple as clicking a button. For the more adventurous, you can configure them to happen automatically. For Ismail, the update process is difficult.</p>\n<blockquote><p>Updating a plugin may cause conflicts between it and another plugin. Updating a theme can erase your modifications (unless you use a child theme), whereas updating WordPress itself can render a variety of your plugins redundant until their developers apply a patch. Confused yet? You should be.</p></blockquote>\n<p>He makes a few good points but editing a theme instead of a child theme is like editing WordPress core files which should almost never happen. It&#8217;s true that there is a slight risk of <a href=\"http://wptavern.com/plugin-developers-demand-a-better-security-release-process-after-wordpress-4-2-3-breaks-thousands-of-websites\">things breaking</a> after an update but it&#8217;s more of an anomaly than a common occurrence.</p>\n<p>Ismail suggests that WordPress look into preserving theme changes across the board and to provide alerts if  plugins interfere with each other. I like these suggestions and my hope is that one day, WordPress will be able to create a snapshot during the update process to provide assurance that the site won&#8217;t break after an update is applied.</p>\n<h2>WordPress Hack-a-thon</h2>\n<p>Ismail&#8217;s last point is how WordPress can improve its security.</p>\n<blockquote><p>I think we can all agree that WordPress needs to beef itself up (by shoring up its admin login page, for example), but I call for it to go a step further and start offering better protection, even if it comes at a small price.</p>\n<p>Third party solutions exist, sure. But why should I have to patch together several security plugins, each with their own confusing settings, just to secure my website? Many WordPress users have become accustom to handling their own security in this way; but I think WordPress needs to take on more responsibility.</p></blockquote>\n<p>He wants WordPress to go a step further and offer better protection but doesn&#8217;t say what that protection is. He also doesn&#8217;t explain where, how, or why WordPress should take on more responsibility to make sites more secure.</p>\n<h2>Be Part of the Solution, Not the Problem</h2>\n<p>Ismail concludes his article by saying it&#8217;s time for WordPress to innovate. He also says, &#8220;The onus isn&#8217;t on me to provide the solution, it&#8217;s upon WordPress. And it&#8217;s about time they started coming up with innovative solutions for their long-standing issues.&#8221;</p>\n<p>The article is <a href=\"https://www.cmscritic.com/wordpress-4.4-beta-bare-bones/\">another example</a> of how CMS Critic chooses not to be part of the solution. Everyone is entitled to their opinions, but airing grievances which sound more like demands and telling core developers to start innovating is not a recipe for results.</p>\n<p><a href=\"http://www.smashingmagazine.com/2013/05/contributing-to-wordpress/\">This quote</a> from WordPress core developer, Mark Jaquith, eloquently describes how important communication skills are in an open source project.</p>\n<blockquote><p>The number one skill you need for just about any job, but specifically working on open source, is communication skills. You need to have clarity, consistency, compassion, relatability, a little bit of a thick skin and a decent sense of humor.</p></blockquote>\n<p>The onus may not be on Ismail or any of us to come up with solutions, but he and others can help discover and be part of solutions by taking an active role in giving constructive feedback in <a href=\"http://hughlashbrooke.com/2015/11/03/a-non-developers-guide-to-getting-involved-in-wordpress-core-development/\">the right place</a>. WordPress has its fair share of issues but there are <a href=\"http://www.smashingmagazine.com/2013/05/contributing-to-wordpress/\">plenty of opportunities</a> for people to step up and contribute to make the software better.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 18:52:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"WPTavern: Jetpack 3.8 Adds Google+ Badges and Fixes Contact Form Response Emails\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48853\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wptavern.com/jetpack-3-8-adds-google-badges-and-fixes-contact-form-response-emails\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3200:\"<p>Jetpack 3.8 is <a href=\"http://jetpack.me/2015/11/04/jetpack-3-8-google-badges-and-more/\">available for download</a> and includes, Google+ badges, Twitch.TV embed shortcode, improvements to the contact form module, and bug fixes.</p>\n<p>Users can now display a Google+ Badge widget that shows your Google+ profile, page, or community.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/GooglePlusBadgeSettings.png\" rel=\"attachment wp-att-48854\"><img class=\"size-full wp-image-48854\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/GooglePlusBadgeSettings.png?resize=443%2C493\" alt=\"Google Plus Badge Settings\" /></a>Google Plus Badge Settings\n<p>You can configure the badge&#8217;s width, layout, and choose between a light or dark color scheme. A Google+ icon has also been added to the Social Media Icons widget bringing the total number of available icons to nine.</p>\n<p>Those who use the Shortcode Embeds module can now easily embed videos from <a href=\"http://www.twitch.tv/\">Twitch.tv</a> using the <a href=\"https://en.support.wordpress.com/videos/twitch-tv-shortcode/\">[ twitchtv ] shortcode</a>. The shortcode&#8217;s attributes allow you to modify the width, height, and whether or not the video autoplays.</p>\n<p>In previous versions of Jetpack, the Contact Form module checkbox field type was limited to a single item. In Jetpack 3.8, check box field types can have multiple items.</p>\n<a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackContactFormMultipleFields.png\" rel=\"attachment wp-att-48855\"><img class=\"size-full wp-image-48855\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/11/JetpackContactFormMultipleFields.png?resize=746%2C713\" alt=\"Multiple Options Field\" /></a>Multiple Options Field\n<p>One of my favorite enhancements in Jetpack 3.8 is the improved styling to contact form email responses. In previous versions of Jetpack, emails <a href=\"https://github.com/Automattic/jetpack/issues/49\">didn&#8217;t match the order of the fields</a> within the contact form. Now, any responses to the contact form will show up in the order you set.</p>\n<p>Other notable improvements in Jetpack 3.8 include:</p>\n<ul>\n<li>Lots of new filters to allow further customization of Jetpack.</li>\n<li>Better error messaging for Subscription Widget sign up forms.</li>\n<li>Improvements and enhancements to accessibility.</li>\n</ul>\n<p>In addition to features and bug fixes, this release contains contributions from Daisuke Takahashi and Eduardo Reveles. Takahashi lives in Japan and is responsible for the Google+ Badge Widget. Reveles not only filed a <a href=\"https://github.com/osiux\">substantial amount of issue reports on Github</a> but also submitted a lot of patches.</p>\n<p>These two are among a group of more than 40 people who worked on Jetpack 3.8. Check out Jetpack&#8217;s <a href=\"http://jetpack.me/contribute/\">contribute page</a> if you&#8217;d like to get involved with the project. Also, be sure to read how you can <a href=\"http://wptavern.com/jetpack-relaunches-beta-testing-program\">join the Jetpack beta testing team</a> to be among the first to test new features.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 07:12:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Matt: Most Miles of Road: Texas\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45563\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://ma.tt/2015/11/most-miles-of-road-texas/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:405:\"<p>I was wondering the other day how many miles of road were in every state, and guessed that Texas must be the highest. It turns out it is, <a href=\"http://blog.cubitplanning.com/2010/02/road-miles-by-state/\">according to this list of the road mileage of every state</a>. It&#8217;s about 70% more than the runner-up, California. After TX and CA, it&#8217;s Illinois, Kansas, Minnesota, and Missouri.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 05 Nov 2015 16:20:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: Justin Tadlock Explains Taxonomy Term Meta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48843\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/justin-tadlock-explains-taxonomy-term-meta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1323:\"<p>While developers celebrate the <a href=\"http://wptavern.com/the-first-half-of-the-rest-api-is-officially-added-to-wordpress-core\">first half of the WordPress REST API</a> being merged into WordPress, there&#8217;s also another reason to celebrate. Six years <a href=\"https://core.trac.wordpress.org/ticket/10142\">in the making</a>, taxonomy term meta <a href=\"https://make.wordpress.org/core/2015/10/23/4-4-taxonomy-roundup/\">will be available</a> in WordPress 4.4.</p>\n<p>If you&#8217;re like me and don&#8217;t have a clue as to what taxonomy term meta is, I highly encourage you to read Justin Tadlock&#8217;s <a href=\"http://themehybrid.com/weblog/introduction-to-wordpress-term-meta\">explanation and tutorial</a>. In the post, Tadlock explains why term meta is significant and some of the possibilities it affords developers.</p>\n<p>After reading through the tutorial, I have a better understanding as to why developers are so excited. Not only does it create more opportunities to extend WordPress, but does so in a standard and expected way. Previous to WordPress 4.4, developers had to rely on work-arounds to add term meta to taxonomies.</p>\n<p>Let us know what you think of the tutorial and how you plan to take advantage of this feature once WordPress 4.4 is released.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 05 Nov 2015 08:45:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WPTavern: Easily Add Citations to Quotes With the Better Blockquotes Plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48833\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"http://wptavern.com/easily-add-citations-to-quotes-with-the-better-blockquotes-plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2123:\"<p><a href=\"https://github.com/devinsays/better-blockquotes\">Better Blockquotes</a> is a free WordPress plugin created by <a href=\"http://wptheming.com/\">Devin Price</a> that makes it easy to add citations to blockquotes. When a user clicks the blockquote button with no text highlighted, a dialogue box pops up with options to add a quote, citation, and a citation link.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquoteOptions.png\" rel=\"attachment wp-att-48834\"><img class=\"size-full wp-image-48834\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquoteOptions.png?resize=448%2C307\" alt=\"Better Blockquote Options\" /></a>Better Blockquote Options\n<p>Citations are inserted into the post with HTML5 markup. The blockquote button retains its default behaviour with highlighted text. I tested the plugin on WordPress 4.4 beta 3 and it works as advertised.</p>\n<p>I did notice however, that the citation displays immediately after the last character in the quote. I&#8217;d prefer to have</p>\n<p>a space between the last character and the citation.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesVisualEditor.png\" rel=\"attachment wp-att-48835\"><img class=\"size-full wp-image-48835\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesVisualEditor.png?resize=593%2C321\" alt=\"Better Blockquotes in the Visual Editor\" /></a>Better Blockquotes in the Visual Editor\n<p>An example of how better blockquotes looks in a post.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesInaPost.png\" rel=\"attachment wp-att-48836\"><img class=\"size-full wp-image-48836\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/BetterBlockquotesInaPost.png?resize=605%2C195\" alt=\"How a Blockquote Looks in a Post\" /></a>How a Better Blockquote Looks in a Post\n<p>Based on feedback, Price says he&#8217;ll attempt to add it to WordPress core as an enhancement. Is better blockquotes something you&#8217;d like to see added to WordPress?</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 05 Nov 2015 00:08:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Matt: Journalistic Accountability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45560\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://ma.tt/2015/11/journalistic-accountability/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:522:\"<p>Tech blog idea: A site that covers the top headlines on <a href=\"http://techmeme.com/\">Techmeme</a> 6, 12, or 18 months after they happened, and explores the delta between what people said was going to happen when they raised funding, or did an acquisition, and what actually happens after time has run its course. We keep covering announcements like they matter. Can also compare analyst and commentator predictions for <a href=\"https://duckduckgo.com/?q=site%3Adaringfireball.net+claim+chowder\">claim chowder</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 15:01:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"WPTavern: How Non-Developers Can Contribute to and Influence WordPress Core Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48823\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"http://wptavern.com/how-non-developers-can-contribute-to-and-influence-wordpress-core-development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1995:\"<p>If you don&#8217;t consider yourself a developer and want to contribute to WordPress core, <a href=\"http://hughlashbrooke.com/2015/11/03/a-non-developers-guide-to-getting-involved-in-wordpress-core-development/\">Hugh Lashbrooke&#8217;s guide</a> offers a few different techniques. The guide explains how and where to provide feedback and how important it is to beta test new features.</p>\n<p>Over the years, I&#8217;ve used WP Tavern to advocate for and against features in WordPress. One of the best pieces of advice I can give non-developers is to organize your thoughts or stance on a specific feature or direction and publish them on your site. This allows you to control the conversation and gives you plenty of space to explain your perspective.</p>\n<p>A great example <a href=\"http://wptavern.com/help-me-add-comment-approval-notifications-to-wordpress\">is this post</a> asking for help to add comment moderation approval notifications to WordPress. I explain why it&#8217;s needed with a <a href=\"https://core.trac.wordpress.org/ticket/33717\">link to the ticket</a> I created to keep track of the conversation. I prefer to write about potential features and based on feedback, I&#8217;ll either create a trac ticket myself or someone will do it for me with a link to the post.</p>\n<p>The Tavern is in the dashboard and is read by a large audience, including core developers. However, thanks to social media, a well constructed post with solid points will make the rounds on Twitter, Facebook, and within WordPress sub-communities.</p>\n<p>It&#8217;s those posts and associated comments that serve as one of many foundations for change in WordPress without touching a line of code. Keep in mind that there&#8217;s no guarantee you&#8217;ll be able to directly influence WordPress core development with words alone, but respectful, in-depth conversations with differing opinions and perspectives are an important part of the community regardless.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 08:42:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"WPTavern: Daniel Bachhuber Raises More Than $17.5K to Develop a RESTful WP-CLI\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48819\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"http://wptavern.com/daniel-bachhuber-raises-more-than-17-5k-to-develop-a-restful-wp-cli\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1664:\"<p><a href=\"https://danielbachhuber.com/\">Daniel Bachhuber</a>, who maintains <a href=\"http://wp-cli.org/\">WP-CLI</a>, has successfully raised more than $21K through his <a href=\"https://www.kickstarter.com/projects/danielbachhuber/a-more-restful-wp-cli\">Kickstarter campaign</a>. He created the campaign to generate funding to develop a CLI interface for the WordPress REST API.</p>\n<p>According to Bachhuber, the project will allow WordPress REST API endpoints registered via plugins and themes to automatically be usable as WP-CLI commands. Developers will also be able to push and pull posts including, custom post types, users, and other WordPress REST API data between separate WordPress installations with a simple WP-CLI command.</p>\n<p>Bachhuber requested $17.5K and within twelve hours of publishing the campaign, he received more than the asking amount from 51 backers, including one who contributed $8,500. Bachhuber will donate one hour of time to the WordPress REST API project in 2016 for every $100 over the funding goal. Based on the current amount, that&#8217;s 46 hours.</p>\n<p>With funding in place, Bachhuber will work on the project throughout the first half of 2016, &#8220;$17,500 represents 150 hours of development at $100/hour, plus Kickstarter&#8217;s cut and costs associated with the rewards. I intend to use this time over the first six months of 2016,&#8221; he said.</p>\n<p>There&#8217;s still 28 days left in the campaign and if it reaches $40K, he pledges to help figure out how the REST API will handle <a href=\"https://github.com/WP-API/WP-API/issues/1055\">password protected posts</a>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Nov 2015 07:04:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WPTavern: 93Digital Publishes WordPress Time Machine\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48814\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wptavern.com/93digital-publishes-wordpress-time-machine\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1528:\"<p><a href=\"https://93digital.co.uk/\">93Digital</a>, a London-based WordPress development agency, has published a <a href=\"https://93digital.co.uk/wphistory/\">WordPress time machine</a>. The page features a timeline where visitors can browse every major version of WordPress released since 1.0. Versions are displayed in a horizontal timeline format with fancy animations when hovered over.</p>\n<a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/WordPresstimeMachine.png\" rel=\"attachment wp-att-48815\"><img class=\"size-full wp-image-48815\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/11/WordPresstimeMachine.png?resize=1025%2C554\" alt=\"WordPress Time Machine\" /></a>WordPress Time Machine\n<p>Unfortunately, the animations are more distracting than they are useful and add a small delay when viewing images. The full-size images are not large enough and appear blurry when clicked on. If 93Digital removes the animations and uses larger images, the timeline would be a nice way to visually browse through WordPress&#8217; history.</p>\n<p>If you&#8217;d like to see clear, large images of past WordPress releases and learn about some of the key features in each version, I recommend reading <a href=\"http://www.inmotionhosting.com/support/website/wordpress/wordpress-through-the-ages\">WordPress through the ages</a>. Through the images, you can see the natural progression of features, designs, and layouts WordPress has gone through during the past 10 years.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 03 Nov 2015 18:18:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Matt: Mario and NUX\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45552\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://ma.tt/2015/11/mario-and-nux/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:734:\"<p><span class=\"embed-youtube\"></span></p>\n<p>In this video Shigeru Miyamoto and Takashi Tezuka discuss World 1-1, or the very first level in the very first Super Mario Bros. It&#8217;s fascinating how every element on the level is designed to introduce you to a mechanic of the game, or how Mario moves and jumps. This is interesting if you like Mario, but also important for any developer in any medium who is thinking about the NUX (new user experience) of their product. I sometimes joke that in <a href=\"http://wordpress.org/\">WordPress</a> we put people on the boss monster level the first time they enter the dashboard. There have been improvements but still so much to do to naturally introduce people to our interface.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 02 Nov 2015 15:26:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Matt: Fixing DST\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45543\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"http://ma.tt/2015/11/fixing-dst/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:230:\"<p>The Atlantic: <a href=\"http://www.theatlantic.com/business/archive/2013/11/daylight-saving-time-is-terrible-heres-a-simple-plan-to-fix-it/281075/\">Daylight Saving Time Is Terrible: Here&#8217;s a Simple Plan to Fix It</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 01 Nov 2015 17:59:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"WPTavern: WordPress 4.4 Streamlines Content Sharing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48797\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wptavern.com/wordpress-4-4-streamlines-content-sharing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4151:\"<p>For the last six years, WordPress has been an <a href=\"https://codex.wordpress.org/Embeds\">oEmbed consumer</a>, adding support for services with nearly every major release since 2.9. In WordPress 4.4, it switches roles and is an oEmbed provider.</p>\n<p>Proposed by Pascal Birchler <a href=\"https://make.wordpress.org/core/2015/09/30/feature-plugin-merge-proposal-oembed/\">earlier this year</a>, oEmbeds for posts streamlines how they&#8217;re shared across the web. Here&#8217;s an example of what an oEmbedded post looks like.</p>\n<p></p>\n<p>Content is displayed in an iFrame with a link to comments, a sharing button, and a link to the main page the article is hosted on. The continue reading link takes visitors to the source site. In the last three months, Birchler and members of the core team have worked hard to make sure embedded content is secure.</p>\n<ul>\n<li>The iFrames use the <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#Attributes\">sandbox attribute</a> to enable extra restrictions on content that can appear in the inline frame.</li>\n<li>The host and the embedded site communicate via postMessage to allow resizing and clicking on links safely</li>\n</ul>\n<p>oEmbed discovery is turned on by default in WordPress 4.4. Too disable it, you&#8217;ll need install and activate the <a href=\"https://wordpress.org/plugins/disable-embeds/\">Disable Embeds</a> plugin. The plugin does the following:</p>\n<ul>\n<li>Prevents others from embedding your site.</li>\n<li>Prevents you from embedding other non-whitelisted sites.</li>\n<li>Disables all JavaScript</li>\n</ul>\n<p>Some people <a href=\"https://make.wordpress.org/core/2015/10/28/new-embeds-feature-in-wordpress-4-4/#comment-28263\">are requesting</a> that an option be added to disable oEmbeds rather than installing a plugin. In response to requests, Aaron Jorbin, WordPress core contributor, reemphasized <a href=\"https://wordpress.org/about/philosophy/#decisions\">WordPress&#8217; philosophy</a> on adding options.</p>\n<blockquote><p>Every time you give a user an option, you are asking them to make a decision. When a user doesn’t care or understand the option this ultimately leads to frustration. As developers we sometimes feel that providing options for everything is a good thing, you can never have too many choices, right?</p>\n<p>Ultimately these choices end up being technical ones, choices that the average end-user has no interest in. It’s our duty as developers to make smart design decisions and avoid putting the weight of technical choices on our end users.</p></blockquote>\n<p>Birchler also responded saying, &#8220;The new embed functionality was developed with the majority of users in mind.&#8221; One of the largest problems with adding to options to WordPress is that they&#8217;re difficult to remove.</p>\n<p>Some WordPress developers are excited to see how post embeds can be extended. <a href=\"http://hughlashbrooke.com/\">Hugh Lashbrooke</a>, who works for Automattic, thinks post embeds will be great for Custom Post Types, &#8220;I think the oEmbed feature has loads of awesome use cases for Custom Post Types. For example, being able to embed eCommerce products on other sites with dynamic add to cart links,&#8221; he said.</p>\n<p>The easiest way to try post embeds is to log into <a href=\"http://wptavern.com/test-new-wordpress-features-without-installing-anything-via-trywpbeta\">TryWPBeta</a> using these credentials.</p>\n<ul>\n<li><strong>Username</strong>: wcpdx</li>\n<li><strong>Password</strong>: wcpdx15</li>\n</ul>\n<p>Create a new post and make sure the visual editor is selected. Copy a URL from one of the Make Core WordPress blog posts and paste it into the editor.</p>\n<p>If you&#8217;d like to learn more about how this feature works, check out <a href=\"https://make.wordpress.org/core/2015/10/28/new-embeds-feature-in-wordpress-4-4/\">Birchler&#8217;s post</a> where he explains what developers need to take note of and how to customize the output. WordPress 4.4 is <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\">scheduled for release</a> in December.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Oct 2015 20:50:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Matt: Lifehacker Japan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://ma.tt/2015/10/lifehacker-japan/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:301:\"<p>When I was last in Tokyo <a href=\"http://www.lifehacker.jp/2015/10/151022wordpress_matt.html\">I sat down with Lifehacker Japan and they have a long interview in Japanese and some photos from the trip</a>. I don&#8217;t remember what I said, but the Google Translate version is pretty hilarious.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Oct 2015 20:11:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: WPWeekly Episode 211 – Kyle Maurer Co-founder of Real Big Marketing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48791\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"http://wptavern.com/wpweekly-episode-211-kyle-maurer-co-founder-of-real-big-marketing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2590:\"<p>In this episode, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I are joined by Kyle Maurer, Co-founder of <a href=\"http://realbigmarketing.com/\">Real Big Marketing. </a>Maurer grew up in rural Michigan working on farms without much knowledge of the IT industry. He registered an account on meetup.com after discovering a WordPress meetup in his local area.</p>\n<p>During the meetup, Maurer discovered how powerful WordPress is. The knowledge he gained motivated him to dive deep into WordPress and eventually start his own development agency.</p>\n<p>We discuss his most recent project, <a href=\"http://wordcrash.net/\">WordCrash,</a> which allows people in the WordPress community to offer travelers a place to stay for free. We also discuss his involvement with <a href=\"http://wordpress.tv/\">WordPress.TV</a> where Maurer volunteers to moderate videos, contribute code to the site, and coordinate projects. Last but not least, we discuss <a href=\"http://wproundtable.com/\">WP Roundtable</a>, a weekly WordPress podcast hosted by Maurer and a <a href=\"http://wproundtable.com/panel/\">panel of WordPress personalities</a>.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-2/\">WordPress 4.4 Beta 2 Released</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/media-deduper/\">Media DeDuper</a> saves disk space and brings some order to the chaos of your media library by removing and preventing duplicate files.</p>\n<p><a href=\"https://wordpress.org/plugins/feature-request/\">Feature Request</a> is an advanced feature request and suggestion submitter with a built-in voting system for WordPress.</p>\n<p><a href=\"https://wordpress.org/plugins/minimum-dimensions-for-image-field/\">Minimum Dimensions For Image Field</a> allows the user to set size constraints for the Featured Image field.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, November 4th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #211:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Oct 2015 16:50:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WPTavern: Joe McGill Explains How Responsive Images Work in WordPress 4.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48780\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"http://wptavern.com/joe-mcgill-explains-how-responsive-images-work-in-wordpress-4-4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2895:\"<p>One of the key features in WordPress 4.4 is <a href=\"https://make.wordpress.org/core/2015/09/30/responsive-images-merge-proposal/\">responsive images</a>. Joe McGill, who is helping to merge the feature to core, joined me for a thirty minute interview to explain how it works.</p>\n<p>When users upload images in WordPress, it automatically crops new images to smaller sizes. For example, if you upload an image that&#8217;s 1500 x 706, the image sizes might look like this:</p>\n<ul>\n<li>Full Size &#8211; 1500 x 706</li>\n<li>Large &#8211; 500 x 235</li>\n<li>Medium &#8211; 300 x 141</li>\n<li>Thumbnail &#8211; 150 x 150</li>\n</ul>\n<p>Additional sizes are created depending on the theme. If the full size image is attached to a post, users on desktop and mobile devices will see the full size image. However, it doesn&#8217;t make sense to use the full size image on mobile devices because of its display and file size.</p>\n<p>Responsive images in WordPress 4.4 adds <code>srcset</code>&nbsp;and <code>sizes</code> support to WordPress. This allows the software to automatically use and display the right image based on a device&#8217;s screen size. If I attach a full size 1500 x 706 image to a post in WordPress 4.4, mobile devices will see the large or medium-sized image instead.</p>\n<p>Responsive images don&#8217;t have any settings to configure as the magic happens behind the scenes. I encourage you to listen to the interview as it may be easier to understand listening to us talk through the feature.</p>\n<div class=\"audio-shortcode-wrap\"><img src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/ResponsiveImagesinWordPress.png?resize=175%2C131\" alt=\"Responsive Images in WordPress\" class=\"landscape thumbnail post-thumbnail audio-image\" /><!--[if lt IE 9]><script>document.createElement(\'audio\');</script><![endif]-->\n<a href=\"http://wptavern.com/wp-content/uploads/2015/10/Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3\">http://wptavern.com/wp-content/uploads/2015/10/Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3</a></div><div class=\"media-shortcode-extend\"><div class=\"media-info audio-info\"><ul class=\"media-meta\"><li><span class=\"prep\">Run Time</span> <span class=\"data\">26:50</span></li><li><span class=\"prep\">Artist</span> <span class=\"data\">Jeff Chandler</span></li><li><span class=\"prep\">File Name</span> <span class=\"data\"><a href=\"http://wptavern.com/wp-content/uploads/2015/10/Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3\">Joe-McGill-Explains-Responsive-Images-in-WordPress.mp3</a></span></li><li><span class=\"prep\">File Size</span> <span class=\"data\">12.09 MB</span></li><li><span class=\"prep\">File Type</span> <span class=\"data\">MP3</span></li><li><span class=\"prep\">Mime Type</span> <span class=\"data\">audio/mpeg</span></li></ul></div><button class=\"media-info-toggle\">Audio Info</button></div>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 29 Oct 2015 00:43:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"WPTavern: The WordPress Theme Directory No Longer Counts Automated Downloads\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48766\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://wptavern.com/the-wordpress-theme-directory-no-longer-counts-automated-downloads\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5745:\"<p>The <a href=\"https://wordpress.org/themes/browse/popular/\">popular themes page</a> on the WordPress theme directory usually displays a mix of default themes and those that meet a certain criteria. While the criteria to reach the page is not publicly known, download counts are one form of measurement.</p>\n<p>Since September, the <a href=\"https://wordpress.org/themes/swift/\">Swift theme</a> has routinely shown up on the popular themes page. According to download stats, Swift was downloaded between, 2,000 to 3,500 times a day in September and early October.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/SwiftThemeDownloadNumbers.png\"><img class=\"size-full wp-image-48767\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/SwiftThemeDownloadNumbers.png?resize=665%2C500\" alt=\"Swift Download Count\" /></a>Swift Download Count\n<p>However, the stats drop off abruptly on October 15th and have yet to reach previous levels. On October 18th, a few members inside the Theme Review Team Slack channel <a href=\"https://wordpress.slack.com/archives/themereview/p1445155458000095\">shared suspicions</a> that something was not right with Swift&#8217;s download stats.</p>\n<p>Ionut Neagu discovered that Swift does not appear on the <a href=\"https://garage.godaddy.com/top-100-wordpress-themes/\">GoDaddy Hot 100</a> while other themes on the popular page do. While not conclusive, the evidence points towards some sort of anomaly.</p>\n<p>Samuel &#8216;Otto&#8217; Wood, who helps maintain WordPress.org <a href=\"https://wordpress.slack.com/archives/themereview/p1445180169000105\">looked at the raw</a> data for Swift and discovered that a lot of the downloads appeared to be automated.</p>\n<blockquote><p>The swift theme is indeed getting an exceptional number of downloads, so I took a closer look at the raw data. It appears that a lot of these downloads are automated in some way. However, there&#8217;s no evidence that it is malicious, nor does the pattern apply only to the swift theme. Perhaps it is included in some installer system that auto-downloads themes for newly installed sites. It&#8217;s hard to say.</p>\n<p>In any case, I made a way to detect and block these types of automated downloads from appearing in the stats, and retroactively applied it for the last three days of data (which is all we retain). Going forward, automated downloads will not appear as downloads and will not affect the popular listings.</p></blockquote>\n<p>Once the changes were implemented, Swift&#8217;s download stats significantly decreased. The changes also apply to all other themes hosted on the directory. Otto declined to comment on the specific changes made but tells the Tavern, &#8220;If we can detect a case where downloads aren&#8217;t being made by users, then we will try not to count it in the results.&#8221;</p>\n<h2>Swift’s Side of the Story</h2>\n<p>Satish Gandham, founder of <a href=\"https://swiftthemes.com/\">Swiftthemes</a>, explains what Swift has gone through the last few weeks which may account for the high download numbers, &#8220;Swift was featured for a couple of days and we spent money on Facebook ads to promote the free version. Also, there were a couple of hosted WordPress providers who asked permission to include Swift on their platform.</p>\n<p>&#8220;The premium version of Swift also had the same slug URL as the free version. The WordPress theme directory saw v7.2.48 to be higher than 7.2.6 and premium users downgraded to the free version thinking it was an upgrade. It was a support nightmare,&#8221; Gandham tells the Tavern.</p>\n<p>Swift&#8217;s <a href=\"https://swiftthemes.com/forums/topic/how-to-returning-to-version-7-2-6/\">support forums</a> confirm that some customers of the commercial version were automatically updated to the free version in early August.</p>\n<h2>Download Counts are Almost Irrelevant</h2>\n<p>When the <a href=\"http://wptavern.com/wordpress-plugin-directory-launches-new-design\">plugin directory was redesigned</a> earlier this year, download counts were removed in favor of active installs. Active installs are more accurate and difficult to manipulate. On the other hand, when the <a href=\"http://wptavern.com/wordpress-theme-directory-launches-new-design\">theme directory was redesigned</a>, download counts remained.</p>\n<p>It&#8217;s possible that the theme directory will one day show active installs but the data gathering aspect is not ready yet. Also, the numbers are lower for themes than for plugins, which may lead to incorrect conclusions in regards to relative popularity.</p>\n<h2>It Happens More Than You Might Think</h2>\n<p>In this particular instance, there&#8217;s no evidence that points to a malicious intent to inflate stats to manipulate the popular themes page. In the years I&#8217;ve written about WordPress, I&#8217;ve heard rumors that certain plugins and themes automate their download counts to appear more popular than they really are. However, I&#8217;ve yet to write about a theme or plugin caught in the act.</p>\n<p>According to Otto, it happens more often than you might think. When he or other volunteer moderators for the plugin and theme directories notice fishy download counts, they contact the author and the process usually stops. If it continues, the author risks having their themes and plugins suspended or banned from the directory.</p>\n<p>If you notice suspicious activity with a theme hosted on WordPress.org, you can voice your concern in the <a href=\"https://make.wordpress.org/chat/\">Theme Review Slack</a> channel during non-meeting times. For suspicious activity related to plugins hosted on the directory, email <strong>plugins at WordPress.org</strong>.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 28 Oct 2015 20:23:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Post Status: Using WordPress as an application framework — Draft podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=14800\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://poststatus.com/using-wordpress-as-an-application-framework-draft-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2324:\"<p>Welcome to the Post Status Draft podcast, which you can find <a href=\"https://itunes.apple.com/us/podcast/post-status-draft-wordpress/id976403008\">on iTunes</a> and <a href=\"http://simplecast.fm/podcasts/1061/rss\">via RSS</a> for your favorite podcatcher. Brian and his co-host, <a href=\"https://twitter.com/joe_hoyle\">Joe Hoyle</a>, a co-founder and the CTO of <a href=\"https://hmn.md/\">Human Made</a>, discuss some of today’s hottest, current WordPress news.</p>\n<p>In this episode of Draft, Joe and Brian discuss a popular site’s redesign, and how the developers viewed WordPress’s shortcomings. They also talk about WordPress’s chops generally for complex sites and applications.</p>\n<p><!--[if lt IE 9]><script>document.createElement(\'audio\');</script><![endif]-->\n<a href=\"https://audio.simplecast.fm/19270.mp3\">https://audio.simplecast.fm/19270.mp3</a><br />\n<a href=\"https://audio.simplecast.fm/19270.mp3\">Direct Download</a></p>\n<p><strong>Topics:</strong></p>\n<h3>An outside look at WordPress</h3>\n<ul>\n<li><a href=\"https://poststatus.com/notes/wordpress-shortcomings-from-developers-that-prefer-other-software/\">WordPress shortcomings, from developers that prefer other software</a></li>\n<li><a href=\"http://responsivewebdesign.com/toast/backend/\">Redesigning The Toast</a></li>\n<li><a href=\"http://upstatement.com/timber/\">Timber, Twig templating for WordPress</a></li>\n<li><a href=\"http://blog.apps.chicagotribune.com/2011/10/19/turning-wordpress-into-a-framework-with-mtv/\">WordPress MTV</a></li>\n<li><a href=\"http://www.advancedcustomfields.com/\">Advanced Custom Fields </a></li>\n<li><a href=\"http://cmb2.io/\">CMB2</a></li>\n</ul>\n<h3>WordPress as an application framework</h3>\n<ul>\n<li><a href=\"https://pippinsplugins.com/series/building-a-database-abstraction-layer/\">Building a database abstraction layer</a></li>\n<li><a href=\"https://nomadbase.io/\">Nomad Base</a></li>\n<li><a href=\"https://github.com/10up/ElasticPress\">ElasticPress, by 10up</a></li>\n<li><a href=\"https://github.com/alleyinteractive/searchpress\">SearchPress, by Alley</a></li>\n<li><a href=\"https://developer.wordpress.com/docs/elasticsearch/\">Elasticsearch on WordPress.com</a></li>\n<li><a href=\"https://vip.wordpress.com/2015/07/08/scaling-wp-queries-with-elasticsearch/\">Scaling WP queries with Elasticsearch</a></li>\n</ul>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 28 Oct 2015 04:05:24 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Katie Richards\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"WPTavern: ManageWP Launches Orion Dashboard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48756\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://wptavern.com/managewp-launches-orion-dashboard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2334:\"<p>If you use <a href=\"https://managewp.com/\">ManageWP</a>, you may have noticed a new dashboard design. That&#8217;s because the <a href=\"https://managewp.com/developer-diary-9-managewp-orion-is-out\">company released Orion</a>, a completely redesigned dashboard for managing sites.</p>\n<p>To give users a chance to alter workflows and explore the Orion dashboard, ManageWP linked the original dashboard to Orion. Actions performed in one dashboard are mirrored to the other. Users can switch between the two with the click of a button.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/ManageWPOrianOldNew.gif\"><img class=\"size-full wp-image-48757\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/ManageWPOrianOldNew.gif?resize=638%2C512\" alt=\"ManageWP Dashboard Compared to Orion\" /></a>ManageWP Dashboard Compared to Orion\n<p>Users can now sort sites by tags and clients in addition to groups. Websites can be assigned to clients while tags can describe whether a site is in development or live. Each site can up to five tags and one client.</p>\n<p>Unlike the native dashboard, Orion uses Angular.js which allows users to run asynchronous calls. For example, you can run more than one command why performing other tasks.</p>\n<p>One distinct difference between both dashboards is the way backups are generated. ManageWP backups and Orion backups are <a href=\"https://managewp.com/managewp-orion-developer-diary-3-bulletproof-backup-solution\">completely different</a> from each other. However, you can use both at the same time.</p>\n<p>The company says Orion comes with essential features but additional features will be completed and added by February of 2016 which is also when Orion will become the default dashboard. WordPress Multisite is not supported as the company cites it as a major undertaking and doesn&#8217;t consider it a high priority.</p>\n<p>The new dashboard contains more features than what&#8217;s listed here. I encourage you to read the <a href=\"https://managewp.com/developer-diary-9-managewp-orion-is-out\">official announcement</a> and if you&#8217;re a customer, to explore Orion as it will soon be the default experience to managing sites. If you&#8217;re a ManageWP customer, let us know what you think of the new dashboard design.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Oct 2015 18:09:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WPTavern: How to Prepare and Take Advantage of Language Packs for Plugins Hosted on WordPress.org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48727\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:107:\"http://wptavern.com/how-to-prepare-and-take-advantage-of-language-packs-for-plugins-hosted-on-wordpress-org\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:15607:\"<hr />\n<p>This is a guest post contributed by <a href=\"https://mpswp.wordpress.com/\">Matthew Sparrow</a> who is a young, self-taught developer with minimal coding knowledge that loves to use WordPress. He mostly uses WordPress for personal projects although he has completed a couple of projects for others. In addition to <a href=\"https://profiles.wordpress.org/kidsguide/\">maintaining a few plugins</a>, he&#8217;s an active translations contributor.</p>\n<hr />\n<p>Automatic translations for plugins have been a long time coming. WordPress itself already auto-downloads and auto-updates core translations, so it is a natural progression that plugins and themes will receive the same treatment.</p>\n<p>For those who have been following auto plugin translations, it has <a href=\"http://ottopress.com/2013/language-packs-101-prepwork/\">been in the works for years</a>. It came as a welcome surprise in September when it was announced that plugins will <a href=\"https://make.wordpress.org/plugins/2015/09/01/plugin-translations-on-wordpress-org/\">finally be able to have language packs</a>.</p>\n<p>If you have a plugin in the WordPress.org directory, then this is important, welcome, and exciting news. However, as great as an initiative as language packs are for plugins, it <em>seems</em> simpler than it actually is.</p>\n<p>If you are a plugin developer, you have to go through a few steps in order to get this to work for your plugins. So let’s get started.</p>\n<h2 class=\"font-headlines\">Should You Be Excited About Plugin Language Packs?</h2>\n<p>As a plugin author, I&#8217;m really excited about the new translation system, and so should you. The <a href=\"https://make.wordpress.org/polyglots/\">Polyglots team</a> is making it so that you no longer have to include all of your <code>.mo</code> and <code>.po</code> files directly in your plugin. Instead, they will be hosted on WordPress.org.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-1.png\"><img class=\"aligncenter size-full wp-image-48731\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-1.png?resize=582%2C575\" alt=\"screenshot-1\" /></a>The ideal scenario is when a user selects their language (either through a new WordPress install or through <code>Settings &gt; General</code>), the language pack for your plugin will be automatically installed and kept updated.</p>\n<p>This new system accomplishes a few things:</p>\n<ul>\n<li>Plugin files are smaller. There&#8217;s no need to include translation files with your plugin.</li>\n<li>Plugin authors no longer need to manage translations/translators.</li>\n<li>End users are automatically able to see a plugin in their own language assuming a translation has already been created for their locale.</li>\n</ul>\n<h2 class=\"font-headlines\">How to Prepare for Plugin Language Packs</h2>\n<p>Before we jump into translating plugins, you first need to prepare your plugin for it to work with the new translation setup.</p>\n<p>In order for you to get your plugin prepared to be moved over to the new system, you need to change your text domain to exactly match your WordPress plugin slug. An important reminder is that even if you have changed your plugin&#8217;s name (as <a href=\"https://wordpress.org/plugins/wordpress-seo/\">Yoast SEO</a> recently did), the slug does not change. For a more in-depth discussion and tutorial, please follow Otto&#8217;s great post on <a href=\"http://ottopress.com/2013/language-packs-101-prepwork/\">language pack prepwork</a>.</p>\n<p>You are still welcome to include translation files in your plugin, even with language packs enabled. Translation files in your plugin take priority, and if those aren&#8217;t present, that&#8217;s where language packs come in.</p>\n<p>When you are preparing your plugin for language packs, it is important to note that you should avoid removing translation files from your plugin. If you do so, and your plugin is selected for language packs, your existing translations will not be automatically moved over to the new system.</p>\n<p>Do your best to keep your translation files with your plugin until the Polyglots team has informed you that your plugin is ready for language packs.</p>\n<h2 class=\"font-headlines\">Wait to Receive the Official Notice</h2>\n<p>The Polyglot team is preparing the plugins in stages to avoid any major hiccups. Assuming your WordPress.org email is up-to-date, you will receive an email when your plugin is ready.</p>\n<p>You may be wondering how long it takes before the team reaches your plugin. There are 40,000+ plugins on WordPress.org, so it is not a quick process. WordPress is preparing plugins in batches according to the amount of active installs each plugin has.</p>\n<p>If your plugin has over 30,000+ active installs, then chances are you are on the new system, although I&#8217;ve seen plugins with 10,000+ active installs also be approved.</p>\n<p>Unfortunately, there is no way to make the process quicker. Please practice patience and eventually your turn will come.</p>\n<h2 class=\"font-headlines\">You’ve Received the E-Mail That Your Plugin Is Ready</h2>\n<p>So you finally receive the email saying that your plugin is going to be uploaded with language pack support. Awesome! This is what the email that I received looks like. Note that I&#8217;m using one of my approved plugins as an example.</p>\n<blockquote><p>Howdy!<br />\n​<br />\nWe&#8217;re emailing you because you&#8217;re an author for the following plugin on WordPress.org:<br />\n​<br />\n* Easy Updates Manager : https://wordpress.org/plugins/stops-core-theme-and-plugin-updates/<br />\n​<br />\nNext week, we intend to import the plugin listed above into the translate.wordpress.org translation system. Language packs will also be enabled for your plugin, for any locales that are fully translated (at 100%).<br />\n​<br />\nAs part of this process, all of the strings in your plugin will be imported into translate.wordpress.org. Additionally, any language files that you ship with your plugin (&#8216;mo&#8217; files) will be imported and synced with their respective locales within translate.wordpress.org.<br />\n​<br />\nNo strings in your plugin? Plugin translations include the ability to translate the readme and display these translations in the localized WordPress.org plugin directories.</p>\n<p>If you have prepared your plugin already then this notice is of no real importance. If you have not yet prepared your plugin and you have received the notice then you need to prepare your plugin ASAP. If you don’t prepare your plugin then… well… I don’t really know, but it won’t be good. So go and prepare your plugin if you have not yet done so.<br />\n&#8230;</p></blockquote>\n<h2 class=\"font-headlines\">Your Plugin Is Semi-Ready for Language Packs. Now What?</h2>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-22.png\"><img class=\"alignright wp-image-48741 size-full\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-22.png?resize=291%2C321\" alt=\"screenshot-22\" /></a>A week or so after you receive the notice, your plugin and its translations are moved to <a href=\"https://translate.wordpress.org\">translate.wordpress.org</a>. You will likely not receive a notice when your plugin is moved.</p>\n<p>To find out if it&#8217;s been uploaded, visit your plugin&#8217;s WordPress.org page where you should see a translations section in the right sidebar. Click the <strong>Translate Plugin Name </strong>button<strong>.</strong> If you are brought to a page that looks like the one below then your plugin is uploaded and is ready to be translated.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-3.png\"><img class=\"aligncenter size-full wp-image-48734\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-3.png?resize=954%2C611\" alt=\"screenshot-3\" /></a>If you see a page that looks different from this (i.e., a Not Found error), your plugin is not yet ready.</p>\n<p>Assuming you&#8217;ve received the e-mail, your plugin is ready, and you&#8217;ve waited a reasonable amount of time, you should be good to go as far as preparing your plugin.</p>\n<p>If it has been over two weeks and your plugin has not yet been uploaded, you should contact the Polyglot team <a href=\"https://make.wordpress.org/polyglots/\">on their blog</a>, or in the <a href=\"https://make.wordpress.org/chat/\">#polyglots channel on WordPress Slack</a>. Please exercise extreme patience as the process can take a week or sometimes even two.</p>\n<h2 class=\"font-headlines\">Removing Your Translation Files From Your Plugin</h2>\n<p>Now that your plugin is uploaded to the system, you can safely remove the translation files from your plugin. If you don’t have any <code>.mo</code> and <code>.po</code> files in your plugin, then you can skip this step.</p>\n<p>One thing to note: You may not want to remove your translation files if your plugin does not have any translations on <a href=\"https://translate.wordpress.org/\">translate.wordpress.org</a> or translations are not 100% complete.</p>\n<h2 class=\"font-headlines\">Making Your Plugin Translatable</h2>\n<p>With all of that stuff out-of-the-way, it’s time to focus on translating your plugin. This is where it can get confusing but try to stick with me.</p>\n<p>By default, you cannot submit translations for your plugin in any language. Because of this, you need to ask the Polyglots team to add you as a translator for your plugin. You can do so by heading over to the <a href=\"https://make.wordpress.org/polyglots/\">Polyglots blog</a> and ask them. To make it easier they came up with a template of <a href=\"https://make.wordpress.org/polyglots/handbook/rosetta/theme-plugin-directories/#sample-post\">what to say</a>.</p>\n<blockquote><p>Hello Polyglots!</p>\n<p>I am the plugin author for [plugin-name and link to plugin directory]. We have a number of great translation editors that we’d like to be able to approve translation for our plugin(s). Please add the following WordPress.org users as translation editors for their respective locales:<br />\no #ar – @username<br />\no #bn – @username, @username<br />\no #da – @username<br />\no #de-ch – @username<br />\netc…</p>\n<p>If you have any questions, just comment here. Thank you!</p></blockquote>\n<p>Ideally, the above will include requests for multiple plugins, but as plugins are being rolled out slowly, it&#8217;s acceptable at the moment to include one request per plugin.</p>\n<p>Make sure that you use WordPress.org usernames and that the user is still active. If you are wondering what languages there are, you can visit <a href=\"https://translate.wordpress.org/\">https://translate.wordpress.org/</a> and scroll through the different languages that WordPress supports.</p>\n<p>Please only ask to be added as a translator for the languages you know. You will not be approved if you are not a native speaker for a language.</p>\n<p>At this point, again, patience is needed. The Polyglot team will receive your request and will work through it. If your post doesn&#8217;t show up right away, it&#8217;s because first-time posters are moderated.</p>\n<p>In a week or two, the translators you requested should be added to your plugin. If there are any issues, a Polyglot member will comment on your request with any difficulties encountered or notify you that they have approved your request.</p>\n<p>You&#8217;ll know when you are added when you see new badges appear on your WordPress.org profile page. One is a translation editor badge and the other is a translation contributor badge.</p>\n<h2><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-4.png\"><img class=\"aligncenter size-full wp-image-48735\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-4.png?resize=601%2C322\" alt=\"screenshot-4\" /></a>How Do I Translate?</h2>\n<p>First, visit <a href=\"https://translate.wordpress.org/\">https://translate.wordpress.org/</a>, select your language, then click the plugins tab. Search for your plugin and then click the translate project button. You&#8217;ll be brought to a page that looks like the one below. This page is where you can translate your plugin. In this case, my plugin is already translated in the language that I selected.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-5.png\"><img class=\"aligncenter size-full wp-image-48736\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-5.png?resize=957%2C587\" alt=\"screenshot-5\" /></a>On this table, there are four separate things to translate. Trunk, the stable release (version), and the <code>readme.txt</code> variations. In order for language packs to work, <em>you need to translate all four versions</em>.</p>\n<p>To translate, click on one of the sub-projects. This takes you to the translation page. Here, you can see all of the different strings that need to be translated in your plugin. You can edit a string by clicking the details button, translating it in the text editor, and then clicking the <strong>add translations</strong> button.</p>\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-6.png\"><img class=\"aligncenter size-full wp-image-48737\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-6.png?resize=947%2C561\" alt=\"screenshot-6\" /></a>Even if you&#8217;re not added as an editor for a language, you can still translate a plugin. The only difference is instead of adding the translations directly, you can only request that it be changed. Someone from the Polyglots team will need review and approve your translation suggestions.</p>\n<h2 class=\"font-headlines\">Once Your Translations Are Ready</h2>\n<p>Once you&#8217;ve finished translating a language completely, it will be available for people to use. However, it doesn’t become available immediately. It can take one to three days for a translation to be available once you finish it. Again, exercise patience.</p>\n<p>You&#8217;ll know when the translation is available when you see it in the translation section on your WordPress.org plugin&#8217;s page. For example, you can see what it looks like in the picture below.</p>\n<p><a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-7.png\"><img class=\"aligncenter size-full wp-image-48744\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/screenshot-7.png?resize=447%2C377\" alt=\"screenshot-7\" /></a>Also, you&#8217;ll know it&#8217;s working if you go into a website (preferably not a live website), download your plugin, and select the language that you want to test in <strong>Settings &gt; General</strong>.</p>\n<h2 class=\"font-headlines\">Plugin Language Packs Are Here to Stay</h2>\n<p>Getting language packs to work properly in WordPress plugins is not exactly a straightforward process, which is precisely why plugins are being rolled out slowly.</p>\n<p>Please remember that everyone is a volunteer, from the Polyglots team, to translators, and to the plugin authors. Please give props where appropriate as everyone is working hard to make plugin language packs the norm.</p>\n<p>If you are having any trouble, the Polyglots team also has a <a href=\"https://make.wordpress.org/polyglots/handbook/\">handbook</a> available which provides some good information on how this new system works.</p>\n<p>I&#8217;ll also do my best to answer any questions in the comment section. If you have additional insight, please weigh in as well.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Oct 2015 02:52:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"WPTavern: Test New WordPress Features Without Installing Anything via TryWPBeta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48713\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wptavern.com/test-new-wordpress-features-without-installing-anything-via-trywpbeta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3568:\"<p>Over the weekend at <a href=\"https://portland.wordcamp.org/2015/\">WordCamp Portland, Oregon</a>, Drew Jaynes, a WordPress core developer who also led the 4.2 development cycle presented on the topic of beta testing WordPress.</p>\n<p>In the presentation, Jaynes highlights the pros and cons of using the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Testing plugin</a> on a testing site and a production site. However, he also cites a third way to test WordPress via <a href=\"http://wcpdx.trywpbeta.com/\">TryWPBeta.com</a>.</p>\n<p> \n<div> <strong> <a href=\"https://www.slideshare.net/DrewAPicture/trying-out-tomorrows-wordpress-today\" title=\"Trying Out Tomorrow’s WordPress Today\" target=\"_blank\">Trying Out Tomorrow’s WordPress Today</a> </strong> from <strong><a href=\"http://www.slideshare.net/DrewAPicture\" target=\"_blank\">DrewAPicture</a></strong> </div>\n<p>TryWPBeta is a locked down, vanilla install of WordPress trunk using Multisite. To login to the site, use the following credentials.</p>\n<ul>\n<li><strong>Username</strong>: wcpdx</li>\n<li><strong>Password</strong>: wcpdx15</li>\n</ul>\n<p>I asked Jaynes what inspired him to create the site, &#8220;The inspiration for TryWPBeta is to actually have a place for core contributors to test patches on mobile devices, because setting up a tunnel to a local development setup is difficult and a high barrier for a lot of people.&#8221;</p>\n<p>The idea is to make it possible to spin up a site using trunk (Bleeding edge version of WordPress), apply a specific patch and then freeze it in time so that we can point people there to test on mobile devices,&#8221; Jaynes told the Tavern.</p>\n<p>While you can&#8217;t install themes and plugins yet, the site gives users an opportunity to test new features without worrying about breaking the site. Thanks to TryWPBeta, I was able to test the new <a href=\"https://core.trac.wordpress.org/changeset/34903\">Post oEmbed feature</a> in 4.4.</p>\n<a href=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/TestingPostoEmbeds.png\"><img class=\"size-full wp-image-48714\" src=\"http://i0.wp.com/wptavern.com/wp-content/uploads/2015/10/TestingPostoEmbeds.png?resize=1025%2C458\" alt=\"Testing oEmbeds of Posts\" /></a>Testing oEmbeds of Posts\n<p>Jaynes started the project at 10up&#8217;s company summit. So far, Scott Reilly, John Blackbourn, Zach Brown, Morgan Estes, and Chris Weigman have contributed to the project. The site is hosted on a DigitalOcean droplet and updates hourly. He stresses that the site is a work in progress and not quite ready for prime time, &#8220;There’s a couple features I’d like to add to make it more robust first,&#8221; Jaynes said.</p>\n<p>Unlike <a href=\"https://demo.joomla.org/\">Joomla</a>, WordPress doesn&#8217;t have a dedicated demo site for users to test drive the software. While I like the idea behind TryWPBeta, there are a few things I&#8217;d like to see added to make it more useful. For instance, a list of items to test that users can check off. Also, an easy way to provide feedback on the listed items that is sent to a place where core developers will read it.</p>\n<p>Ultimately, I&#8217;d like to see the WordPress Beta Testing plugin extended to have the features I mentioned above. Between the communication challenges and setting up the environment, the beta testing process in WordPress is not as easy and streamlined as it could be. What ideas do you have that would help increase the testing audience and make the process easier?</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 27 Oct 2015 00:37:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"WPTavern: VersionPress Raises $400K in Seed Funding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48709\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://wptavern.com/versionpress-raises-400k-in-seed-funding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2780:\"<p><a href=\"http://versionpress.net/\">VersionPress</a>, a version control plugin for WordPress, has <a href=\"http://blog.versionpress.net/2015/10/seed-funding/\">raised $400K in seed funding</a> from five investors, led by <a href=\"http://www.credoventures.com/\">Credo Ventures</a> based in Prague. In July of 2014, VersionPress conducted a <a href=\"http://wptavern.com/versionpress-misses-crowdfunding-goal-by-14-5k\">crowdfunding campaign</a> to raise $30K. However, the team raised only <strong>45% of the $30,000</strong> funding goal.</p>\n<p>The team pressed on and released the first version back in January. Since then, the team has relied on funding from the <a href=\"http://versionpress.net/\">Early Access Program</a>. Borek Bernard, the lead developer of VersionPress, says the influx of cash will help fuel rapid development:</p>\n<blockquote><p>First and foremost, it means that we will be able to develop VersionPress at a more rapid pace. What we currently have in the <a href=\"http://blog.versionpress.net/2015/10/versionpress-2-0-released/\">recently released v2.0</a> is a great start but the vision and the technical challenge are just so large that this new fuel will is more than welcome. We have many cool features planned and this will allow us to deliver them in a timely manner.</p></blockquote>\n<p>The funding comes on the heels of <a href=\"http://blog.versionpress.net/2015/10/versionpress-2-0-released/\">VersionPress 2.0</a> which includes, database synchronization functionality and an updated user interface that is completely JavaScript based, along with a number of other features. In addition to funding, Bernard says talking to investors gives him a fresh perspective on the project:</p>\n<blockquote><p>One big benefit of talking to investors is that it provides a fresh perspective on the problems one is trying to solve, how to solve them, for whom, etc. Speaking to them made us realize a couple of important things which will greatly benefit our users down the road.</p></blockquote>\n<p>VersionPress joins a growing list of WordPress products and services that have raised venture capital. In 2014, <a title=\"http://wordpress.org/plugins/coschedule-by-todaymade/\" href=\"http://wordpress.org/plugins/coschedule-by-todaymade/\">CoSchedule</a>, the editorial workflow and activity scheduling plugin, <a title=\"http://coschedule.com/blog/coschedule-series-a-funding/\" href=\"http://coschedule.com/blog/coschedule-series-a-funding/\">secured $500K</a> in a Series A round of funding. Prior to being acquired by Automattic, <a href=\"http://wptavern.com/wordpress-service-provider-bruteprotect-secures-funding-forms-parka-llc\">BruteProtect secured a round of funding</a> from a private angel investor in California.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 26 Oct 2015 20:00:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Matt: .Ly Domains\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=45516\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"http://ma.tt/2015/10/ly-domains/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:154:\"<p>Priceonomics on <a href=\"http://priceonomics.com/the-rise-and-fall-of-ly/\">The Rise and Fall of .Ly</a>. Some of my favorite domains I own are .ly.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 26 Oct 2015 19:04:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"WPTavern: Nikhil Vimal Acquires Front End Registration and Login Forms Plugin From Pippin Williamson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48695\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"http://wptavern.com/nikhil-vimal-acquires-front-end-registration-and-login-forms-plugin-from-pippin-williamson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2679:\"<p>Nikhil Vimal, who runs <a href=\"https://techvoltz.com/\">Techvoltz.com</a>, a WordPress development agency, <a href=\"https://techvoltz.com/blog/2015/10/23/new-plugin-front-end-registration-and-login-forms-plugin/\">is the new owner</a> of the <a href=\"https://techvoltz.com/downloads/front-end-registration-login-forms-plugin/\">Front End Registration and Login Forms Plugin</a> created by Pippin Williamson. Earlier this month, Williamson put the plugin up for sale and noted that it needed some development work.</p>\n<blockquote class=\"twitter-tweet\" width=\"550\"><p lang=\"en\" dir=\"ltr\">I would like to sell my Frontend Registration and Login Forms plugin. <a href=\"https://t.co/HLGc8OVxq4\">https://t.co/HLGc8OVxq4</a> &#8211; It needs some work. Interested? Ping me</p>\n<p>&mdash; Pippinsplugins (@pippinsplugins) <a href=\"https://twitter.com/pippinsplugins/status/651489362052431872\">October 6, 2015</a></p></blockquote>\n<p></p>\n<p>The plugin was created in December of 2011, when Williamson <a href=\"https://pippinsplugins.com/creating-custom-front-end-registration-and-login-forms/\">published a tutorial</a> that explains how to create custom front end registration and login forms for WordPress. Although Vimal is participating in the commercial plugin space by selling a <a href=\"https://ninjaforms.com/extensions/slack/\">Slack add-on for Ninja Forms</a>, this acquisition marks the first plugin sold directly from his site.</p>\n<p>With the acquisition, <a href=\"https://pippinsplugins.com/nikhil-vimal-adopts-front-end-registration-and-login-forms-plugin/\">Williamson notes</a> that existing customers will no longer be able to renew license keys on <a href=\"https://pippinsplugins.com\">Pippinsplugins.com</a>. A complete customer list was given to Vimal and Williamson is no long providing support.</p>\n<p>When the opportunity presented itself to adopt a plugin created by Williamson, Vimal jumped on it, &#8220;Shortly after I saw his tweet, I quickly contacted Pippin. His work is something I’ve always looked up to. His work on plugins has inspired me to pursue the plugin/product market,&#8221; Vimal said.</p>\n<p>Licenses start at $10 for single sites, $20 for two to five sites, and $35 for an unlimited number of sites. Vimal says that he is working on a new version with changes in design, functionality, and more. The plugin will also receive its own dedicated site with a change in branding.</p>\n<p>It will be interesting to see what changes Vimal has in store for the plugin. Until then, existing customers from Pippinsplugins.com should watch their inbox for details on renewing their subscription to TechVoltz.com.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 23 Oct 2015 20:02:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WPTavern: WordPress 4.4 Beta 1 Released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48687\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://wptavern.com/wordpress-4-4-beta-1-released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4051:\"<p>After more than eight weeks in development, <a href=\"https://wordpress.org/news/2015/10/wordpress-4-4-beta-1/\">WordPress 4.4. beta 1 is available</a> for testing. With over <a href=\"https://github.com/WordPress/WordPress/compare/4.3-branch...master\">1,600 commits</a> since WordPress 4.3&#8217;s release, it&#8217;s important that 4.4 be tested by as many people as possible.</p>\n<p>Commits are bug fixes, additional functions or filters, new features, corrected typos, and anything inbetween. As a rule of thumb, think of commits as an incremental improvement to WordPress core.</p>\n<p>There are three new distinct user facing features in WordPress 4.4.</p>\n<ul>\n<li><strong>Twenty Sixteen</strong> &#8211; Twenty Sixteen is a <a href=\"http://wptavern.com/first-look-at-the-twenty-sixteen-default-wordpress-theme\">new default theme</a> with a simple layout and color scheme designed by <a href=\"https://profiles.wordpress.org/iamtakashi\">Takashi Irie,</a> who also designed the <a href=\"http://takashiirie.com/2013/12/13/twenty-fourteen-wordpress-3-8-parker/\">Twenty Fourteen</a> and <a href=\"http://takashiirie.com/2015/03/19/twenty-fifteen-the-wordpress-default-theme-for-2015/\">Twenty Fifteen</a> default themes.</li>\n<li><strong>Responsive Images</strong> &#8211; WordPress will automatically deliver a <a href=\"https://make.wordpress.org/core/2015/09/30/responsive-images-merge-proposal/\">more appropriate image</a> to users depending on a variety of conditions like screen size, view port size, and screen resolution.</li>\n<li><strong>oEmbed Posts</strong> &#8211; In addition to YouTube, WordCamp.TV and other whitelisted providers, users will be able to easily embed content from almost any site that supports the <a href=\"http://oembed.com/\">oEmbed standard</a>, including <a href=\"https://make.wordpress.org/core/2015/09/30/feature-plugin-merge-proposal-oembed/\">WordPress sites</a>.</li>\n</ul>\n<p>Scott Taylor, who is leading the 4.4 development cycle, gives developers at least four reasons to be excited.</p>\n<ul>\n<li><strong>REST API (phase 1) </strong>— The underlying infrastructure of the WordPress REST API <a href=\"https://wordpress.org/plugins/rest-api/\">plugin</a> is <a href=\"https://make.wordpress.org/core/2015/09/21/wp-rest-api-merge-proposal/\">included in WordPress 4.4</a>. Plugin authors can take advantage of this by adding custom endpoints.</li>\n<li><strong>Term Metadata </strong>— Taxonomy term metadata <a href=\"https://make.wordpress.org/core/2015/09/04/taxonomy-term-metadata-proposal/\">is included</a> in WordPress 4.4. Developers who are using a plugin to implement term metadata should <a href=\"https://make.wordpress.org/core/2015/09/22/preparing-your-plugins-and-your-client-sites-for-termmeta/\">read this post</a> on how to prepare for the switch. Also, the underlying <a href=\"https://make.wordpress.org/core/2015/09/22/preparing-your-plugins-and-your-client-sites-for-termmeta/\">WP_Term class</a> improves caching when working with terms.</li>\n<li><strong>Improved <code>&lt;title&gt;</code> output</strong> — <code>wp_title()</code> is deprecated; WordPress will <a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">handle the rendering</a> of the document title automatically.</li>\n<li><strong>Comments </strong>— Comment queries are now split for performance. Also, the underlying <code>WP_Comment</code> class improves caching and introduces strong-typing. (<a href=\"https://core.trac.wordpress.org/ticket/8071\">#8071</a>, <a href=\"https://core.trac.wordpress.org/ticket/32619\">#32619</a>)</li>\n</ul>\n<p>Users are highly encouraged to test WordPress 4.4 and report bugs to the <a href=\"https://wordpress.org/support/forum/alphabeta\">Alpha/Beta section</a> of the support forums. Remember, the beta is software still in development and therefor not recommend for use on a production site. WordPress 4.4 <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\">is scheduled</a> for release on December 8th.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 23 Oct 2015 18:57:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WPTavern: WPWeekly Episode 210 – Great Scott!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48680\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wptavern.com/wpweekly-episode-210-great-scott\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2994:\"<p>In this time travel inspired episode of WordPress Weekly, <a href=\"http://marcuscouch.com/\">Marcus Couch</a> and I catch you up on the news of the week. I start the show by sharing my experience attending the first WordCamp Hampton Roads in Virginia Beach, VA. While in Virginia Beach, I visited and worked from the <a href=\"http://www.rocketgenius.com/\">Rocketgenius</a> office and observed how the team behind Gravity Forms works on a daily basis. In the show, I explain why I think the company&#8217;s setup is the best of both worlds for distributed workers.</p>\n<p>We discuss what the future of WordPress may be like 10 years from now and whether or not it&#8217;s time for the XML-RPC protocol to be removed from WordPress. We end the show with the plugin picks of the week.</p>\n<h2>Stories Discussed:</h2>\n<p><a href=\"http://wptavern.com/anyssa-ferreira-awarded-the-kim-parsell-memorial-scholarship\">Anyssa Ferreira Awarded the Kim Parsell Memorial Scholarship</a><br />\n<a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">WP_Title is deprecated in WordPress 4.4</a><br />\n<a href=\"http://torquemag.io/what-will-wordpress-be-like-in-next-10-years/\">What Will WordPress Be Like In Next 10 Years?</a> Here’s an <a href=\"http://torquemag.io/what-will-wordpress-be-like-in-next-10-years/#comment-2299329174\">awesome comment</a> on the article.<br />\n<a href=\"http://wptavern.com/its-time-for-xml-rpc-in-wordpress-to-hit-the-road\">It’s Time for XML-RPC in WordPress to Hit the Road</a></p>\n<h2>Plugins Picked By Marcus:</h2>\n<p><a href=\"https://wordpress.org/plugins/woo-price-per-word/\">WooCommerce Price Per Word</a> allows customers to upload a document to the product page. The word-count of the document is used to calculate the price based on the price-per-word entered for the product.</p>\n<p><a href=\"https://wordpress.org/plugins/shortcode-tester/\">Shortcode Tester</a> is a post editor tool for WordPress developers that displays the HTML generated by WordPress shortcodes in a popup window. You can quickly view the generated HTML without having to view the entire post.</p>\n<p><a href=\"https://wordpress.org/plugins/beehive/\">Beehive cells</a> arranges the content on your front page into a series of hexagonal cells similar to a beehive.</p>\n<h2>WPWeekly Meta:</h2>\n<p><strong>Next Episode:</strong> Wednesday, October 28th 9:30 P.M. Eastern</p>\n<p><strong>Subscribe To WPWeekly Via Itunes: </strong><a href=\"https://itunes.apple.com/us/podcast/wordpress-weekly/id694849738\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via RSS: </strong><a href=\"http://www.wptavern.com/feed/podcast\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Subscribe To WPWeekly Via Stitcher Radio: </strong><a href=\"http://www.stitcher.com/podcast/wordpress-weekly-podcast?refid=stpr\" target=\"_blank\">Click here to subscribe</a></p>\n<p><strong>Listen To Episode #210:</strong><br />\n</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Oct 2015 09:06:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"WPTavern: WordPress 4.4 to Deprecate the wp_title Function\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48669\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wptavern.com/wordpress-4-4-to-deprecate-the-wp_title-function\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1711:\"<p>A year after <a href=\"https://make.wordpress.org/core/2014/10/29/title-tags-in-4-1/\">WordPress 4.1 introduced</a> a new way to display titles in themes, WordPress 4.4 <a href=\"https://make.wordpress.org/core/2015/10/20/document-title-in-4-4/\">will deprecate</a> <code>wp_title()</code>. With <a href=\"https://core.trac.wordpress.org/changeset/35294\">the change</a>, plugin authors will be able to check for theme support and use a few new filters to manipulate the title. The new filters are as follows:</p>\n<ul>\n<li><code>\'pre_get_document_title\'</code> short-circuits <code>wp_get_document_title()</code> if it returns anything other than an empty value.</li>\n<li><code>\'document_title_separator\'</code> filters the separator between title parts.</li>\n<li><code>\'document_title_parts\'</code> filters the parts that make up the document title, passed in an associative array.</li>\n</ul>\n<p>Theme authors should no longer use <code>wp_title()</code> to generate document titles. If theme authors add <code>add_theme_support( ‘title-tag’ );</code> to the <code>after_setup_theme</code> callback, the title will be handled natively via an internal WordPress core function. If you use a theme that utilizes wp_title and have <a href=\"https://codex.wordpress.org/WP_DEBUG\">wp_debug enabled</a> in WordPress 4.4, you&#8217;ll see a deprecation notice.</p>\n<p>In general, users who upgrade to WordPress 4.4 won&#8217;t notice a difference. However, with nearly a <a href=\"https://make.wordpress.org/core/version-4-4-project-schedule/\">month to go</a> before WordPress 4.4 is released, theme developers are highly encouraged to check and update their themes accordingly.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Oct 2015 07:52:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WPTavern: Anyssa Ferreira Awarded the Kim Parsell Memorial Scholarship\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48662\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wptavern.com/anyssa-ferreira-awarded-the-kim-parsell-memorial-scholarship\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2542:\"<p>Back in August, the WordPress Foundation <a href=\"http://wptavern.com/the-wordpress-foundation-begins-accepting-applications-for-the-kim-parsell-memorial-scholarship\">began accepting applications</a> for the <a href=\"http://wptavern.com/the-wordpress-foundation-creates-a-traveling-scholarship-in-memory-of-kim-parsell\">Kim Parsell Memorial Scholarship</a>. The scholarship not only serves as a memorial, but gives one woman in the WordPress community an opportunity to attend WordCamp US with financial assistance from the foundation.</p>\n<p><a href=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/AnyssaFerreira.jpg\"><img class=\"wp-image-48664 size-full\" src=\"http://i2.wp.com/wptavern.com/wp-content/uploads/2015/10/AnyssaFerreira.jpg?resize=256%2C256\" alt=\"AnyssaFerreira\" /></a>Anyssa FerreiraThe WordCamp US website <a href=\"https://2015.us.wordcamp.org/2015/10/14/announcing-the-kim-parsell-memorial-scholarship-winner-anyssa-ferreira/\">announced</a> Anyssa Ferreira, a Brazilian designer, feminist, and WordPress community activist as the first recipient of the scholarship. Ferreira organized and spoke at WordCamp São Paulo in 2014 and designed the event&#8217;s website. She was the only woman to speak and volunteer at the event.</p>\n<p>In 2015, Ferreira spoke at WordCamp Belo Horizonte&nbsp;on women working with WordPress in the Brazilian community. According to the post, Ferreira continues to play an active role encouraging women to get involved with WordPress and the technology field in Brazil:</p>\n<blockquote><p>She has worked to debunk the myth that women have no interest in WordPress and web development. She has explored why women were not participating, speaking personally with many female programmers, designers and other WordPress professionals about this important topic. She regularly invites women to attend her local WordPress meetup, and works to ensure that they feel welcome and wanted when they do attend.</p></blockquote>\n<p>Not only does Ferreira fulfill the <a href=\"http://wptavern.com/the-wordpress-foundation-begins-accepting-applications-for-the-kim-parsell-memorial-scholarship\">scholarship&#8217;s requirements</a>, she&#8217;s the type of woman Kim Parsell would love to meet and talk to in person.</p>\n<p>Thanks again to Jen Mylo, the WordPress foundation, and Matt Mullenweg for not only creating the scholarship, but for providing an opportunity for people like Ferreira to experience the largest annual WordPress conference first-hand.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Oct 2015 23:00:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"WPTavern: It’s Time for XML-RPC in WordPress to Hit the Road\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48643\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wptavern.com/its-time-for-xml-rpc-in-wordpress-to-hit-the-road\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8672:\"<hr />\n<p><a href=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/JesseNicklesAvatar.jpg\"><img class=\"alignright wp-image-48651 size-thumbnail\" src=\"http://i1.wp.com/wptavern.com/wp-content/uploads/2015/10/JesseNicklesAvatar.jpg?resize=150%2C150\" alt=\"Jesse Nickles Founder of Little Bizzy\" /></a>This post was contributed by <a href=\"https://www.linkedin.com/pub/jesse-nickles/61/807/435\" target=\"_blank\">Jesse Nickles</a>. He is the founder of <a href=\"https://www.littlebizzy.com\" target=\"_blank\">LittleBizzy</a>, a managed WordPress hosting company, and a part-time blogger at <a href=\"https://collegetimes.co/\" target=\"_blank\">CollegeTimes</a>, where he gets into trouble exploring controversial issues.</p>\n<hr />\n<p>Two weeks ago, I <a href=\"https://www.littlebizzy.com/blog/disable-xml-rpc\">announced</a> that all current and future domains hosted at <a href=\"https://www.littlebizzy.com\" target=\"_blank\">LittleBizzy</a> would have <a href=\"https://codex.wordpress.org/XML-RPC_Support\" target=\"_blank\">XML-RPC</a> permanently blocked due to the non-stop problems it was causing. In the announcement, we recommended that other WordPress users across the globe urgently consider blocking the technology on their own web servers as well.</p>\n<h2>XML-RPC in WordPress Has a Troubled Past</h2>\n<p>Days after the announcement<em>,</em> Daniel Cid, founder and CTO of Sucuri, and Mark Maunder, CEO of WordFence, <a href=\"https://blog.sucuri.net/2015/10/brute-force-amplification-attacks-against-wordpress-xmlrpc.html\" target=\"_blank\">confirmed</a> the <a href=\"https://www.wordfence.com/blog/2015/10/wordpress-xml-rpc-brute-force-attacks-amplification-multiple-logins/\" target=\"_blank\">reports</a> that a new type of Brute Force login attack was being carried out on a massive scale against WordPress sites around the world using XML-RPC. Apparently, hackers have wised up to the fact that <code>wp-login.php</code> is often well protected.</p>\n<p>Perhaps more shocking than this latest wave of attacks is that <em>they are nothing new,</em> as Sucuri previously <a href=\"https://blog.sucuri.net/2014/07/new-brute-force-attacks-exploiting-xmlrpc-in-wordpress.html\">reported a similar wave of attacks</a> in July 2014. Let&#8217;s also not forget the wide-scale use of XML-RPC to perform <a href=\"http://www.webopedia.com/TERM/D/DDoS_attack.html\">DDoS attacks</a> on WordPress websites <a href=\"https://www.incapsula.com/blog/wordpress-security-alert-pingback-ddos.html\">reported by Incapsula</a> in 2013. Combine these reports with <a href=\"https://www.google.com/search?hl=en&q=site%3Awordpress.org%2Fsupport%2F+xml-rpc+attack\">hundreds of posts</a> on the wordpress.org support forums and <a href=\"https://www.google.com/search?hl=en&q=site%3Astackoverflow.com+xml-rpc+attack\">Stack Overflow</a> and a picture is painted of years of unhindered attacks against millions of WordPress sites due to this single PHP file, yikes!</p>\n<blockquote><p>It is common sense to take a method and try it. If it fails, admit it frankly and try another. But above all, try something. ― Franklin D. Roosevelt</p></blockquote>\n<p>I didn&#8217;t expect to be the one to advocate that XML-RPC be removed from WordPress but that&#8217;s exactly what I&#8217;m doing: <strong>It&#8217;s time for WordPress XML-RPC to hit the road, for good.</strong></p>\n<h2>XML-RPC Was a Conscious Mistake</h2>\n<p>I understand that thousands of volunteer hours have been invested into XML-RPC support for the WordPress platform, as is the nature of open-source communities. I sincerely respect and thank said programmers and volunteers for creating a very cool way to remotely connect to a website built on WordPress. But sometimes, we need to be honest with ourselves and admit when something isn&#8217;t working; <em>This one of those times.</em></p>\n<p>If you&#8217;re wondering why I&#8217;m framing the XML-RPC mess as a conscious mistake, <strong>that&#8217;s because it was</strong>. Three years ago, Andrew Nacin, a WordPress core developer, <a href=\"https://core.trac.wordpress.org/ticket/21509\" target=\"_blank\">announced</a> in a trac ticket that, <em>&#8220;Security is no greater a concern than the rest of core. There is no longer a compelling reason to disable [XML-RPC] by default. It’s time we should remove the option entirely.&#8221;</em></p>\n<p>Three years later, millions of WordPress sites have been hacked, crashed, or attacked, due to XML-RPC. It’s undeniable that removing the option to disable it (and/or enabling it by default) was wrong.</p>\n<h2>Out of Touch With the Average User</h2>\n<p>When broken down, it&#8217;s a classic case of extremely talented and intelligent software developers being out of touch with the millions of <strong>average Joes</strong> that use WordPress and have no idea what XML-RPC is. When developers inevitably argue that there are several free security plugins available that can help combat XML-RPC attacks, they completely miss the point: <u>the majority of webmasters being attacked are the same ones who don&#8217;t even know what a security plugin is or how to use it</u>.</p>\n<p>Ironically, the one good <a href=\"https://wordpress.org/plugins/bruteprotect/\" target=\"_blank\">standalone plugin</a> that fought Brute Force login attempts was <a href=\"http://wptavern.com/automattic-acquires-parka-llc-the-creators-of-bruteprotect\" target=\"_blank\">foolishly</a> <a href=\"http://wptavern.com/jetpack-protect-blocks-brute-force-amplification-attacks\" target=\"_blank\">combined</a> into the controversial Jetpack plugin, which most serious webmasters would never consider installing.</p>\n<p>The premise, of course, for XML-RPC support in WordPress is a noble idea that sounds versatile: it allows, as previously mentioned, remote connections (logins, usually) to any given domain that is running a WordPress installation. In reality, however, this XML-RPC functionality is primarily used for three common reasons:</p>\n<ol>\n<li>Pingbacks/trackbacks (great for Viagra spam, <a href=\"http://wptavern.com/wptavern-was-trackbacked-to-death\" target=\"_blank\">DDoS attacks</a>, and not much else)</li>\n<li>Jetpack (an all-in-one solution to <a href=\"http://blog.arunas.co/project-measure-jetpack/\" target=\"_blank\">slowing down</a> and/or bloating your WordPress site with third-party scripts)</li>\n<li>WP mobile apps (I&#8217;m not sure who blogs from their smart phone, but the <a href=\"https://itunes.apple.com/us/app/yo./id834335592\" target=\"_blank\">YO app</a> is literally rated higher than <a href=\"https://itunes.apple.com/en/app/wordpress/id335703880\" target=\"_blank\">WordPress</a> on the iTunes store, and the user reviews of the <a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\" target=\"_blank\">Android</a> version repeatedly point to XML-RPC login issues)</li>\n</ol>\n<p>Do recall that the WordPress backend is now responsive, which means you can login to your blog from practically any mobile device; this wasn’t the case when the native WordPress mobile apps were first launched. And arguably, the vast majority of WordPress sites have absolutely no use for pingbacks, trackbacks, or XML-RPC in general.</p>\n<h2>XML-RPC Needs to Be Disabled or Removed From WordPress</h2>\n<p><u>The logical conclusion should be immediately clear:</u> XML-RPC needs to die a quick death in the WordPress community, or at least be shifted into an optional (non-default) plugin or otherwise, in order to bring an immediate and measurable improvement to the security and stability of not only WordPress sites, but the internet overall.</p>\n<p>Perhaps Jeff Chandler <a href=\"http://wptavern.com/how-to-prevent-wordpress-from-participating-in-pingback-denial-of-service-attacks\" target=\"_blank\">said it best</a>:</p>\n<blockquote><p>WP Tavern is no stranger to denial of service attacks due to pingbacks and trackbacks. In 2010, I explained how WP Tavern was trackbacked to death. Shortly after the website came back online, I disabled both as I feared they might end up taking the site down again. A few years have gone by and I’ve re-enabled pingbacks and trackbacks with no ill effects. However, I wonder if it’s time to kill them once and for all, not just on WP Tavern but in WordPress in general.</p></blockquote>\n<p>Sometimes, we as developers and others with a technical mindset get caught up in solving the challenge of the day, when what is really needed is to step back and take a more philosophical look at the bigger picture. Is this thing worth our time, or is it causing more problems than solutions? When it comes to XML-RPC in WordPress, the conclusion is obvious.</p>\n<div id=\"epoch-width-sniffer\"></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 21 Oct 2015 21:33:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Jeff Chandler\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Post Status: Playing with type\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=14750\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://poststatus.com/playing-with-type/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:8443:\"<p>I am far from a typography expert, but I do love playing with type. I delight in a great reading experience, and I strongly believe typography is the key to creating a great reading experience.</p>\n<p>In my own journeys searching for and choosing typefaces for my projects, I&#8217;ve discovered some great tools, and also some pitfalls of using different delivery services.</p>\n<p>I have <a href=\"http://typography.com\">Typography.com</a> and <a href=\"http://typekit.com\">Typekit</a> accounts, and of course using <a href=\"http://google.com/fonts\">Google Fonts</a> is very simple. Many folks also use <a href=\"http://www.myfonts.com/\">Myfonts</a>, generate their own on <a href=\"http://www.fontsquirrel.com/\">Fontsquirrel</a>, self-host direct from foundries, or use a variety of other methods.</p>\n<p>When you use a font delivery service, where the font is hosted elsewhere, and you simply connect (like Typekit or Typography.com), one of the things you deal with is the authentication of your site with the service that can often cause sad delays in pageload times. Zach Tollman did a great post discussing how <a href=\"https://www.tollmanz.com/typography-coms-cssom-blocking-font-loader/\">Typography.com in particular is not good at handling this authentication</a>, from a performance perspective.</p>\n<p>Given that I host Post Status fonts on Typography.com &#8212; I use Gotham Round, Gotham Condensed, and Sentinel here, and none of them are available anywhere else &#8212; the hit on performance perturbs me. However, I love these fonts and hate to replace them. However, I&#8217;ve lately been doing some research so I can at least test font stacks from Typekit and Google to see how big of an impact it could have.</p>\n<h3>Finding Typefaces</h3>\n<p>Finding quality typefaces is a challenge. There are <em>so many</em> out there, and the differences in quality can be vast. Part of what I love about Typography.com is that the quality of the display and cross-browser rendering is outstanding. Typekit serves typefaces from a variety of foundries, but they too have built great tools over the years to try and ensure quality rendering. Google is more of a mixed bag, though open source typefaces are getting more attention to detail in recent years than ever before.</p>\n<p>By far, my favorite tool for browsing and finding typefaces is <a href=\"https://www.typewolf.com\">Typewolf</a>. Typewolf has PDF guides (free with your email), trending typefaces, sites of the day, and high quality recommendations on when and where to use a particular typeface. A sample resource that&#8217;s outstanding is their list of the <a href=\"https://www.typewolf.com/open-source-web-fonts\">top 30 open source Google fonts</a>. They have many others like that. It&#8217;s definitely a must-visit site when you are considering changing up your site typography.</p>\n<p>You can also browse delivery services directly. Typekit&#8217;s <a href=\"https://typekit.com/lists\">lists</a> are pretty good for narrowing typefaces by their intended purpose. <a href=\"http://justmytype.co/\">Justmytype</a> is another great resource that shows recommended pairings for fonts from Typekit and Typography.com. And of course Google has filters in their directory to help narrow it down, but it&#8217;s still a bit of the wild west, so I usually rely on Googling good pairings for Google.</p>\n<h3>Tinkering with typefaces with real content</h3>\n<p>Once you find some Typefaces you like, then it&#8217;s fun to put them into practice. <a href=\"http://typecast.com/\">Typecast</a> is excellent. You can find fonts from many foundries with a free account, and do all sorts of manipulations to see the typefaces in action, using a variety of font combinations, before you move to your actual site.</p>\n<p><img class=\"aligncenter size-large wp-image-14749\" src=\"https://cdn.poststatus.com/wp-content/uploads/2015/10/typecast-view-752x462.png\" alt=\"typecast-view\" width=\"752\" height=\"462\" /></p>\n<p>Beware, it&#8217;s easy to spend hours in this tool. I love that you can edit the CSS directly, and there are also tools within Typecast to insert particular types of content, so you can have a working prototype pretty quickly.</p>\n<h3>Performance implications</h3>\n<p>Loading fonts is a huge performance issue sometimes. Too many fonts, content blocking loading, time-outs from third party delivery services, and other gotchas can severely impact a site&#8217;s load times.</p>\n<p>Anytime you are looking at new typefaces to use, consider where you can serve them from, whether you can self host them, how the delivery authenticates, and potentially more &#8212; before you get your heart set.</p>\n<p>Some good rules of thumb are this:</p>\n<ul>\n<li>Google is by far the fastest, but you just don&#8217;t have access to some of the greatest font foundries this way, because all Google fonts are free.</li>\n<li>Self hosting is probably similar to or faster than serving them from Google. Most Google fonts are locally cached on lots of folks computers. Self hosting may be better for a more rare font, but for common fonts, Google may actually be faster.</li>\n<li>System fonts are always the fastest, but you might not be able to deliver your preferred typeface if the system the reader is using doesn&#8217;t support the typeface. If using system typefaces, creating thorough font stacks is a necessity. Sometimes, especially for sans-serifs, I&#8217;m tempted to just declare sans-serif, so that the system serves its favorite font &#8212; as Android, Mac, iOS, Windows, et al each have their own defaults. For serifs, I&#8217;d say just use Georgia if using system fonts only <img src=\"https://cdn.poststatus.com/wp-includes/images/smilies/simple-smile.png\" alt=\":)\" class=\"wp-smiley\" /></li>\n<li>Typekit and Myfonts and other delivery services are usually similar in quality, but it&#8217;s one of the slowest options for delivery. Be sure to only use the weights and versions you need, and considering limiting character sets if you can get away with it.</li>\n<li>Have a performance budget for your type. Sometimes you have to make hard choices. Does your body font really need to be a non-system font? What if you just used a single display font to add the character you seek? Can you get away without italics for a certain typeface you&#8217;re using? What about bold? If you use the regular/bold/italic/bold-italic for every typeface, that adds up quickly. Use the bare minimum and add whenever you need to only.</li>\n</ul>\n<h3>Don&#8217;t get too fancy, and consider your tone</h3>\n<p>My biggest mistakes over the years playing with type have been getting too fancy, especially with body copy. Simple is good with type. Especially when choosing body copy, be sure to learn about the typeface you like &#8212; and don&#8217;t just trust your own eye early on &#8212; to see if it&#8217;s an appropriate workhorse typeface.</p>\n<p>With display type, you have more leeway, but consider the mood that the typeface sets. Slabs, serifs, gothic, humanist, and other styles of type each tend to have their own tone that they set. For instance, when you read the New York Times, Georgia is a serious workhorse font, and the custom display font also sets a sober tone. Compared to Vox, for example, which uses a more casual sans-serif body copy and quite decorative display typeface. In both scenarios, readability is very good, but they set a different tone.</p>\n<h3>Learning typography takes time</h3>\n<p>Learning and understanding good typography practices takes time. Many factors are at play to make a typeface look great, and even the greatest typefaces can get screwed up when not used well.</p>\n<p>Learning best practices for things like line length, line height, pairing, and much much more can probably get you farther than what typeface you choose. And different typefaces obviously do better in different settings. The key is to take it slow, learn what you like when you are reading other websites, and see what they are doing that you are not. Also, ask your friends about your choices and get feedback; sometimes just a minor change can make a big difference, and suddenly your design clicks.</p>\n<p>We can easily be blind to our own typography mistakes. If you can limit mistakes and learn the essentials of choosing typefaces and using them well, your websites will look much, much better and your readers will be thankful, even if they never say it.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Oct 2015 17:23:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Brian Krogsgard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"Post Status: Work life balance — Draft podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://poststatus.com/?p=14740\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://poststatus.com/work-life-balance-draft-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1393:\"<p>Welcome to the Post Status Draft podcast, which you can find <a href=\"https://itunes.apple.com/us/podcast/post-status-draft-wordpress/id976403008\">on iTunes</a> and <a href=\"http://simplecast.fm/podcasts/1061/rss\">via RSS</a> for your favorite podcatcher. Brian and his co-host, <a href=\"https://twitter.com/joe_hoyle\">Joe Hoyle</a>, a co-founder and the CTO of <a href=\"https://hmn.md/\">Human Made</a>, discuss some of today’s hottest, current WordPress news.</p>\n<p>In this episode of Draft, Joe and Brian discuss work life balance. We discuss working long hours, managing and preventing burnout, moonlighting and its challenges, side projects, embracing hobbies, and creating exercise routines.</p>\n<a href=\"https://audio.simplecast.fm/18534.mp3\">https://audio.simplecast.fm/18534.mp3</a>\n<p><a href=\"http://audio.simplecast.fm/18534.mp3\">Direct Download</a></p>\n<p>Links</p>\n<ul>\n<li><a href=\"http://www.carriedils.com/overcoming-burnout/\">Overcoming burnout</a></li>\n<li><a href=\"http://dangerousminds.net/comments/photographer_removes_smartphones_from_images_to_show_how_obsessed_we_are_wi\">People without phones in phone poses</a></li>\n<li><a href=\"http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html\">Epic procrastination series</a></li>\n<li><a href=\"http://andyadams.org/why-you-shouldnt-moonlight/\">Don&#8217;t moonlight long-term</a></li>\n</ul>\n<p>&nbsp;</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 16 Oct 2015 13:24:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Katie Richards\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"WPTavern: Akismet 3.1.5 Fixes Critical XSS Security Vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wptavern.com/?p=48619\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wptavern.com/akismet-3-1-5-fixes-critical-xss-security-vulnerability\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1629:\"<p>If you use <a href=\"https://wordpress.org/plugins/akismet/\">Akismet</a> to battle comment spam, make sure it&#8217;s running version 3.1.5 as it patches a critical security vulnerability. Due to the nature of the bug, the Akismet team pushed out auto updates to sites that can accept them. According <a href=\"https://blog.sucuri.net/2015/10/security-advisory-stored-xss-in-akismet-wordpress-plugin.html\">to Sucuri</a>, sites using Akismet 3.1.4 and lower and that have the <strong><em>Convert emoticons like <img class=\"wp-smiley\" src=\"https://blog.sucuri.net/wp-includes/images/smilies/simple-smile.png\" alt=\":-)\" /> and <img src=\"http://s.w.org/images/core/emoji/72x72/1f61b.png\" alt=\"','no'),(5498,'_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c','1447283177','no'),(5499,'_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c','1447239977','no'),(5500,'_transient_timeout_dash_aa95765b5cc111c56d5993d476b1c2f0','1447283177','no'),(5501,'_transient_dash_aa95765b5cc111c56d5993d476b1c2f0','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://wptavern.com/buddypress-2-3-5-patches-privilege-escalation-issue\' title=\'BuddyPress 2.3.5 is available and patches a security vulnerability that may allow privilege escalation for logged-in users. BuddyPress 2.3.4 and previous versions are affected however, versions 2.0.4, 2.1.2, and 2.2.4 include the patch. According to the BuddyPress development team, there is no evidence that the bug has been exploited in the wild. If your WordPress site supports automatic updates to point releases, it will likely be updated by the time you read this post. Slava Abakumov discovered the vulnerability and responsibly disclosed it to the development team. If you run into any issues with the update, you’re encouraged to post on the BuddyPress support forums. \'>WPTavern: BuddyPress 2.3.5 Patches Privilege Escalation Issue</a></li><li><a class=\'rsswidget\' href=\'http://ma.tt/2015/11/arthur-c-clarke-on-distributed-work/\' title=\' I saw the new Steve Jobs movie a few days ago, which I enjoyed as a movie even though the main elements were fiction and it should have been titled something else. But they had an awesome video interview with the amazing Arthur C. Clarke in 1974, which I’ve embedded above, where he said the following right around 0:56. Interviewer: I wonder though, what sort of a life will it be in social terms if our whole life is built around the computer, if we become a computer-dependent society, computer-dependent individuals. ACC: In some ways, but they’ll also enrich our society because it’ll make it possible for us to live anywhere we like. Any businessman, any executive could live almost anywhere on earth and still do his business through a device like this, and this is a wonderful thing, it means we won’t have to be stuck in cities, we can live out in the country or wherever we please, and still carry on complete interaction with human beings, as well as with other computers. Wow, extremely prescient. Remember, this was 1974! The dominant technology companies of today still follow the same office-centric model as when computers took up entire rooms, but the dominant companies of tomorrow will be built and grow in a completely distributed fashion. (And of course, we’re hiring.) See also, from 2012: Automattic, Forbes, and the Future of Work.\'>Matt: Arthur C. Clarke on Distributed Work</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/more-than-250-tickets-still-available-for-wordcamp-us\' title=\'photo credit: vgrigoriu – cc In a little less than a month, the first annual WordCamp US will be underway in Philadelphia, PA. There’s still 251 tickets available to attend the event in person. The schedule and sessions are published and it looks like an informational packed two-day event. There are three tracks available, two of which will have typical length sessions with a third track dedicated to lightning talks. I highly encourage you to view the schedule and create a list of sessions to attend as the first day has over 40 of them. Reed Gustow, one of the event’s primary organizers says they’re expecting a lot of attendees, “We’re expecting 2,000 attendees from across the United States and from many other countries, and it will be a wonderful opportunity to learn, share knowledge and meet others in the amazing WordPress community.” In addition to WordCamp US, there will be a WordPress contributor day on December 6th. During contributor day, people from all walks of life get together and contribute to various parts of the WordPress project whether it’s the support forums, core code, documentation, and more. Mentors will be on hand to help new contributors. Last but not least, the most important information is where to eat a great tasting cheesesteak. After all, it’s one of the things Philadelphia is known for. The WordCamp US organizing team has you covered with a post that describes the different types of cheesesteaks and where to find the best tasting ones. Hotel and venue information for the event is on the WordCamp US website. Unfortunately, I’m not attending the event this year, but Sarah Gooding will be there. If you see her, stop her and say hi. \'>WPTavern: More Than 250 Tickets Still Available for WordCamp US</a></li><li><a class=\'rsswidget\' href=\'http://wptavern.com/a-quarter-of-the-top-10-million-sites-ranked-by-alexa-use-wordpress\' title=\'According to Matthias Gelbmann of W3Techs, 25% of the sites it surveys are using WordPress. The milestone comes two years after reaching the 20% mark. Quarter of the Web The following image shows WordPress’ rapid growth from 13.1% in January 2011 to 25% today. WordPress’ Growth Drupal and Joomla, two other popular open source content management systems combine for 4.9%, slightly less than 1/5th of WordPress. W3Techs counts both self hosted WordPress and WordPress.com sites, “We only count the hosted sites if they are reachable via their own domain (not only as subdomain of wordpress.com), and they must qualify like all other sites in our surveys by getting enough visitors on that separate domain to make it into the top 10 million Alexa sites,” Gelbmann says. This means that only those sites on WordPress.com that use domain mapping and have enough traffic to be in the top 10 million Alexa sites are counted leaving millions of WordPress.com sites uncounted. Only 1.25% of WordPress sites in the survey are hosted at WordPress.com. The Fastest Growing CMS The survey also shows that WordPress is still the fastest growing CMS, “Every 74 seconds a site within the top 10 million starts using WordPress. Compare this with Shopify, the second-fastest growing CMS, which is gaining a new site every 22 minutes,” Gelbmann says. When sites are broken down into languages, WordPress is used on 37.3% of English language sites. Portuguese, Spanish, Swedish and Turkish sites are inbetween 38-40% while Bengali is 51.3% and 54.4% for Bosnian. Only 10.6% of WordPress sites are in Chinese with 6.9% for Korean. About 94% of sites surveyed use a Unix-like operating system such as Ubuntu. Windows servers host 6.2% of WordPress sites making it the most popular CMS running on Windows servers. Matt Mullenweg, Co-founder of the WordPress project, says the largest opportunity for growth is in the 57% of sites not using any identifiable CMS. Earlier this year, we learned that Jetpack is going to play a significant role in WordPress gaining 50% or more of market share. In an interview with Adam Silver on the KitchensinkWP podcast, Mullenweg explains the path to 50% and beyond. The next goal is the majority of websites. We want to get to 50%+ and there’s a lot of work between now and then. As the percentage increases, it gets harder and harder to grow the market share, and we have to grow the market share by doing things we haven’t done in the past – really thinking about the onboarding process, really thinking about the integration with social networks, and with how WordPress works on touch devices, which is going to be the predominant computing platform of the future. These things are going to be really important. What got us here isn’t going to get us there. Once we get to 50%, we can decide something new we want to do Automattic is experimenting with a new side project called Jetpack Onboarding. The project is an attempt to improve WordPress’ new user experience. Hosting companies that choose to implement it can modify, add, or remove steps. Jetpack Onboarding Wizard Keep in mind that W3Techs’ market share numbers are based on the top 10 million sites in Alexa. Fifty percent market share is 5 million of those 10 million sites. Are these the sites WordPress should be targeting with development efforts? Are they more important than the millions of sites not ranked by Alexa? I don’t think so but only time will tell. \'>WPTavern: A Quarter of the Top 10 Million Sites Ranked by Alexa Use WordPress</a></li><li><a class=\'rsswidget\' href=\'http://ma.tt/2015/11/avc-on-tracking/\' title=\'If you listed the habits of successful people, tracking and measuring would be near the top of that list. I see it with people, companies, and teams that I work with. I see it in my own behavior. Fred Wilson writes on Tracking and Measuring. Lack of measurement — picking stats and watching them before and after a launch — is one of the most common mistakes I see product teams make, certainly inside of Automattic.\'>Matt: AVC On Tracking</a></li></ul></div>','no'),(5502,'_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109','1447283178','no'),(5503,'_transient_feed_b9388c83948825c1edaef0d856b7b109','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:117:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"WordPress Plugins » View: Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"https://wordpress.org/plugins/browse/popular/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"WordPress Plugins » View: Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Nov 2015 10:37:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:30:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Akismet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"https://wordpress.org/plugins/akismet/#post-15\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:11:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"15@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"Akismet checks your comments against the Akismet Web service to see if they look like spam or not.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Google Analytics by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/plugins/google-analytics-for-wordpress/#post-2316\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 14 Sep 2007 12:15:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2316@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:124:\"Track your WordPress site easily with the latest tracking codes and lots added data for search result pages and error pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Contact Form 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/contact-form-7/#post-2141\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Aug 2007 12:45:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2141@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Just another contact form plugin. Simple but flexible.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WP Super Cache\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/wp-super-cache/#post-2572\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Nov 2007 11:40:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2572@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"A very fast caching engine for WordPress that produces static html files.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Donncha O Caoimh\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Google XML Sitemaps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/google-sitemap-generator/#post-132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:31:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"132@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"This plugin will generate a special XML sitemap which will help search engines to better index your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Arne Brachhold\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"WP-PageNavi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/wp-pagenavi/#post-363\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 23:17:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"363@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"Adds a more advanced paging navigation interface.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Lester Chan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Wordfence Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/wordfence/#post-29832\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 04 Sep 2011 03:13:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29832@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:138:\"The Wordfence WordPress security plugin provides free enterprise-class WordPress security, protecting your website from hacks and malware.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Wordfence\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Yoast SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://wordpress.org/plugins/wordpress-seo/#post-8321\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 Jan 2009 20:34:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"8321@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:114:\"Improve your WordPress SEO: Write better content and have a fully optimized WordPress site using Yoast SEO plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Hello Dolly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/hello-dolly/#post-5790\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 29 May 2008 22:11:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"5790@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WordPress Importer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/wordpress-importer/#post-18101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 May 2010 17:42:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"18101@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brian Colinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Jetpack by WordPress.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/jetpack/#post-23862\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Jan 2011 02:21:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"23862@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Your WordPress, Simplified.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Tim Moore\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"All in One SEO Pack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/all-in-one-seo-pack/#post-753\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2007 20:08:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"753@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"All in One SEO Pack is a WordPress SEO plugin to automatically optimize your WordPress blog for Search Engines such as Google.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"uberdose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"TinyMCE Advanced\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/tinymce-advanced/#post-2082\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Jun 2007 15:00:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2082@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Enables the advanced features of TinyMCE, the WordPress WYSIWYG editor.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Andrew Ozz\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Advanced Custom Fields\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/advanced-custom-fields/#post-25254\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 17 Mar 2011 04:07:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"25254@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"Customise WordPress with powerful, professional and intuitive fields\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"elliotcondon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"W3 Total Cache\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/w3-total-cache/#post-12073\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 29 Jul 2009 18:46:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"12073@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:132:\"Easy Web Performance Optimization (WPO) using caching: browser, page, object, database, minify and content delivery network support.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Frederick Townes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Regenerate Thumbnails\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://wordpress.org/plugins/regenerate-thumbnails/#post-6743\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 23 Aug 2008 14:38:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"6743@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"Allows you to regenerate your thumbnails after changing the thumbnail sizes.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Alex Mills (Viper007Bond)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WooCommerce - excelling eCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/woocommerce/#post-29860\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Sep 2011 08:13:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"29860@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"WooCommerce is a powerful, extendable eCommerce plugin that helps you sell anything. Beautifully.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WooThemes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"NextGEN Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/nextgen-gallery/#post-1169\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Apr 2007 20:08:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"1169@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:121:\"The most popular WordPress gallery plugin and one of the most popular plugins of all time with over 13 million downloads.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Alex Rabe\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Really Simple CAPTCHA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://wordpress.org/plugins/really-simple-captcha/#post-9542\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Mar 2009 02:17:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"9542@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:138:\"Really Simple CAPTCHA is a CAPTCHA module intended to be called from other plugins. It is originally created for my Contact Form 7 plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Duplicate Post\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/plugins/duplicate-post/#post-2646\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 05 Dec 2007 17:40:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"2646@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Clone posts and pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Lopo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Disable Comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/plugins/disable-comments/#post-26907\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 27 May 2011 04:42:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"26907@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:134:\"Allows administrators to globally disable comments on their site. Comments can be disabled according to post type. Multisite friendly.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Samir Shah\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WP Multibyte Patch\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/wp-multibyte-patch/#post-28395\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 14 Jul 2011 12:22:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"28395@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Multibyte functionality enhancement for the WordPress Japanese package.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"plugin-master\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Black Studio TinyMCE Widget\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/plugins/black-studio-tinymce-widget/#post-31973\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 10 Nov 2011 15:06:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"31973@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"The visual editor widget for Wordpress.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Marco Chiesi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"iThemes Security (formerly Better WP Security)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/better-wp-security/#post-21738\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 22 Oct 2010 22:06:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"21738@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"Protect your WordPress site by hiding vital areas of your site, protecting access to important files, preventing brute-force login attempts, detecting\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Chris Wiegman\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Page Builder by SiteOrigin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/siteorigin-panels/#post-51888\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Apr 2013 10:36:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"51888@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:111:\"Build responsive page layouts using the widgets you know and love using this simple drag and drop page builder.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Greg Priday\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Google Analytics Dashboard for WP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://wordpress.org/plugins/google-analytics-dashboard-for-wp/#post-50539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 10 Mar 2013 17:07:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"50539@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:127:\"Displays Google Analytics reports in your WordPress Dashboard. Inserts the latest Google Analytics tracking code in your pages.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Alin Marcu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Meta Slider\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"https://wordpress.org/plugins/ml-slider/#post-49521\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 14 Feb 2013 16:56:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"49521@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:145:\"Easy to use WordPress slider plugin. Create SEO optimised responsive slideshows with Nivo Slider, Flex Slider, Coin Slider and Responsive Slides.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Matcha Labs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"UpdraftPlus Backup and Restoration\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/updraftplus/#post-38058\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 21 May 2012 15:14:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"38058@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Backup and restoration made easy. Complete backups; manual or scheduled (backup to S3, Dropbox, Google Drive, Rackspace, FTP, SFTP, email + others).\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"David Anderson\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Duplicator\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/duplicator/#post-26607\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 May 2011 12:15:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"26607@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"Duplicate, clone, backup, move and transfer an entire site from one location to another.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Cory Lamle\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Clef Two-Factor Authentication\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"https://wordpress.org/plugins/wpclef/#post-47509\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 27 Dec 2012 01:25:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"47509@https://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:138:\"Modern two-factor that people love to use: strong authentication without passwords or tokens; single sign on/off; magical user experience.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dave Ross\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:46:\"https://wordpress.org/plugins/rss/view/popular\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:12:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Wed, 11 Nov 2015 11:06:19 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:7:\"expires\";s:29:\"Wed, 11 Nov 2015 11:12:32 GMT\";s:13:\"cache-control\";s:0:\"\";s:6:\"pragma\";s:0:\"\";s:13:\"last-modified\";s:31:\"Wed, 11 Nov 2015 10:37:32 +0000\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";}s:5:\"build\";s:14:\"20130708151016\";}','no'),(5504,'_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109','1447283178','no'),(5505,'_transient_feed_mod_b9388c83948825c1edaef0d856b7b109','1447239978','no'),(5506,'_transient_timeout_feed_77fa140e07ce53fe8c87136636f83d72','1447283179','no'),(5507,'_transient_feed_77fa140e07ce53fe8c87136636f83d72','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:117:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress Plugins » View: Newest\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"https://wordpress.org/plugins/browse/new/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress Plugins » View: Newest\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Nov 2015 10:59:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:30:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Another MailChimp Widget\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wordpress.org/plugins/another-mailchimp-widget/#post-90528\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 13:25:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90528@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"Adds a widget that allows your users to sign up for your MailChimp mailing list.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"MotoPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Import YouTube videos as WP Posts\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"https://wordpress.org/plugins/import-youtube-videos-as-wp-post/#post-90510\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 08:48:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90510@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:116:\"Import YouTube videos as WP Posts lets you search for Youtube videos and add them quickly to your Wordpress website.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"enguerranws\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Vampire Character Manager\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/vampire-character/#post-90531\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 13:55:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90531@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"For managing characters for LARPs and online vampire games.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"magent\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"PlanSo Leads\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://wordpress.org/plugins/planso-leads/#post-90593\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 11:19:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90593@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:100:\"PlanSo Leads is the easiest way to capture more leads and increase your site&#039;s conversion rate.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"PlanSo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WOO Codice Fiscale\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://wordpress.org/plugins/woo-codice-fiscale/#post-90657\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 11 Nov 2015 02:01:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90657@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:140:\"WOOCOMMERCE Codice Fiscale FREE (GRATIS) is designed for Italian marketplaces running woocommerce to add CF and P.IVA to orders at checkout.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"andrew_fisher\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WP Custom Data\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/wp-custom-data/#post-90519\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 11:08:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90519@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"Through WP Custom Data you can easily use your custom fields with any theme or plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"kapooo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"RSC MPC\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/plugins/rsv-multiple-page-creator/#post-90455\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 14:00:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90455@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"RSV MPC is plugin for Create Multiple Pages in single click.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Rapid Sort\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Autodealers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/plugins/autodealers/#post-90415\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 15:18:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90415@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:188:\"Voor autobedrijven - Zet eenvoudig uw voorraad online in uw Wordpress website. Kijk voor meer informatie op <a href=\"http://www.autodealers.nl\" rel=\"nofollow\">http://www.autodealers.nl</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"autodealers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Wapuuvatar\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/plugins/wapuuvatar/#post-90641\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 22:43:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90641@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Use Wapuus for your user avatars.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Lee Willis\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Infinite Scroll To TF\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"https://wordpress.org/plugins/infinite-scroll-to-tf/#post-90587\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 04:34:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90587@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:129:\"Add Infinite Scroll to Twenty Fifteen theme easily, animation effect and custom text messages, easy to use, just activate plugin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Alobaidi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Delicious Bean Daifuku\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/plugins/delicious-bean-daifuku/#post-90447\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 02:00:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90447@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"これはただのプラグインではありません。偉大な食欲クリエイターものかのさんによって謳われた食欲のそそる\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"466548\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"VG PostCarousel\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/vg-postcarousel/#post-90583\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 02:52:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90583@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"Responsive Post Carousel for Wordpress with many features!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"vinagecko\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"VG WooCarousel\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/vg-woocarousel/#post-90523\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 11:45:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90523@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"Responsive Product Carousel for WooCommerce with many features!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"vinagecko\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Facebook live chat\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"https://wordpress.org/plugins/face-live-chat/#post-90500\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 09 Nov 2015 02:05:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90500@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:126:\"Created for website ecomerce, Developers and Designers RDCMA can streamline your workflows and help customer contact to admin.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"khicononline9x\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Ionicons Official\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://wordpress.org/plugins/ionicons-official/#post-90461\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 19:56:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90461@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"Add over 900 free and open source mobile, iOS, Android, and social media icons to your wordpress site with the only official Ionicons WordPress plugin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Max Lynch\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"WPRestApiExtensions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/plugins/wprestapiextensions/#post-90462\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 21:41:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90462@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"Extends the WP-REST API with custom read only endpoints.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"larjen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Enhanced Plugin Admin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"https://wordpress.org/plugins/enhanced-plugin-admin/#post-90619\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 18:14:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90619@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"At-a-glance info (last update date, rating, votes) on your site&#039;s plugin page about the plugins you have installed (both active and inactive). Ea\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Marios Alexandrou\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"X-Slider\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/plugins/x-slider/#post-90446\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 01:23:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90446@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Simple, beautiful, responsive and lightweight slider that don&#039;t suck.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"hugooodias\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Brozzme Multiple admin emails\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/plugins/brozzme-multiple-admin-emails/#post-90454\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 13:49:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90454@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Add more than one email address to a website admin notifications settings.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"Benoti\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"native.ad integration\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://wordpress.org/plugins/nativead/#post-90481\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 23:32:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90481@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"This plugins provides the functionality to serve native ads on your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Pedro Ventura\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Protect My Contents\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/plugins/protect-my-contents/#post-90459\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 16:58:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90459@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"Protect the contents of your site with Protect My Contents plugin.\nBlocks the content thieves and deny the copy&#38;paste, CTRL+C.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Mik28\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Ncrease\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/plugins/ncrease/#post-90618\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 10 Nov 2015 17:56:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90618@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:125:\"Conversion rates decrease with every question you ask. But you need to know who your signups are. Ncrease fixes this problem.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"morg5an\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"azurecurve RSS Feed\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/plugins/azurecurve-rss-feed/#post-90444\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 07 Nov 2015 21:32:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90444@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"Provides opposite rss feed to that configured in WordPress; e.g. if WordPress is configured for summary then an alternative feed called detail will be\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"azurecurve\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"Ship200 Multi-Carrier Live Shipping Rates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"https://wordpress.org/plugins/ship200-multi-carrier-live-shipping-rates/#post-90418\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 16:41:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90418@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"Ship200 Multi-Carrier UPS, USPS (Stamps, Endicia), Fedex - Live Shipping Rates Addon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Ship200\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"ST Simple Gallery Shortcode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/plugins/st-simple-gallery-shortcode/#post-90425\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 23:18:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90425@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:134:\"Takes every image attached to your post or page and displays it as a neat masonry grid or carousel/imager fader gallery, via shortcode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"spirit-themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Advanced Testimonial Generator\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://wordpress.org/plugins/advanced-testimonial-generator/#post-90423\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 20:42:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90423@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"Advanced Testimonial generator is a simple but unique plugin for adding Testimonials directely from your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"junaid ashraf\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Simple MailChimp\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/plugins/simple-mailchimp/#post-90408\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 13:26:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90408@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"Add a simple MailChimp form to any page, post or template file using shortcodes. Quick and easy!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"2biazdk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Wp Appointments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/wp-appointments/#post-90405\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Nov 2015 12:21:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90405@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:143:\"With totally AJAX based front &#38; back ends, WP Appointments is a fully managed and flexible tool for building powerful appointments systems.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"webinane\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Letter Template\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://wordpress.org/plugins/letter-template/#post-89439\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 17 Oct 2015 21:41:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"89439@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"Allows visitors to populate business letter template providing their custom attributes via form.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"nobug\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Desire Portfolio Filter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/plugins/desire-portfolio-filter/#post-90463\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 08 Nov 2015 22:25:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"90463@http://wordpress.org/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"Desire Portfolio Filter is designed to allow visitors to filter Jetpack portfolio by type.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"desirelabs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:42:\"https://wordpress.org/plugins/rss/view/new\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Wed, 11 Nov 2015 11:06:20 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:13:\"last-modified\";s:29:\"Mon, 09 Nov 2015 13:25:01 GMT\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:11:\"HIT lax 250\";}s:5:\"build\";s:14:\"20130708151016\";}','no'),(5508,'_transient_timeout_feed_mod_77fa140e07ce53fe8c87136636f83d72','1447283179','no'),(5509,'_transient_feed_mod_77fa140e07ce53fe8c87136636f83d72','1447239979','no'),(5510,'_transient_timeout_dash_de3249c4736ad3bd2cd29147c4a0d43e','1447283179','no'),(5511,'_transient_dash_de3249c4736ad3bd2cd29147c4a0d43e','<h4>Most Popular</h4>\n<h5><a href=\'https://wordpress.org/plugins/updraftplus/\'>UpdraftPlus Backup and Restoration</a></h5>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=updraftplus&amp;_wpnonce=adb5108913&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'UpdraftPlus Backup and Restoration\'>Install</a>)</span>\n<p>Backup and restoration made easy. Complete backups; manual or scheduled (backup to S3, Dropbox, Google Drive, Rackspace, FTP, SFTP, email + others).</p>\n<h4>Newest Plugins</h4>\n<h5><a href=\'https://wordpress.org/plugins/ncrease/\'>Ncrease</a></h5>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=ncrease&amp;_wpnonce=a03a6e7c48&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Ncrease\'>Install</a>)</span>\n<p>Conversion rates decrease with every question you ask. But you need to know who your signups are. Ncrease fixes this problem.</p>\n','no'),(5512,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:5:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.3.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.3.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.3.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.3.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.3.1\";s:7:\"version\";s:5:\"4.3.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":12:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.3.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.3.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.3.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.3.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.3.1\";s:7:\"version\";s:5:\"4.3.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";s:13:\"support_email\";s:26:\"updatehelp42@wordpress.org\";s:9:\"new_files\";s:1:\"1\";}i:2;O:8:\"stdClass\":12:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.5.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.2.5.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.2.5-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.2.5-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.2.5\";s:7:\"version\";s:5:\"4.2.5\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";s:13:\"support_email\";s:26:\"updatehelp42@wordpress.org\";s:9:\"new_files\";s:1:\"1\";}i:3;O:8:\"stdClass\":12:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.1.8.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.1.8.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.1.8-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.1.8-new-bundled.zip\";s:7:\"partial\";s:69:\"https://downloads.wordpress.org/release/wordpress-4.1.8-partial-1.zip\";s:8:\"rollback\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.1.8-rollback-1.zip\";}s:7:\"current\";s:5:\"4.1.8\";s:7:\"version\";s:5:\"4.1.8\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:5:\"4.1.1\";s:13:\"support_email\";s:26:\"updatehelp42@wordpress.org\";s:9:\"new_files\";s:0:\"\";}i:4;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.3.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.3.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.3.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.3.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:0:\"\";s:7:\"version\";s:0:\"\";s:11:\"php_version\";s:3:\"4.3\";s:13:\"mysql_version\";s:5:\"4.1.2\";s:11:\"new_bundled\";s:3:\"4.1\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1447245520;s:15:\"version_checked\";s:5:\"4.1.1\";s:12:\"translations\";a:0:{}}','yes'),(5513,'can_compress_scripts','0','yes'),(5516,'_site_transient_timeout_theme_roots','1447247321','yes'),(5517,'_site_transient_theme_roots','a:3:{s:13:\"twentyfifteen\";s:7:\"/themes\";s:14:\"twentyfourteen\";s:7:\"/themes\";s:14:\"twentythirteen\";s:7:\"/themes\";}','yes'),(5518,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1447245525;s:7:\"checked\";a:3:{s:13:\"twentyfifteen\";s:3:\"1.0\";s:14:\"twentyfourteen\";s:3:\"1.3\";s:14:\"twentythirteen\";s:3:\"1.4\";}s:8:\"response\";a:3:{s:13:\"twentyfifteen\";a:4:{s:5:\"theme\";s:13:\"twentyfifteen\";s:11:\"new_version\";s:3:\"1.3\";s:3:\"url\";s:43:\"https://wordpress.org/themes/twentyfifteen/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/theme/twentyfifteen.1.3.zip\";}s:14:\"twentyfourteen\";a:4:{s:5:\"theme\";s:14:\"twentyfourteen\";s:11:\"new_version\";s:3:\"1.5\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentyfourteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentyfourteen.1.5.zip\";}s:14:\"twentythirteen\";a:4:{s:5:\"theme\";s:14:\"twentythirteen\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentythirteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentythirteen.1.6.zip\";}}s:12:\"translations\";a:0:{}}','yes'),(5519,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1447245524;s:8:\"response\";a:1:{s:17:\"groups/groups.php\";O:8:\"stdClass\":7:{s:2:\"id\";s:5:\"27595\";s:4:\"slug\";s:6:\"groups\";s:6:\"plugin\";s:17:\"groups/groups.php\";s:11:\"new_version\";s:5:\"1.9.0\";s:3:\"url\";s:37:\"https://wordpress.org/plugins/groups/\";s:7:\"package\";s:55:\"https://downloads.wordpress.org/plugin/groups.1.9.0.zip\";s:14:\"upgrade_notice\";s:128:\"This release fixes bugs and introduces improved caching mechanisms which may result in performance improvements for some setups.\";}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:0:{}}','yes');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=464 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (2,4,'_edit_last','16'),(3,4,'_edit_lock','1434438465:33'),(10,9,'_edit_last','1'),(11,9,'_edit_lock','1434438516:33'),(12,9,'groups-groups_read_post','groups_read_post'),(13,11,'_edit_last','33'),(14,11,'_edit_lock','1434441550:33'),(15,11,'groups-groups_read_post','groups_read_post'),(115,27,'_edit_last','1'),(116,27,'_edit_lock','1424795516:33'),(182,36,'_menu_item_type','custom'),(183,36,'_menu_item_menu_item_parent','0'),(184,36,'_menu_item_object_id','36'),(185,36,'_menu_item_object','custom'),(186,36,'_menu_item_target',''),(187,36,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(188,36,'_menu_item_xfn',''),(189,36,'_menu_item_url','http://moped.i.sics.se/'),(191,37,'_menu_item_type','post_type'),(192,37,'_menu_item_menu_item_parent','0'),(193,37,'_menu_item_object_id','4'),(194,37,'_menu_item_object','page'),(195,37,'_menu_item_target',''),(196,37,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(197,37,'_menu_item_xfn',''),(198,37,'_menu_item_url',''),(218,40,'_menu_item_type','post_type'),(219,40,'_menu_item_menu_item_parent','0'),(220,40,'_menu_item_object_id','9'),(221,40,'_menu_item_object','page'),(222,40,'_menu_item_target',''),(223,40,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(224,40,'_menu_item_xfn',''),(225,40,'_menu_item_url',''),(227,41,'_menu_item_type','post_type'),(228,41,'_menu_item_menu_item_parent','0'),(229,41,'_menu_item_object_id','11'),(230,41,'_menu_item_object','page'),(231,41,'_menu_item_target',''),(232,41,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(233,41,'_menu_item_xfn',''),(234,41,'_menu_item_url',''),(242,46,'_edit_last','16'),(243,46,'_edit_lock','1434438537:33'),(247,4,'groups-groups_read_post','groups_read_post'),(248,4,'groups-groups_read_post','groups_read_post'),(249,4,'groups-groups_read_post','groups_read_post'),(250,4,'groups-groups_read_post','groups_read_post'),(251,4,'groups-groups_read_post','groups_read_post'),(252,4,'groups-groups_read_post','groups_read_post'),(253,4,'groups-groups_read_post','groups_read_post'),(254,9,'groups-groups_read_post','groups_read_post'),(255,9,'groups-groups_read_post','groups_read_post'),(256,11,'groups-groups_read_post','groups_read_post'),(257,9,'groups-groups_read_post','groups_read_post'),(258,4,'groups-groups_read_post','groups_read_post'),(259,68,'_edit_lock','1434444382:33'),(260,68,'_edit_last','33'),(261,68,'groups-groups_read_post','groups_read_post'),(272,82,'_wp_attached_file','2014/08/bilen_3rpis.png'),(273,82,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:2201;s:6:\"height\";i:1253;s:4:\"file\";s:23:\"2014/08/bilen_3rpis.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"bilen_3rpis-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"bilen_3rpis-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"bilen_3rpis-1024x582.png\";s:5:\"width\";i:1024;s:6:\"height\";i:582;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:23:\"bilen_3rpis-604x270.png\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(274,82,'_edit_lock','1408609306:1'),(275,27,'_post_restored_from','a:3:{s:20:\"restored_revision_id\";i:81;s:16:\"restored_by_user\";i:1;s:13:\"restored_time\";i:1408544877;}'),(276,27,'_thumbnail_id','145'),(277,86,'_edit_lock','1424793424:33'),(278,86,'_edit_last','1'),(279,91,'_edit_last','1'),(280,91,'_edit_lock','1408628015:1'),(281,93,'_edit_last','16'),(282,93,'_edit_lock','1424695174:33'),(283,95,'_edit_last','1'),(284,95,'_edit_lock','1419325130:16'),(285,97,'_edit_lock','1419325406:16'),(286,97,'_edit_last','16'),(287,101,'_edit_last','16'),(288,101,'_edit_lock','1423644362:16'),(290,93,'_post_restored_from','a:3:{s:20:\"restored_revision_id\";i:105;s:16:\"restored_by_user\";i:1;s:13:\"restored_time\";i:1408609570;}'),(291,82,'_wp_attachment_image_alt','The MOPED model car'),(292,82,'_edit_last','1'),(293,106,'_wp_attached_file','2014/08/RaspberryPi_modelB.jpg'),(294,106,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:900;s:4:\"file\";s:30:\"2014/08/RaspberryPi_modelB.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"RaspberryPi_modelB-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"RaspberryPi_modelB-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"RaspberryPi_modelB-1024x768.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:30:\"RaspberryPi_modelB-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";d:16;s:6:\"credit\";s:19:\"J. M. De Cristofaro\";s:6:\"camera\";s:10:\"NIKON D800\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:1371834359;s:9:\"copyright\";s:19:\"J. M. De Cristofaro\";s:12:\"focal_length\";s:3:\"105\";s:3:\"iso\";s:3:\"200\";s:13:\"shutter_speed\";s:7:\"0.00625\";s:5:\"title\";s:0:\"\";}}'),(295,106,'_wp_attachment_image_alt','Raspberry Pi, model B'),(301,118,'_wp_attached_file','2014/08/autosar_architecture.jpg'),(302,118,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:643;s:6:\"height\";i:600;s:4:\"file\";s:32:\"2014/08/autosar_architecture.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"autosar_architecture-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"autosar_architecture-300x279.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:279;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"autosar_architecture-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(303,127,'_edit_last','16'),(304,127,'_edit_lock','1424767081:16'),(305,136,'_edit_last','1'),(306,136,'_edit_lock','1424767007:16'),(307,145,'_wp_attached_file','2014/08/all_connected.jpg'),(308,145,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1600;s:6:\"height\";i:1186;s:4:\"file\";s:25:\"2014/08/all_connected.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"all_connected-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"all_connected-300x222.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"all_connected-1024x759.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:759;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:25:\"all_connected-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:11:\"violetkaipa\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:23:\"Technology in the hands\";}}'),(309,149,'_wp_attached_file','2014/08/ecm_server_communication.jpg'),(310,149,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:869;s:6:\"height\";i:576;s:4:\"file\";s:36:\"2014/08/ecm_server_communication.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:36:\"ecm_server_communication-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:36:\"ecm_server_communication-300x198.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:36:\"ecm_server_communication-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(311,97,'_post_restored_from','a:3:{s:20:\"restored_revision_id\";i:156;s:16:\"restored_by_user\";i:1;s:13:\"restored_time\";i:1408720887;}'),(312,158,'_wp_attached_file','2014/08/ports_in_pluginSWC.jpg'),(313,158,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1054;s:6:\"height\";i:474;s:4:\"file\";s:30:\"2014/08/ports_in_pluginSWC.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"ports_in_pluginSWC-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"ports_in_pluginSWC-300x134.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:134;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"ports_in_pluginSWC-1024x460.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:460;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:30:\"ports_in_pluginSWC-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(314,162,'_wp_attached_file','2014/08/example_communication.jpg'),(315,162,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:2135;s:6:\"height\";i:1193;s:4:\"file\";s:33:\"2014/08/example_communication.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"example_communication-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"example_communication-300x167.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:167;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"example_communication-1024x572.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:572;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"example_communication-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(318,166,'_wp_attached_file','2014/08/installation_message_pattern.jpg'),(319,166,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:856;s:6:\"height\";i:174;s:4:\"file\";s:40:\"2014/08/installation_message_pattern.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:40:\"installation_message_pattern-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:39:\"installation_message_pattern-300x60.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:60;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:40:\"installation_message_pattern-604x174.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:174;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(328,174,'_wp_attached_file','2014/08/installation_message_example.jpg'),(329,174,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1127;s:6:\"height\";i:173;s:4:\"file\";s:40:\"2014/08/installation_message_example.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:40:\"installation_message_example-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:39:\"installation_message_example-300x46.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:46;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:41:\"installation_message_example-1024x157.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:157;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:40:\"installation_message_example-604x173.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(330,181,'_edit_last','1'),(331,181,'_edit_lock','1423641391:16'),(333,185,'_edit_last','1'),(334,185,'_edit_lock','1419325196:16'),(335,188,'_wp_attached_file','2014/08/server.jpg'),(336,188,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:687;s:6:\"height\";i:500;s:4:\"file\";s:18:\"2014/08/server.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"server-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"server-300x218.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:18:\"server-604x270.jpg\";s:5:\"width\";i:604;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(339,210,'_wp_attached_file','2014/08/kernel_SCU.img'),(341,216,'_wp_attached_file','2014/08/LiPo_charging.jpeg'),(342,216,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:1295;s:6:\"height\";i:730;s:4:\"file\";s:26:\"2014/08/LiPo_charging.jpeg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(343,220,'_edit_lock','1446134707:33'),(344,220,'_edit_last','33'),(345,228,'_wp_attached_file','2014/08/motor_gear.jpg'),(346,228,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:850;s:6:\"height\";i:310;s:4:\"file\";s:22:\"2014/08/motor_gear.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(351,232,'_wp_attached_file','2014/08/5V_dist_board.jpg'),(352,232,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:876;s:6:\"height\";i:311;s:4:\"file\";s:25:\"2014/08/5V_dist_board.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(353,233,'_wp_attached_file','2014/08/adc_board.jpg'),(354,233,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:882;s:6:\"height\";i:311;s:4:\"file\";s:21:\"2014/08/adc_board.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(355,234,'_wp_attached_file','2014/08/can_board.jpg'),(356,234,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:866;s:6:\"height\";i:311;s:4:\"file\";s:21:\"2014/08/can_board.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(357,235,'_wp_attached_file','2014/08/empty_chassis.jpg'),(358,235,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:506;s:6:\"height\";i:380;s:4:\"file\";s:25:\"2014/08/empty_chassis.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(359,236,'_wp_attached_file','2014/08/imu_board.jpg'),(360,236,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:413;s:6:\"height\";i:310;s:4:\"file\";s:21:\"2014/08/imu_board.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(361,237,'_wp_attached_file','2014/08/moped_car1.jpg'),(362,237,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:945;s:6:\"height\";i:708;s:4:\"file\";s:22:\"2014/08/moped_car1.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(363,238,'_wp_attached_file','2014/08/motor_gear1.jpg'),(364,238,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:850;s:6:\"height\";i:310;s:4:\"file\";s:23:\"2014/08/motor_gear1.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(365,239,'_wp_attached_file','2014/08/motor_wires.jpg'),(366,239,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:414;s:6:\"height\";i:310;s:4:\"file\";s:23:\"2014/08/motor_wires.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(367,240,'_wp_attached_file','2014/08/power_dist_cords1.jpg'),(368,240,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:1265;s:6:\"height\";i:311;s:4:\"file\";s:29:\"2014/08/power_dist_cords1.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(369,241,'_wp_attached_file','2014/08/rpi_fasteners.jpg'),(370,241,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:846;s:6:\"height\";i:311;s:4:\"file\";s:25:\"2014/08/rpi_fasteners.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(371,242,'_wp_attached_file','2014/08/rpis.jpg'),(372,242,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:891;s:6:\"height\";i:663;s:4:\"file\";s:16:\"2014/08/rpis.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(373,243,'_wp_attached_file','2014/08/speed_controller_mounting.jpg'),(374,243,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:840;s:6:\"height\";i:415;s:4:\"file\";s:37:\"2014/08/speed_controller_mounting.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(375,244,'_wp_attached_file','2014/08/speed_controller_wires.jpg'),(376,244,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:886;s:6:\"height\";i:315;s:4:\"file\";s:34:\"2014/08/speed_controller_wires.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(377,245,'_wp_attached_file','2014/08/speed_servo_controller.jpg'),(378,245,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:865;s:6:\"height\";i:311;s:4:\"file\";s:34:\"2014/08/speed_servo_controller.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(379,246,'_wp_attached_file','2014/08/ultrasonic.jpg'),(380,246,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:901;s:6:\"height\";i:310;s:4:\"file\";s:22:\"2014/08/ultrasonic.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(381,247,'_wp_attached_file','2014/08/wheel_sensor.jpg'),(382,247,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:815;s:6:\"height\";i:414;s:4:\"file\";s:24:\"2014/08/wheel_sensor.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(383,248,'_wp_attached_file','2014/08/wheel_sensor_cables.jpg'),(384,248,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:413;s:6:\"height\";i:310;s:4:\"file\";s:31:\"2014/08/wheel_sensor_cables.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(385,249,'_wp_attached_file','2014/08/wheel_strips.jpg'),(386,249,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:414;s:6:\"height\";i:310;s:4:\"file\";s:24:\"2014/08/wheel_strips.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(387,253,'_wp_attached_file','2014/08/moped_car_high_res.jpg'),(388,253,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:1001;s:6:\"height\";i:1335;s:4:\"file\";s:30:\"2014/08/moped_car_high_res.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(389,261,'_wp_attached_file','2014/08/WirelessIno.apk'),(390,265,'_wp_attached_file','2014/12/PluginZipFileGenerator-0.0.1-SNAPSHOT.jar'),(391,265,'_edit_lock','1418996923:1'),(392,265,'_edit_last','1'),(398,271,'_wp_attached_file','2014/12/cldc-1.1-java5.0.jar'),(399,271,'_edit_lock','1419239282:1'),(400,271,'_edit_last','1'),(401,273,'_wp_attached_file','2014/12/api-0.0.1-SNAPSHOT.jar'),(402,276,'_wp_attached_file','2014/12/apidocs.zip'),(403,278,'_wp_attached_file','2014/08/ewili13.pdf'),(404,281,'_wp_attached_file','2014/08/dac14.pdf'),(405,283,'_wp_attached_file','2014/08/MOPED.pdf'),(406,287,'_edit_last','16'),(407,287,'_edit_lock','1419325377:16'),(408,289,'_edit_last','16'),(409,289,'_edit_lock','1419325630:16'),(410,296,'_wp_attached_file','2014/08/kernel.img'),(411,11,'groups-groups_read_post','groups_read_post'),(412,11,'groups-groups_read_post','groups_read_post'),(413,11,'groups-groups_read_post','groups_read_post'),(414,11,'groups-groups_read_post','groups_read_post'),(419,4,'groups-groups_read_post','groups_read_post'),(420,4,'groups-groups_read_post','groups_read_post'),(421,4,'groups-groups_read_post','groups_read_post'),(422,4,'groups-groups_read_post','groups_read_post'),(423,4,'groups-groups_read_post','groups_read_post'),(424,4,'groups-groups_read_post','groups_read_post'),(425,4,'groups-groups_read_post','groups_read_post'),(426,4,'groups-groups_read_post','groups_read_post'),(427,4,'groups-groups_read_post','groups_read_post'),(428,4,'groups-groups_read_post','groups_read_post'),(429,4,'groups-groups_read_post','groups_read_post'),(430,4,'groups-groups_read_post','groups_read_post'),(431,4,'groups-groups_read_post','groups_read_post'),(432,4,'groups-groups_read_post','groups_read_post'),(433,4,'groups-groups_read_post','groups_read_post'),(434,4,'groups-groups_read_post','groups_read_post'),(435,4,'groups-groups_read_post','groups_read_post'),(436,4,'groups-groups_read_post','groups_read_post'),(437,4,'groups-groups_read_post','groups_read_post'),(438,4,'groups-groups_read_post','groups_read_post'),(439,4,'groups-groups_read_post','groups_read_post'),(440,4,'groups-groups_read_post','groups_read_post'),(441,4,'groups-groups_read_post','groups_read_post'),(442,4,'groups-groups_read_post','groups_read_post'),(443,4,'groups-groups_read_post','groups_read_post'),(444,328,'_edit_last','16'),(445,328,'_edit_lock','1424694688:33'),(451,328,'_post_restored_from','a:3:{s:20:\"restored_revision_id\";i:330;s:16:\"restored_by_user\";i:16;s:13:\"restored_time\";i:1423217888;}'),(454,357,'_edit_last','16'),(455,357,'_edit_lock','1423221023:16'),(456,365,'_wp_attached_file','2015/02/moped_architecture.jpg'),(457,365,'_wp_attachment_metadata','a:4:{s:5:\"width\";i:1398;s:6:\"height\";i:634;s:4:\"file\";s:30:\"2015/02/moped_architecture.jpg\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";i:0;s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";i:0;s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";i:0;s:3:\"iso\";i:0;s:13:\"shutter_speed\";i:0;s:5:\"title\";s:0:\"\";}}'),(458,365,'_edit_lock','1423643188:16'),(459,127,'_post_restored_from','a:3:{s:20:\"restored_revision_id\";i:370;s:16:\"restored_by_user\";i:16;s:13:\"restored_time\";i:1423644509;}'),(460,11,'groups-groups_read_post','groups_read_post'),(461,68,'groups-groups_read_post','groups_read_post'),(462,68,'groups-groups_read_post','groups_read_post'),(463,68,'groups-groups_read_post','groups_read_post');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=391 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (4,1,'2013-09-12 12:15:57','2013-09-12 12:15:57','[groups_member group=\"Engineers\"]\r\n[application_upload_form]\r\n[/groups_member]\r\n\r\n','Application Upload','','publish','open','open','','application-upload','','','2015-01-15 14:50:17','2015-01-15 13:50:17','',86,'http://moped.i.sics.se/?page_id=4',2,'page','',0),(5,1,'2013-09-12 12:15:57','2013-09-12 12:15:57','[groups_member group=\"Developers\"]\r\n[new_app_registration_form]','Application Upload','','inherit','open','open','','4-revision-v1','','','2013-09-12 12:15:57','2013-09-12 12:15:57','',4,'http://moped.i.sics.se/?p=5',0,'revision','',0),(9,1,'2013-09-12 12:17:42','2013-09-12 12:17:42','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_form]\r\n[/groups_member]','Vehicle Configuration','','publish','open','open','','vehicle-configuration','','','2014-08-20 15:57:43','2014-08-20 14:57:43','',86,'http://moped.i.sics.se/?page_id=9',3,'page','',0),(10,1,'2013-09-12 12:17:42','2013-09-12 12:17:42','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_form]','Vehicle Configuration','','inherit','open','open','','9-revision-v1','','','2013-09-12 12:17:42','2013-09-12 12:17:42','',9,'http://moped.i.sics.se/?p=10',0,'revision','',0),(11,1,'2013-09-12 12:18:07','2013-09-12 12:18:07','[groups_member group=\"Engineers\"]\r\n[vehicle_build_form]\r\n[/groups_member]','Vehicle Manufacture','','publish','open','open','','vehicle-manufactory','','','2015-06-16 09:00:57','2015-06-16 08:00:57','',86,'http://moped.i.sics.se/?page_id=11',4,'page','',0),(12,1,'2013-09-12 12:18:07','2013-09-12 12:18:07','[groups_member group=\"Engineers\"]\r\n[vehicle_build_form]','Vehicle Manufactory','','inherit','open','open','','11-revision-v1','','','2013-09-12 12:18:07','2013-09-12 12:18:07','',11,'http://moped.i.sics.se/?p=12',0,'revision','',0),(27,1,'2013-09-12 14:12:52','2013-09-12 13:12:52','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amending this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments.\r\n\r\nThe platform is based on an RC car, equipped with a distributed control system, consisting of a number of Raspberry Pi (RPi) boards. The goal is to simulate typical behavior of an automotive electronic system, while providing the means for them to be easily upgradable with new software and allowing them to interact with each other and other embedded systems. The basic MOPED version, highlighted in a <a title=\"The MOPED demo movie\" href=\"https://www.youtube.com/watch?v=JJ4RdU0t0kA\" target=\"_blank\">short demo clip</a>, is equipped with two <a title=\"The AUTOSAR consortium\" href=\"http://www.autosar.org/\">AUTOSAR</a>-based RPis for vehicle control and one Linux-based RPi, for communication with a mobile phone to receive driving instructions.\r\n\r\nThe information, collected on this website, consists of hardware configuration descriptions, open-source software binaries, together with installation instructions, needed to make the hardware come alive, as well as a more theoretical part that describes the architectural concepts that have been developed in parallel. Also, this site is intended as a <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems in particular, and FES systems in general.','Home','','publish','closed','open','','home','','','2014-08-25 10:24:34','2014-08-25 09:24:34','',0,'http://moped.i.sics.se/?page_id=27',0,'page','',0),(28,1,'2013-09-12 14:12:52','2013-09-12 13:12:52','<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2013-09-12 14:12:52','2013-09-12 13:12:52','',27,'http://moped.i.sics.se/?p=28',0,'revision','',0),(36,1,'2013-09-12 14:38:24','2013-09-12 13:38:24','','Home','','publish','closed','open','','home','','','2013-09-12 14:44:31','2013-09-12 13:44:31','',0,'http://moped.i.sics.se/?p=36',1,'nav_menu_item','',0),(37,1,'2013-09-12 14:38:24','2013-09-12 13:38:24',' ','','','publish','closed','open','','37','','','2013-09-12 14:44:31','2013-09-12 13:44:31','',0,'http://moped.i.sics.se/?p=37',3,'nav_menu_item','',0),(40,1,'2013-09-12 14:38:24','2013-09-12 13:38:24',' ','','','publish','closed','open','','40','','','2013-09-12 14:44:31','2013-09-12 13:44:31','',0,'http://moped.i.sics.se/?p=40',4,'nav_menu_item','',0),(41,1,'2013-09-12 14:38:24','2013-09-12 13:38:24',' ','','','publish','closed','open','','41','','','2013-09-12 14:44:31','2013-09-12 13:44:31','',0,'http://moped.i.sics.se/?p=41',5,'nav_menu_item','',0),(44,1,'2013-09-12 14:44:59','2013-09-12 13:44:59','<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Vision','','inherit','closed','open','','27-revision-v1','','','2013-09-12 14:44:59','2013-09-12 13:44:59','',27,'http://moped.i.sics.se/?p=44',0,'revision','',0),(45,1,'2013-09-12 14:49:03','2013-09-12 13:49:03','<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2013-09-12 14:49:03','2013-09-12 13:49:03','',27,'http://moped.i.sics.se/?p=45',0,'revision','',0),(46,1,'2013-09-12 14:56:15','2013-09-12 13:56:15','[apps_display_form]','Apps Gallery','','publish','closed','open','','apps-gallery-2','','','2015-01-09 13:59:26','2015-01-09 12:59:26','',86,'http://moped.i.sics.se/?page_id=46',1,'page','',0),(47,1,'2013-09-12 14:56:15','2013-09-12 13:56:15','[apps_display_form]','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2013-09-12 14:56:15','2013-09-12 13:56:15','',46,'http://moped.i.sics.se/?p=47',0,'revision','',0),(48,1,'2013-09-12 15:00:31','2013-09-12 14:00:31','<strong>vision – federated embedded systems</strong>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2013-09-12 15:00:31','2013-09-12 14:00:31','',27,'http://moped.i.sics.se/?p=48',0,'revision','',0),(50,1,'2013-09-12 15:02:34','2013-09-12 14:02:34','<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2013-09-12 15:02:34','2013-09-12 14:02:34','',27,'http://moped.i.sics.se/?p=50',0,'revision','',0),(53,1,'2013-10-10 08:55:33','2013-10-10 07:55:33','&nbsp;\r\n\r\n[groups_member group=\"Developers\"]\r\n\r\n[new_app_registration_form]\r\n\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 08:55:33','2013-10-10 07:55:33','',4,'https://moped.sics.se/?p=53',0,'revision','',0),(54,1,'2013-10-10 08:55:47','2013-10-10 07:55:47','[groups_member group=\"Developers\"]\r\n\r\n[new_app_registration_form]\r\n\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 08:55:47','2013-10-10 07:55:47','',4,'https://moped.sics.se/?p=54',0,'revision','',0),(55,1,'2013-10-10 09:15:24','2013-10-10 08:15:24','[groups_member group=\"Developers\"]\n[new_app_registration_form]\n[/groups_member]','Application Upload','','inherit','closed','open','','4-autosave-v1','','','2013-10-10 09:15:24','2013-10-10 08:15:24','',4,'https://moped.sics.se/?p=55',0,'revision','',0),(56,1,'2013-10-10 09:13:59','2013-10-10 08:13:59','[groups_can group=\"Developers\"]\r\n\r\n[new_app_registration_form]\r\n[/groups_can]\r\n','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:13:59','2013-10-10 08:13:59','',4,'https://moped.sics.se/?p=56',0,'revision','',0),(57,1,'2013-10-10 09:15:26','2013-10-10 08:15:26','[groups_member group=\"Developers\"]\r\n[new_app_registration_form]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:15:26','2013-10-10 08:15:26','',4,'https://moped.sics.se/?p=57',0,'revision','',0),(58,1,'2013-10-10 09:18:14','2013-10-10 08:18:14','[groups_can group=\"Developers\"]\r\n[new_app_registration_form]\r\n[/groups_can]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:18:14','2013-10-10 08:18:14','',4,'https://moped.sics.se/?p=58',0,'revision','',0),(59,1,'2013-10-10 09:21:28','2013-10-10 08:21:28','[groups_non_member group=\"Developers\"]\r\n[new_app_registration_form]\r\n[/groups_non_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:21:28','2013-10-10 08:21:28','',4,'https://moped.sics.se/?p=59',0,'revision','',0),(60,1,'2013-10-10 09:23:15','2013-10-10 08:23:15','[groups_member group=\"Developers\"]\r\n[new_app_registration_form]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:23:15','2013-10-10 08:23:15','',4,'https://moped.sics.se/?p=60',0,'revision','',0),(61,1,'2013-10-10 09:24:44','2013-10-10 08:24:44','[groups_can group=\"Developers\"]\r\n[new_app_registration_form]\r\n[/groups_can]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:24:44','2013-10-10 08:24:44','',4,'https://moped.sics.se/?p=61',0,'revision','',0),(62,1,'2013-10-10 09:24:56','2013-10-10 08:24:56','[groups_can group=\"Engineers\"]\r\n[vehicle_configuration_form]','Vehicle Configuration','','inherit','closed','open','','9-revision-v1','','','2013-10-10 09:24:56','2013-10-10 08:24:56','',9,'https://moped.sics.se/?p=62',0,'revision','',0),(63,1,'2013-10-10 09:26:01','2013-10-10 08:26:01','[groups_can group=\"Engineers\"]\r\n[vehicle_configuration_form]\r\n[/groups_can]','Vehicle Configuration','','inherit','closed','open','','9-revision-v1','','','2013-10-10 09:26:01','2013-10-10 08:26:01','',9,'https://moped.sics.se/?p=63',0,'revision','',0),(64,1,'2013-10-10 09:26:27','2013-10-10 08:26:27','[groups_member group=\"Engineers\"]\r\n[vehicle_build_form]\r\n[/groups_member]','Vehicle Manufactory','','inherit','closed','open','','11-revision-v1','','','2013-10-10 09:26:27','2013-10-10 08:26:27','',11,'https://moped.sics.se/?p=64',0,'revision','',0),(65,1,'2013-10-10 09:27:19','2013-10-10 08:27:19','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_form]\r\n[/groups_member]','Vehicle Configuration','','inherit','closed','open','','9-revision-v1','','','2013-10-10 09:27:19','2013-10-10 08:27:19','',9,'https://moped.sics.se/?p=65',0,'revision','',0),(66,1,'2013-10-10 09:27:36','2013-10-10 08:27:36','[groups_member group=\"Developers\"]\r\n[new_app_registration_form]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2013-10-10 09:27:36','2013-10-10 08:27:36','',4,'https://moped.sics.se/?p=66',0,'revision','',0),(68,1,'2014-02-28 11:37:36','2014-02-28 10:37:36','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_upload_form]\r\n[operate_user_vehicle_association]\r\n[/groups_member]','Vehicle Configuration Upload And Associations','','publish','closed','open','','vehicle-configuration-upload','','','2015-06-16 09:48:02','2015-06-16 08:48:02','',86,'https://moped.sics.se/?page_id=68',0,'page','',0),(69,1,'2014-02-28 11:37:36','2014-02-28 10:37:36','[vehicle_configuration_upload_form]','Vehicle Configuration Upload','','inherit','closed','open','','68-revision-v1','','','2014-02-28 11:37:36','2014-02-28 10:37:36','',68,'https://moped.sics.se/?p=69',0,'revision','',0),(70,1,'2014-02-28 11:39:12','2014-02-28 10:39:12','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_upload_form]\r\n[/groups_member]','Vehicle Configuration Upload','','inherit','closed','open','','68-revision-v1','','','2014-02-28 11:39:12','2014-02-28 10:39:12','',68,'https://moped.sics.se/?p=70',0,'revision','',0),(71,1,'2014-08-20 12:29:04','2014-08-20 11:29:04','<em><strong>Background</strong></em>\r\nCPS bla bla\r\nFES bla bla\r\nNeed for an open platform, for experimentation and education of future engineers...\r\n\r\n<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 12:29:04','2014-08-20 11:29:04','',27,'https://moped.sics.se/?p=71',0,'revision','',0),(72,1,'2014-08-20 12:48:55','2014-08-20 11:48:55','<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, approaching it from different directions, and consequently giving it various names, such as Internet of Things, Cyber-Physical Systems, Federated Embedded Systems (FES), Multi-Agent Systems, Systems of Systems, to mention just a few. \r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, providing resources for constructing an open-source experimental platform for FES, primarily intended for use in research and education environment. The platform is being developed alongside a research project on FES architecture and consists both three parts.  an architectural description of FES hardware \r\nCPS bla bla\r\nFES bla bla\r\nNeed for an open platform, for experimentation and education of future engineers...\r\n\r\n<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 12:48:55','2014-08-20 11:48:55','',27,'https://moped.sics.se/?p=72',0,'revision','',0),(73,1,'2014-08-20 12:57:30','2014-08-20 11:57:30','<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, approaching it from different directions, and consequently giving it various names, such as Internet of Things, Cyber-Physical Systems, Federated Embedded Systems (FES), Multi-Agent Systems, Systems of Systems, to mention just a few. \r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by describing an open-source experimental platform for FES, developed in a research project on FES architecture and primarily intended for use in research and education environment. The information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in our research group. \r\n\r\n<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 12:57:30','2014-08-20 11:57:30','',27,'https://moped.sics.se/?p=73',0,'revision','',0),(74,1,'2014-08-20 12:58:23','2014-08-20 11:58:23','<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, approaching it from different directions, and consequently giving it various names, such as Internet of Things, Cyber-Physical Systems, Federated Embedded Systems (FES), Multi-Agent Systems, and Systems of Systems, to mention just a few. \r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by describing an open-source experimental platform for FES, developed in a research project on FES architecture and primarily intended for use in research and education environment. The information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in our research group. \r\n\r\n<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 12:58:23','2014-08-20 11:58:23','',27,'https://moped.sics.se/?p=74',0,'revision','',0),(77,1,'2014-08-20 15:13:06','2014-08-20 14:13:06','[gallery ids=\"75\"]<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, approaching it from different directions, and consequently giving it various names, such as Internet of Things, Cyber-Physical Systems, Federated Embedded Systems (FES), Multi-Agent Systems, and Systems of Systems, to mention just a few. \r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by describing an open-source experimental platform for FES, developed in a research project on FES architecture and primarily intended for use in research and education environment. The information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in our research group. \r\n\r\n<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 15:13:06','2014-08-20 14:13:06','',27,'https://moped.sics.se/?p=77',0,'revision','',0),(82,1,'2014-08-20 15:27:28','2014-08-20 14:27:28','','bilen_3rpis','The MOPED car','inherit','closed','open','','bilen_3rpis','','','2014-08-20 15:27:28','2014-08-20 14:27:28','',93,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png',0,'attachment','image/png',0),(83,1,'2014-08-20 15:27:57','2014-08-20 14:27:57','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, approaching it from different directions, and consequently giving it various names, such as Internet of Things, Cyber-Physical Systems, Federated Embedded Systems (FES), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by describing an open-source experimental platform for FES, developed in a research project on FES architecture and primarily intended for use in research and education environment. The information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in our research group.\r\n\r\n<em><strong>Vision – federated embedded systems</strong></em>\r\n<ul>\r\n	<li>Reconfiguration</li>\r\n	<li>Open to innovation</li>\r\n	<li>Standardized</li>\r\n	<li>Robust</li>\r\n	<li>Safe &amp; Secure</li>\r\n</ul>','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 15:27:57','2014-08-20 14:27:57','',27,'https://moped.sics.se/?p=83',0,'revision','',0),(84,1,'2014-08-20 15:37:57','2014-08-20 14:37:57','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments. \r\n\r\nThe information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in the process. Also, this site is intended as a portal for open innovation and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems, or FES systems in general. ','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 15:37:57','2014-08-20 14:37:57','',27,'https://moped.sics.se/?p=84',0,'revision','',0),(85,1,'2014-08-20 15:41:08','2014-08-20 14:41:08','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments. \r\n\r\nThe information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in the process. Also, this site is intended as a <a href=\"https://moped.sics.se/?page_id=46\" title=\"Apps Gallery\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems, or FES systems in general. ','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 15:41:08','2014-08-20 14:41:08','',27,'https://moped.sics.se/?p=85',0,'revision','',0),(86,1,'2014-08-20 15:41:28','2014-08-20 14:41:28','<a href=\"https://moped.sics.se/?page_id=68\" title=\"Vehicle Configuration Upload\">Vehicle Configuration Upload</a>\r\n<a href=\"https://moped.sics.se/?page_id=46\" title=\"Apps Gallery\">Apps Gallery</a>\r\n<a href=\"https://moped.sics.se/?page_id=4\" title=\"Application Upload\">Application Upload</a>\r\n<a href=\"https://moped.sics.se/?page_id=9\" title=\"Vehicle Configuration\">Vehicle Configuration</a>\r\n<a href=\"https://moped.sics.se/?page_id=11\" title=\"Vehicle Manufactory\">Vehicle Manufactory</a>','The open innovation portal','','publish','closed','open','','the-open-innovation-portal','','','2014-08-20 15:43:26','2014-08-20 14:43:26','',0,'https://moped.sics.se/?page_id=86',0,'page','',0),(87,1,'2014-08-20 15:41:28','2014-08-20 14:41:28','','The open innovation portal','','inherit','closed','open','','86-revision-v1','','','2014-08-20 15:41:28','2014-08-20 14:41:28','',86,'https://moped.sics.se/?p=87',0,'revision','',0),(88,1,'2014-08-20 15:43:09','2014-08-20 14:43:09','<a href=\"https://moped.sics.se/?page_id=68\" title=\"Vehicle Configuration Upload\">Vehicle Configuration Upload</a>\r\n<a href=\"https://moped.sics.se/?page_id=46\" title=\"Apps Gallery\">Apps Gallery</a>\r\n<a href=\"https://moped.sics.se/?page_id=4\" title=\"Application Upload\">Application Upload</a>\r\n<a href=\"https://moped.sics.se/?page_id=9\" title=\"Vehicle Configuration\">Vehicle Configuration</a>\r\n<a href=\"https://moped.sics.se/?page_id=11\" title=\"Vehicle Manufactory\">Vehicle Manufactory</a>','The open innovation portal','','inherit','closed','open','','86-autosave-v1','','','2014-08-20 15:43:09','2014-08-20 14:43:09','',86,'https://moped.sics.se/?p=88',0,'revision','',0),(89,1,'2014-08-20 15:43:26','2014-08-20 14:43:26','<a href=\"https://moped.sics.se/?page_id=68\" title=\"Vehicle Configuration Upload\">Vehicle Configuration Upload</a>\r\n<a href=\"https://moped.sics.se/?page_id=46\" title=\"Apps Gallery\">Apps Gallery</a>\r\n<a href=\"https://moped.sics.se/?page_id=4\" title=\"Application Upload\">Application Upload</a>\r\n<a href=\"https://moped.sics.se/?page_id=9\" title=\"Vehicle Configuration\">Vehicle Configuration</a>\r\n<a href=\"https://moped.sics.se/?page_id=11\" title=\"Vehicle Manufactory\">Vehicle Manufactory</a>','The open innovation portal','','inherit','closed','open','','86-revision-v1','','','2014-08-20 15:43:26','2014-08-20 14:43:26','',86,'https://moped.sics.se/?p=89',0,'revision','',0),(90,1,'2014-08-20 15:43:56','2014-08-20 14:43:56','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments. \r\n\r\nThe information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in the process. Also, this site is intended as a <a href=\"https://moped.sics.se/?page_id=86\" title=\"The open innovation portal\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems, or FES systems in general. ','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-20 15:43:56','2014-08-20 14:43:56','',27,'https://moped.sics.se/?p=90',0,'revision','',0),(91,1,'2014-08-20 15:58:42','2014-08-20 14:58:42','','MOPED configuration','','publish','closed','open','','moped-configuration','','','2014-08-20 15:58:42','2014-08-20 14:58:42','',0,'https://moped.sics.se/?page_id=91',0,'page','',0),(92,1,'2014-08-20 15:58:42','2014-08-20 14:58:42','','MOPED configuration','','inherit','closed','open','','91-revision-v1','','','2014-08-20 15:58:42','2014-08-20 14:58:42','',91,'https://moped.sics.se/?p=92',0,'revision','',0),(93,1,'2014-08-20 15:58:53','2014-08-20 14:58:53','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n[caption id=\"attachment_82\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png\"><img class=\"size-large wp-image-82\" alt=\"The MOPED model car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis-1024x582.png\" width=\"604\" height=\"343\" /></a> The MOPED car[/caption]\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. Similarly as this is normally done in real vehicles, the ECUs are connected through a CAN network.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg\"><img class=\"alignnone size-full wp-image-365\" alt=\"moped_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg\" width=\"1398\" height=\"634\" /></a>\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','publish','closed','open','','hardware-configuration','','','2015-02-11 09:28:18','2015-02-11 08:28:18','',91,'https://moped.sics.se/?page_id=93',0,'page','',0),(94,1,'2014-08-20 15:58:53','2014-08-20 14:58:53','','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-20 15:58:53','2014-08-20 14:58:53','',93,'https://moped.sics.se/?p=94',0,'revision','',0),(95,1,'2014-08-20 15:59:03','2014-08-20 14:59:03','Here, main software elements, included into the MOPED platform, are shortly outlined. The interested reader is referred to the theoretical section for more details on the concepts, while the more impatient reader is advised to proceed to the step-by-step <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.\r\n\r\n<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description of how this should be done externally and deploy it together with the binaries.</span>\r\n\r\n[caption id=\"attachment_149\" align=\"aligncenter\" width=\"869\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\"><img class=\" wp-image-149\" alt=\"ecm_server_communication\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\" width=\"869\" height=\"576\" /></a> The plugin installation process.[/caption]\r\n\r\n&nbsp;\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system. The server becomes thus an important point of intelligence for managing different plugins and their positive and negative interactions. The steps to set up an application server are listed <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Also, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, which is best described by an <a title=\"Example application\" href=\"https://moped.sics.se/?page_id=136\">example application</a>.</span>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nTypically, an application developer has a limited access to appropriate hardware, especially one that is AUTOSAR-compliant. Thus, the MOPED platform includes simulation tools for representing message transfer between SW-Cs, as well as between SW-C and basic software, in a distributed AUTOSAR system. In such a way, to a large extent, new applications can be tested in desktop environment. The simulation software packages are found on the <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.','Software configuration','','publish','closed','open','','software-configuration','','','2014-08-21 15:22:44','2014-08-21 14:22:44','',91,'https://moped.sics.se/?page_id=95',0,'page','',0),(96,1,'2014-08-20 15:59:03','2014-08-20 14:59:03','','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-20 15:59:03','2014-08-20 14:59:03','',95,'https://moped.sics.se/?p=96',0,'revision','',0),(97,1,'2014-08-20 15:59:41','2014-08-20 14:59:41','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n</div>','Theoretical contributions','','publish','closed','open','','theoretical-contributions','','','2014-12-23 10:05:19','2014-12-23 09:05:19','',0,'https://moped.sics.se/?page_id=97',0,'page','',0),(98,1,'2014-08-20 15:59:41','2014-08-20 14:59:41','','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-20 15:59:41','2014-08-20 14:59:41','',97,'https://moped.sics.se/?p=98',0,'revision','',0),(100,1,'2014-08-21 08:33:21','2014-08-21 07:33:21','<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. The main trade-off here was the choice of scale, and the rationale for the scale 1/10 was to have a sufficiently large car to allow easy packaging of electronics, and still a sufficiently small scale to allow driving indoors. A small size also makes it easy to transport the car, which is often needed. The particular car chosen is 53 cm long and has a turning diameter of 1.2 m, which suits those requirements. However, more or less any model car of a similar size and capabilities could be used. In order to use the car indoors, low speed  control is more important than high speed, and therefore the original motor had to be replaced with a weaker one rated at 190W, and then the new motor was further calibrated for slower driving.\r\n\r\n<strong>Electronics</strong><em>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The  rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus. \r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network (Fig. 2). The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed  control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through a network, and it was decided to use Ethernet for this. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). The main alternative was to instead use CAN, and this has also been tested, by connecting an external CAN driver over SPI. The main drawback of Ethernet has been the complexity of the device drivers, which required substantial amounts of work. To be able to connect three ECUs, a simple Ethernet switch also has to be included. \r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong>Electrical Power</strong></em>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To\r\nfeed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong>Sensors and Actuators</strong><em>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles. \r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology.\r\nHowever, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time. ','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 08:33:21','2014-08-21 07:33:21','',93,'https://moped.sics.se/?p=100',0,'revision','',0),(101,1,'2014-08-21 08:46:00','2014-08-21 07:46:00','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><em><span style=\"color: #ff0000;\">1</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><em><span style=\"color: #ff0000;\">E14</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><em><span style=\"color: #ff0000;\">Optionally (not tested): Ethernet Switch</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><em><span style=\"color: #ff0000;\">DLINK DES-105</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><em><span style=\"color: #ff0000;\">Dustin</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><em><span style=\"color: #ff0000;\">5010620335</span></em></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><em><span style=\"color: #ff0000;\">3</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><em><span style=\"color: #ff0000;\">H1,H2,H3</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><em><span style=\"color: #ff0000;\">Optionally (not tested): Ethernet cable</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><em><span style=\"color: #ff0000;\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><em><span style=\"color: #ff0000;\">Dustin</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><em><span style=\"color: #ff0000;\">5010379761</span></em></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote> <strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n <em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n The A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n<span style=\"line-height: 1.5;\">Mount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.</span>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n Solder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\nIf CAN communication is to be used (this is the setup that is currently supported by the MOPED software), mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\nOptionally, if Ethernet is to be used (this is a promising approach but needs further software development), the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','publish','closed','open','','assembly-description','','','2015-02-11 09:33:23','2015-02-11 08:33:23','',93,'https://moped.sics.se/?page_id=101',0,'page','',0),(102,1,'2014-08-21 08:46:00','2014-08-21 07:46:00','','Assembly description','','inherit','closed','open','','101-revision-v1','','','2014-08-21 08:46:00','2014-08-21 07:46:00','',101,'https://moped.sics.se/?p=102',0,'revision','',0),(104,1,'2014-08-21 08:48:08','2014-08-21 07:48:08','<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n<strong>Electronics</strong><em>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The  rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus. \r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed  control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included. \r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong>Electrical Power</strong></em>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To\r\nfeed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong>Sensors and Actuators</strong><em>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles. \r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology.\r\nHowever, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time. ','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 08:48:08','2014-08-21 07:48:08','',93,'https://moped.sics.se/?p=104',0,'revision','',0),(106,1,'2014-08-21 09:25:46','2014-08-21 08:25:46','','RaspberryPi_modelB','Raspberry Pi, model B','inherit','closed','open','','raspberrypi_modelb','','','2014-08-21 09:25:46','2014-08-21 08:25:46','',93,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg',0,'attachment','image/jpeg',0),(107,1,'2014-08-21 09:26:10','2014-08-21 08:26:10','<strong><em>Mechanics</em></strong>\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\n\n<strong>Electronics</strong><em>\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.</em>\n\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\n\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\n\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\n\n<strong>Electrical Power</strong>\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To\nfeed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\n\n<strong>Sensors and Actuators</strong><em>\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.</em>\n\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\n\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\n\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology.\nHowever, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 09:26:10','2014-08-21 08:26:10','',93,'https://moped.sics.se/?p=107',0,'revision','',0),(108,1,'2014-08-21 09:33:06','2014-08-21 08:33:06','<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To\r\nfeed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology.\r\nHowever, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 09:33:06','2014-08-21 08:33:06','',93,'https://moped.sics.se/?p=108',0,'revision','',0),(110,1,'2014-08-21 09:34:28','2014-08-21 08:34:28','<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\r\n\r\n[caption id=\"attachment_109\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture.jpg\"><img class=\"size-large wp-image-109\" alt=\"The ECU and network architecture of the MOPED platform\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture-1024x494.jpg\" width=\"604\" height=\"291\" /></a> The ECU and network architecture[/caption]\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To\r\nfeed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology.\r\nHowever, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 09:34:28','2014-08-21 08:34:28','',93,'https://moped.sics.se/?p=110',0,'revision','',0),(111,1,'2014-08-21 09:35:01','2014-08-21 08:35:01','<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\r\n\r\n[caption id=\"attachment_109\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture.jpg\"><img class=\"size-large wp-image-109\" alt=\"The ECU and network architecture of the MOPED platform\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture-1024x494.jpg\" width=\"604\" height=\"291\" /></a> The ECU and network architecture[/caption]\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 09:35:01','2014-08-21 08:35:01','',93,'https://moped.sics.se/?p=111',0,'revision','',0),(112,1,'2014-08-21 09:36:02','2014-08-21 08:36:02','','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-08-21 09:36:02','2014-08-21 08:36:02','',101,'https://moped.sics.se/?p=112',0,'revision','',0),(113,1,'2014-08-21 09:38:09','2014-08-21 08:38:09','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\r\n\r\n[caption id=\"attachment_109\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture.jpg\"><img class=\"size-large wp-image-109\" alt=\"The ECU and network architecture of the MOPED platform\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture-1024x494.jpg\" width=\"604\" height=\"291\" /></a> The ECU and network architecture[/caption]\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 09:38:09','2014-08-21 08:38:09','',93,'https://moped.sics.se/?p=113',0,'revision','',0),(114,1,'2014-08-21 09:39:01','2014-08-21 08:39:01','<strong><em>--- Under construction ---</em></strong>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-08-21 09:39:01','2014-08-21 08:39:01','',101,'https://moped.sics.se/?p=114',0,'revision','',0),(116,1,'2014-08-21 09:44:47','2014-08-21 08:44:47','Link to github\r\n\r\nDescription of the different packages:\r\n<ul>\r\n	<li>Server</li>\r\n	<li>Simulator</li>\r\n	<li>Platform</li>\r\n</ul>\r\nDescription of squawk and how to get started with it\r\n\r\nDescription of the different drivers\r\n\r\nOur kernel.img\r\n\r\n&nbsp;\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 09:44:47','2014-08-21 08:44:47','',95,'https://moped.sics.se/?p=116',0,'revision','',0),(117,1,'2014-08-21 13:06:35','2014-08-21 12:06:35','&nbsp;\r\n\r\n<strong><em>ECU software</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, strongly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\n&nbsp;\r\n\r\n, and the project has ported Arctic Core to the Raspberry Pi hardware. The porting involved modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception\r\n\r\n&nbsp;\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLink to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span>\r\n\r\nDescription of the different drivers\r\n\r\nOur kernel.img\r\n\r\n&nbsp;\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:06:35','2014-08-21 12:06:35','',95,'https://moped.sics.se/?p=117',0,'revision','',0),(118,1,'2014-08-21 13:06:45','2014-08-21 12:06:45','','autosar_architecture','','inherit','closed','open','','autosar_architecture','','','2014-08-21 13:06:45','2014-08-21 12:06:45','',95,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg',0,'attachment','image/jpeg',0),(119,1,'2014-08-21 13:16:04','2014-08-21 12:16:04','<strong><em>ECU software</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n&nbsp;\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software consists typically of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n, and the project has ported Arctic Core to the Raspberry Pi hardware. The porting involved modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception\r\n\r\n&nbsp;\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLink to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span>\r\n\r\nDescription of the different drivers\r\n\r\nOur kernel.img\r\n\r\n&nbsp;\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:16:04','2014-08-21 12:16:04','',95,'https://moped.sics.se/?p=119',0,'revision','',0),(120,1,'2014-08-21 13:24:05','2014-08-21 12:24:05','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needed to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involved modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also included writing device drivers for various I/O types, namely the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\n&nbsp;\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLink to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span>\r\n\r\nDescription of the different drivers\r\n\r\nOur kernel.img\r\n\r\n&nbsp;\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:24:05','2014-08-21 12:24:05','',95,'https://moped.sics.se/?p=120',0,'revision','',0),(121,1,'2014-08-21 13:29:38','2014-08-21 12:29:38','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, can be found <strong>[here (make a link (github?)]</strong>, in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:29:38','2014-08-21 12:29:38','',95,'https://moped.sics.se/?p=121',0,'revision','',0),(122,1,'2014-08-21 13:38:35','2014-08-21 12:38:35','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting basic AUTOSAR software to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, can be found <strong>[here (make a link (github?)]</strong>, in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\n&nbsp;\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:38:35','2014-08-21 12:38:35','',95,'https://moped.sics.se/?p=122',0,'revision','',0),(123,1,'2014-08-21 13:44:35','2014-08-21 12:44:35','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, can be found <strong>[here (make a link (github?)]</strong>, in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, the AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>. , which is a hindrance when it comes to the development of\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:44:35','2014-08-21 12:44:35','',95,'https://moped.sics.se/?p=123',0,'revision','',0),(124,1,'2014-08-21 13:49:46','2014-08-21 12:49:46','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, can be found <strong>[here (make a link (github?)]</strong>, in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:49:46','2014-08-21 12:49:46','',95,'https://moped.sics.se/?p=124',0,'revision','',0),(125,1,'2014-08-21 13:52:57','2014-08-21 12:52:57','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, can be found <strong>[here (make a link (github?)]</strong>, in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs contain in fact also a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 13:52:57','2014-08-21 12:52:57','',95,'https://moped.sics.se/?p=125',0,'revision','',0),(126,1,'2014-08-21 14:03:34','2014-08-21 13:03:34','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, can be found <strong>[here (make a link (github?)]</strong>, in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software to promote its transferability. Thus, each plugin SW-C contains a Java virtual machine. PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk Java VM. Step-by-step installation instructions, collected here, allow to set up the system for future installation of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:03:34','2014-08-21 13:03:34','',95,'https://moped.sics.se/?p=126',0,'revision','',0),(127,1,'2014-08-21 14:03:52','2014-08-21 13:03:52','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\nA convenient way for monitoring the Autosar nodes is to set up a connection to their serial ports, using a serial-USB cable and a terminal emulator program, such as xterm or PuTTY. More details about how this can be done are collected on <a title=\"How to set up Serial-USB connection\" href=\"http://elinux.org/RPi_Serial_Connection\" target=\"_blank\">this wiki page</a>.\r\n\r\n<em style=\"font-family: Bitter, Georgia, serif; font-size: 20px; line-height: 1.3;\"><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, <a title=\"BluIno on GitHub\" href=\"https://github.com/MiichaelD/BluIno\" target=\"_blank\">BluIno</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','publish','closed','open','','installation-instructions','','','2015-02-11 09:50:12','2015-02-11 08:50:12','',95,'https://moped.sics.se/?page_id=127',0,'page','',0),(128,1,'2014-08-21 14:03:52','2014-08-21 13:03:52','','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-08-21 14:03:52','2014-08-21 13:03:52','',127,'https://moped.sics.se/?p=128',0,'revision','',0),(129,1,'2014-08-21 14:06:25','2014-08-21 13:06:25','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software to promote its transferability. Thus, each plugin SW-C contains a Java virtual machine. PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk Java VM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future installation of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:06:25','2014-08-21 13:06:25','',95,'https://moped.sics.se/?p=129',0,'revision','',0),(130,1,'2014-08-21 14:07:21','2014-08-21 13:07:21','Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong>\r\n\r\nInstallation of Squawk + PIRTE','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-08-21 14:07:21','2014-08-21 13:07:21','',127,'https://moped.sics.se/?p=130',0,'revision','',0),(132,1,'2014-08-21 14:08:02','2014-08-21 13:08:02','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-08-21 14:08:02','2014-08-21 13:08:02','',127,'https://moped.sics.se/?p=132',0,'revision','',0),(133,1,'2014-08-21 14:08:56','2014-08-21 13:08:56','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future installation of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:08:56','2014-08-21 13:08:56','',95,'https://moped.sics.se/?p=133',0,'revision','',0),(134,1,'2014-08-21 14:09:25','2014-08-21 13:09:25','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, more closely presented <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:09:25','2014-08-21 13:09:25','',95,'https://moped.sics.se/?p=134',0,'revision','',0),(135,1,'2014-08-21 14:34:59','2014-08-21 13:34:59','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description for how this should be done externally and deploy it together with the binaries. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. The server becomes thus an important point of intelligence for managing the different plugins and their positive and negative interactions. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system.</span>\r\n\r\nAlso, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, best described by an example.\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:34:59','2014-08-21 13:34:59','',95,'https://moped.sics.se/?p=135',0,'revision','',0),(136,1,'2014-08-21 14:36:29','2014-08-21 13:36:29','<em><strong>Work in progress:</strong></em>\r\n\r\nThis example application is intended for testing that HW and SW installation worked, as well as for a better understanding of the communication principles.','Example application','','publish','closed','open','','example-application','','','2014-08-21 14:37:00','2014-08-21 13:37:00','',91,'https://moped.sics.se/?page_id=136',0,'page','',0),(137,1,'2014-08-21 14:36:29','2014-08-21 13:36:29','This application is intended for testing that HW and SW installation worked, as well as for a better understanding of the communication principles.','Example application','','inherit','closed','open','','136-revision-v1','','','2014-08-21 14:36:29','2014-08-21 13:36:29','',136,'https://moped.sics.se/?p=137',0,'revision','',0),(139,1,'2014-08-21 14:37:00','2014-08-21 13:37:00','<em><strong>Work in progress:</strong></em>\r\n\r\nThis example application is intended for testing that HW and SW installation worked, as well as for a better understanding of the communication principles.','Example application','','inherit','closed','open','','136-revision-v1','','','2014-08-21 14:37:00','2014-08-21 13:37:00','',136,'https://moped.sics.se/?p=139',0,'revision','',0),(140,1,'2014-08-21 14:43:29','2014-08-21 13:43:29','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-08-21 14:43:29','2014-08-21 13:43:29','',127,'https://moped.sics.se/?p=140',0,'revision','',0),(141,1,'2014-08-21 14:43:39','2014-08-21 13:43:39','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description of how this should be done externally and deploy it together with the binaries. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system. The server becomes thus an important point of intelligence for managing different plugins and their positive and negative interactions. The steps to set up an application server are listed <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Also, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, best described by an example.</span>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nLinks to github\r\n\r\n<span style=\"line-height: 1.5;\">Description of squawk and how to get started with it</span><span style=\"line-height: 1.5;\"> </span>\r\n\r\n&nbsp;','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:43:39','2014-08-21 13:43:39','',95,'https://moped.sics.se/?p=141',0,'revision','',0),(142,1,'2014-08-21 14:53:57','2014-08-21 13:53:57','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description of how this should be done externally and deploy it together with the binaries. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system. The server becomes thus an important point of intelligence for managing different plugins and their positive and negative interactions. The steps to set up an application server are listed <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Also, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, which is best described by an <a title=\"Example application\" href=\"https://moped.sics.se/?page_id=136\">example application</a>.</span>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nTypically, an application developer has a limited access to appropriate hardware, especially one that is AUTOSAR-compliant. Thus, the MOPED platform includes simulation tools for representing message transfer between SW-Cs, as well as between SW-C and basic software, in a distributed AUTOSAR system. In such a way, to a large extent, new applications can be tested in desktop environment. The simulation software packages are found on the <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 14:53:57','2014-08-21 13:53:57','',95,'https://moped.sics.se/?p=142',0,'revision','',0),(143,1,'2014-08-21 14:54:35','2014-08-21 13:54:35','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server.</li>\r\n	<li>Installation packages and instructions for the simulation tool.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-08-21 14:54:35','2014-08-21 13:54:35','',127,'https://moped.sics.se/?p=143',0,'revision','',0),(145,1,'2014-08-21 14:58:23','2014-08-21 13:58:23','','Technology in the hands','','inherit','closed','open','','technology-in-the-hands','','','2014-08-21 14:58:23','2014-08-21 13:58:23','',0,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/all_connected.jpg',0,'attachment','image/jpeg',0),(146,1,'2014-08-21 14:59:07','2014-08-21 13:59:07','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments.\r\n\r\nThe information, collected here, consists of hardware configuration descriptions, open-source software needed to make the hardware come alive, and a more theoretical part that describes the architectural concepts for interconnecting embedded systems that have been developed in the process. Also, this site is intended as a <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems, or FES systems in general.','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-21 14:59:07','2014-08-21 13:59:07','',27,'https://moped.sics.se/?p=146',0,'revision','',0),(147,1,'2014-08-21 15:00:09','2014-08-21 14:00:09','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n[caption id=\"attachment_82\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png\"><img class=\"size-large wp-image-82\" alt=\"The MOPED model car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis-1024x582.png\" width=\"604\" height=\"343\" /></a> The MOPED car[/caption]\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\r\n\r\n[caption id=\"attachment_109\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture.jpg\"><img class=\"size-large wp-image-109\" alt=\"The ECU and network architecture of the MOPED platform\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture-1024x494.jpg\" width=\"604\" height=\"291\" /></a> The ECU and network architecture[/caption]\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-autosave-v1','','','2014-08-21 15:00:09','2014-08-21 14:00:09','',93,'https://moped.sics.se/?p=147',0,'revision','',0),(148,1,'2014-08-21 15:00:26','2014-08-21 14:00:26','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n[caption id=\"attachment_82\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png\"><img class=\"size-large wp-image-82\" alt=\"The MOPED model car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis-1024x582.png\" width=\"604\" height=\"343\" /></a> The MOPED car[/caption]\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. The ECUs are connected through an Ethernet network. The rationale was that the Raspberry Pi has integrated Ethernet controllers, using 100Base-TX over RJ45 as a physical layer. Ethernet is also an upcoming standard in the automotive industry for backbone in-vehicle networks, which makes it relevant and future oriented (although the industry is likely to use the physical layer BroadR-Reach instead). To be able to connect three ECUs, a simple Ethernet switch also has to be included.\r\n\r\n[caption id=\"attachment_109\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture.jpg\"><img class=\"size-large wp-image-109\" alt=\"The ECU and network architecture of the MOPED platform\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture-1024x494.jpg\" width=\"604\" height=\"291\" /></a> The ECU and network architecture[/caption]\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2014-08-21 15:00:26','2014-08-21 14:00:26','',93,'https://moped.sics.se/?p=148',0,'revision','',0),(149,1,'2014-08-21 15:06:38','2014-08-21 14:06:38','','ecm_server_communication','','inherit','closed','open','','ecm_server_communication','','','2014-08-21 15:06:38','2014-08-21 14:06:38','',95,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg',0,'attachment','image/jpeg',0),(150,1,'2014-08-21 15:08:25','2014-08-21 14:08:25','<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description of how this should be done externally and deploy it together with the binaries.</span>\r\n\r\n[caption id=\"attachment_149\" align=\"aligncenter\" width=\"869\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\"><img class=\" wp-image-149\" alt=\"ecm_server_communication\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\" width=\"869\" height=\"576\" /></a> The plugin installation process.[/caption]\r\n\r\n&nbsp;\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system. The server becomes thus an important point of intelligence for managing different plugins and their positive and negative interactions. The steps to set up an application server are listed <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Also, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, which is best described by an <a title=\"Example application\" href=\"https://moped.sics.se/?page_id=136\">example application</a>.</span>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nTypically, an application developer has a limited access to appropriate hardware, especially one that is AUTOSAR-compliant. Thus, the MOPED platform includes simulation tools for representing message transfer between SW-Cs, as well as between SW-C and basic software, in a distributed AUTOSAR system. In such a way, to a large extent, new applications can be tested in desktop environment. The simulation software packages are found on the <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 15:08:25','2014-08-21 14:08:25','',95,'https://moped.sics.se/?p=150',0,'revision','',0),(151,1,'2014-08-21 15:10:33','2014-08-21 14:10:33','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amend this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments.\r\n\r\nThe information, collected here, consists of hardware configuration descriptions, open-source software binaries, together with installation instructions, needed to make the hardware come alive, as well as a more theoretical part that describes the architectural concepts that have been developed in parallel. Also, this site is intended as a <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems in particular, and FES systems in general.','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-21 15:10:33','2014-08-21 14:10:33','',27,'https://moped.sics.se/?p=151',0,'revision','',0),(153,1,'2014-08-21 15:22:44','2014-08-21 14:22:44','Here, main software elements, included into the MOPED platform, are shortly outlined. The interested reader is referred to the theoretical section for more details on the concepts, while the more impatient reader is advised to proceed to the step-by-step <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.\r\n\r\n<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description of how this should be done externally and deploy it together with the binaries.</span>\r\n\r\n[caption id=\"attachment_149\" align=\"aligncenter\" width=\"869\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\"><img class=\" wp-image-149\" alt=\"ecm_server_communication\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\" width=\"869\" height=\"576\" /></a> The plugin installation process.[/caption]\r\n\r\n&nbsp;\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system. The server becomes thus an important point of intelligence for managing different plugins and their positive and negative interactions. The steps to set up an application server are listed <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Also, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, which is best described by an <a title=\"Example application\" href=\"https://moped.sics.se/?page_id=136\">example application</a>.</span>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nTypically, an application developer has a limited access to appropriate hardware, especially one that is AUTOSAR-compliant. Thus, the MOPED platform includes simulation tools for representing message transfer between SW-Cs, as well as between SW-C and basic software, in a distributed AUTOSAR system. In such a way, to a large extent, new applications can be tested in desktop environment. The simulation software packages are found on the <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.','Software configuration','','inherit','closed','open','','95-revision-v1','','','2014-08-21 15:22:44','2014-08-21 14:22:44','',95,'https://moped.sics.se/?p=153',0,'revision','',0),(154,1,'2014-08-21 15:23:34','2014-08-21 14:23:34','<em><strong>Work in progress</strong></em>\r\n\r\nHere, a more detailed description of the concepts will be collected, together with links to relevant publications.','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-21 15:23:34','2014-08-21 14:23:34','',97,'https://moped.sics.se/?p=154',0,'revision','',0),(155,1,'2014-08-21 15:23:54','2014-08-21 14:23:54','<em><strong>Work in progress</strong></em>\r\n\r\nHere, a more detailed description of the concepts will be collected (DAC-paper), together with links to relevant publications.','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-21 15:23:54','2014-08-21 14:23:54','',97,'https://moped.sics.se/?p=155',0,'revision','',0),(157,1,'2014-08-22 13:38:32','2014-08-22 12:38:32','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight Squawk Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n&nbsp;\r\n\r\n<span style=\"line-height: 1.5;\">The simplest kind of connection is when ports interact directly to other plugins within the same plugin SW-C, in which case a simple write operation is needed to establish the connection. In case a plugin port needs to be connected with the built-in software, a simple write and a Java to C mapping will often be required in practice. </span>\r\n\r\nIn order for the plugin ports to always be connected to another port, the concept of virtual ports is introduced. Virtual ports are used as a bridge between plugin ports and the SW-C ports, defined by the AUTOSAR interface and are managed by PIRTE.\r\n\r\nSimilarly to standard SW-Cs, plugin SW-Cs contain AUTOSAR ports for interacting with the built-in software (e.g. for accessing sensor signals). In addition, plugin SW-Cs need to be able to interact with an external server (e.g. for plugin installation) and with other plugin SW-Cs. Thus, three types of ports are defined at the AUTOSAR interface level of plugin SW-Cs:\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports)</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports)</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports)</li>\r\n</ul>\r\nType II ports are probably the most tricky ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced.\r\n\r\n<span style=\"line-height: 1.5;\">The AUTOSAR interface of a plugin SW-C consists of three types of ports:</span>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>DAC-poster</strong></em>\r\n\r\n<em><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 13:38:32','2014-08-22 12:38:32','',97,'https://moped.sics.se/?p=157',0,'revision','',0),(158,1,'2014-08-22 13:38:41','2014-08-22 12:38:41','','ports_in_pluginSWC','','inherit','closed','open','','ports_in_pluginswc','','','2014-08-22 13:38:41','2014-08-22 12:38:41','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg',0,'attachment','image/jpeg',0),(159,1,'2014-08-22 13:39:51','2014-08-22 12:39:51','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight Squawk Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n<p style=\"text-align: center;\"></p>\r\n<span style=\"line-height: 1.5;\">The simplest kind of connection is when ports interact directly to other plugins within the same plugin SW-C, in which case a simple write operation is needed to establish the connection. In case a plugin port needs to be connected with the built-in software, a simple write and a Java to C mapping will often be required in practice. </span>\r\n\r\nIn order for the plugin ports to always be connected to another port, the concept of virtual ports is introduced. Virtual ports are used as a bridge between plugin ports and the SW-C ports, defined by the AUTOSAR interface and are managed by PIRTE.\r\n\r\nSimilarly to standard SW-Cs, plugin SW-Cs contain AUTOSAR ports for interacting with the built-in software (e.g. for accessing sensor signals). In addition, plugin SW-Cs need to be able to interact with an external server (e.g. for plugin installation) and with other plugin SW-Cs. Thus, three types of ports are defined at the AUTOSAR interface level of plugin SW-Cs:\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports)</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports)</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports)</li>\r\n</ul>\r\nType II ports are probably the most tricky ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced.\r\n\r\n<span style=\"line-height: 1.5;\">The AUTOSAR interface of a plugin SW-C consists of three types of ports:</span>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>DAC-poster</strong></em>\r\n\r\n<em><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 13:39:51','2014-08-22 12:39:51','',97,'https://moped.sics.se/?p=159',0,'revision','',0),(160,1,'2014-08-22 14:04:14','2014-08-22 13:04:14','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight Squawk Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n&nbsp;\r\n\r\n<em style=\"line-height: 1.5;\"><strong>DAC-poster</strong></em>\r\n\r\n<em><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 14:04:14','2014-08-22 13:04:14','',97,'https://moped.sics.se/?p=160',0,'revision','',0),(161,1,'2014-08-22 15:31:02','2014-08-22 14:31:02','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one\r\n<div>1)<span style=\"text-decoration: underline;\">Installation message</span> – {message type, relay port (Vx), {”plugin name”, bytecode, contexts}} – {0, -1, {”COM”, com.jar, com.cntxt}}, {0, V2, {”OP”, op.jar, op.cntxt}}</div>\r\n<div>2)<span style=\"text-decoration: underline;\">PIC</span> – reserved plugin port ids – {P0-P3}, {P0-P3}</div>\r\n<div>3)<span style=\"text-decoration: underline;\">PLC</span> – plugin-to-virtual port linking (Px-Vy.Pz transfers data from Px to Pz between control units) – {P0-, P1-, P2-V0.P0, P3-V0.P1}, {P0-V3, P1-V3, P2-V4, P3-V5}</div>\r\n<div>4)<span style=\"text-decoration: underline;\">ECC</span> – {ip:port, virtual-to-plugin port relay (Vx.Py), ”signal name”, [opt: login data]} –  {111.22.33.44:56789, -1.P0, ”Wheels”}, {111.22.33.44:56789, -1.P1, ”Speed”}</div>\r\n<div></div>\r\n<div></div>\r\n<div></div>\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 15:31:02','2014-08-22 14:31:02','',97,'https://moped.sics.se/?p=161',0,'revision','',0),(162,1,'2014-08-22 15:31:13','2014-08-22 14:31:13','','example_communication','Example application, consisting of two plugins \"COM\" and \"OP\"','inherit','closed','open','','example_communication','','','2014-08-22 15:31:13','2014-08-22 14:31:13','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg',0,'attachment','image/jpeg',0),(163,1,'2014-08-22 15:48:44','2014-08-22 14:48:44','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2. Two installation messages are sent,   through type I SW-C port, s2. This is captured by two installation messages on the form {message type, relay port (Vx), {”plugin name”, bytecode, contexts}} : 0, -1, {”COM”, com.jar, com.cntxt}} and {0, V2, {”OP”, op.jar, op.cntxt}}\r\n<div>1)<span style=\"text-decoration: underline;\">Installation message</span> – – {</div>\r\n<div>2)<span style=\"text-decoration: underline;\">PIC</span> – reserved plugin port ids – {P0-P3}, {P0-P3}</div>\r\n<div>3)<span style=\"text-decoration: underline;\">PLC</span> – plugin-to-virtual port linking (Px-Vy.Pz transfers data from Px to Pz between control units) – {P0-, P1-, P2-V0.P0, P3-V0.P1}, {P0-V3, P1-V3, P2-V4, P3-V5}</div>\r\n<div>4)<span style=\"text-decoration: underline;\">ECC</span> – {ip:port, virtual-to-plugin port relay (Vx.Py), ”signal name”, [opt: login data]} –  {111.22.33.44:56789, -1.P0, ”Wheels”}, {111.22.33.44:56789, -1.P1, ”Speed”}</div>\r\n<div></div>\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div></div>\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 15:48:44','2014-08-22 14:48:44','',97,'https://moped.sics.se/?p=163',0,'revision','',0),(165,1,'2014-08-22 16:04:45','2014-08-22 15:04:45','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation messages of the following form are sent:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message.jpg\"><img class=\"aligncenter size-full wp-image-164\" alt=\"installation_message\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\n,   through type I SW-C port, s2. This is captured by two installation messages on the form {message type, relay port (Vx), {”plugin name”, bytecode, contexts}} : 0, -1, {”COM”, com.jar, com.cntxt}} and {0, V2, {”OP”, op.jar, op.cntxt}}\r\n<div>1)Installation message – – {</div>\r\n<div>2)PIC – reserved plugin port ids – {P0-P3}, {P0-P3}</div>\r\n<div>3)PLC – plugin-to-virtual port linking (Px-Vy.Pz transfers data from Px to Pz between control units) – {P0-, P1-, P2-V0.P0, P3-V0.P1}, {P0-V3, P1-V3, P2-V4, P3-V5}</div>\r\n<div>4)ECC – {ip:port, virtual-to-plugin port relay (Vx.Py), ”signal name”, [opt: login data]} –  {111.22.33.44:56789, -1.P0, ”Wheels”}, {111.22.33.44:56789, -1.P1, ”Speed”}</div>\r\n</div>\r\n<div></div>\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 16:04:45','2014-08-22 15:04:45','',97,'https://moped.sics.se/?p=165',0,'revision','',0),(166,1,'2014-08-22 16:05:03','2014-08-22 15:05:03','','installation_message_pattern','','inherit','closed','open','','installation_message_pattern','','','2014-08-22 16:05:03','2014-08-22 15:05:03','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg',0,'attachment','image/jpeg',0),(168,1,'2014-08-22 16:11:10','2014-08-22 15:11:10','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\n&nbsp;\r\n\r\nare sent, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_messages_example.jpg\"><img class=\"aligncenter size-full wp-image-167\" alt=\"installation_messages_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_messages_example.jpg\" width=\"1176\" height=\"150\" /></a>\r\n\r\n,   through type I SW-C port, s2. This is captured by two installation messages on the form {message type, relay port (Vx), {”plugin name”, bytecode, contexts}} : 0, -1, {”COM”, com.jar, com.cntxt}} and {0, V2, {”OP”, op.jar, op.cntxt}}\r\n<div>1)Installation message – – {</div>\r\n<div>2)PIC – reserved plugin port ids – {P0-P3}, {P0-P3}</div>\r\n<div>3)PLC – plugin-to-virtual port linking (Px-Vy.Pz transfers data from Px to Pz between control units) – {P0-, P1-, P2-V0.P0, P3-V0.P1}, {P0-V3, P1-V3, P2-V4, P3-V5}</div>\r\n<div>4)ECC – {ip:port, virtual-to-plugin port relay (Vx.Py), ”signal name”, [opt: login data]} –  {111.22.33.44:56789, -1.P0, ”Wheels”}, {111.22.33.44:56789, -1.P1, ”Speed”}</div>\r\n</div>\r\n<div></div>\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 16:11:10','2014-08-22 15:11:10','',97,'https://moped.sics.se/?p=168',0,'revision','',0),(170,1,'2014-08-22 16:19:32','2014-08-22 15:19:32','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-169\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1236\" height=\"146\" /></a>\r\n\r\n,   through type I SW-C port, s2. This is captured by two installation messages on the form {message type, relay port (Vx), {”plugin name”, bytecode, contexts}} : 0, -1, {”COM”, com.jar, com.cntxt}} and {0, V2, {”OP”, op.jar, op.cntxt}}\r\n<div>1)Installation message – – {</div>\r\n<div>2)PIC – reserved plugin port ids – {P0-P3}, {P0-P3}</div>\r\n<div>3)PLC – plugin-to-virtual port linking (Px-Vy.Pz transfers data from Px to Pz between control units) – {P0-, P1-, P2-V0.P0, P3-V0.P1}, {P0-V3, P1-V3, P2-V4, P3-V5}</div>\r\n<div>4)ECC – {ip:port, virtual-to-plugin port relay (Vx.Py), ”signal name”, [opt: login data]} –  {111.22.33.44:56789, -1.P0, ”Wheels”}, {111.22.33.44:56789, -1.P1, ”Speed”}</div>\r\n</div>\r\n<div></div>\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 16:19:32','2014-08-22 15:19:32','',97,'https://moped.sics.se/?p=170',0,'revision','',0),(173,1,'2014-08-22 16:21:27','2014-08-22 15:21:27','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\n,   through type I SW-C port, s2. This is captured by two installation messages on the form {message type, relay port (Vx), {”plugin name”, bytecode, contexts}} : 0, -1, {”COM”, com.jar, com.cntxt}} and {0, V2, {”OP”, op.jar, op.cntxt}}\r\n<div>1)Installation message – – {</div>\r\n<div>2)PIC – reserved plugin port ids – {P0-P3}, {P0-P3}</div>\r\n<div>3)PLC – plugin-to-virtual port linking (Px-Vy.Pz transfers data from Px to Pz between control units) – {P0-, P1-, P2-V0.P0, P3-V0.P1}, {P0-V3, P1-V3, P2-V4, P3-V5}</div>\r\n<div>4)ECC – {ip:port, virtual-to-plugin port relay (Vx.Py), ”signal name”, [opt: login data]} –  {111.22.33.44:56789, -1.P0, ”Wheels”}, {111.22.33.44:56789, -1.P1, ”Speed”}</div>\r\n</div>\r\n<div></div>\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 16:21:27','2014-08-22 15:21:27','',97,'https://moped.sics.se/?p=173',0,'revision','',0),(174,1,'2014-08-22 16:23:04','2014-08-22 15:23:04','','installation_message_example','','inherit','closed','open','','installation_message_example','','','2014-08-22 16:23:04','2014-08-22 15:23:04','',0,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg',0,'attachment','image/jpeg',0),(175,1,'2014-08-22 16:29:32','2014-08-22 15:29:32','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. <strong>And here we have a tiny error (p0 and p1 should be connected to some vx, TBD).</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n</div>\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-22 16:29:32','2014-08-22 15:29:32','',97,'https://moped.sics.se/?p=175',0,'revision','',0),(176,1,'2014-08-25 16:27:11','2014-08-25 15:27:11','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n[caption id=\"attachment_188\" align=\"aligncenter\" width=\"687\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\" wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a> The structure of the open innovation platform server[/caption]\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n<ul>\r\n	<li>J. Axelsson and A. Kobetski. \"Architectural Concepts for Federated Embedded Systems\". In Proc. of the 2nd International Workshop on Software Engineering for Systems-of-Systems (SESoS\'14).</li>\r\n	<li>J. Axelsson, A. Kobetski, Z. Ni, S. Zhang and E. Johansson. \"MOPED: A Mobile Open Platform for Experimental Design of Cyber-Physical Systems\". In Proc. of the 40th Euromicro Conference on Software Engineering and Advanced Applications (SEAA\'14).</li>\r\n	<li>Z. Ni, A. Kobetski and J. Axelsson. \"Design and Implementation of a Dynamic Component Model for Federated AUTOSAR Systems\". In Proc of the Design and Automation Conference (DAC\'14).</li>\r\n	<li>J. Axelsson and A. Kobetski. On the Conceptual Design of a Dynamic Component Model for Reconfigurable AUTOSAR Systems. In Proc. of the 5th Workshop on Adaptive and Reconfigurable Embedded Systems, 2013.</li>\r\n	<li>A. Kobetski and J. Axelsson. On the Technological and Methodological Concepts of Federated Embedded Systems. In Proc. of the 1st Open Workshop on Cyber-Physical Systems Engineering, 2013.</li>\r\n	<li>S. Zhang, A. Kobetski, E. Johansson, J. Axelsson and H. Wang. Porting an AUTOSAR-Compliant Operating System to a High Performance Embedded Platform. In Proc. of the 3rd Embedded Operating Systems Workshop, 2013.</li>\r\n</ul>\r\n<span style=\"line-height: 1.5;\"> </span>\r\n\r\n</div>','Theoretical contributions','','inherit','closed','open','','97-autosave-v1','','','2014-08-25 16:27:11','2014-08-25 15:27:11','',97,'https://moped.sics.se/?p=176',0,'revision','',0),(177,1,'2014-08-25 10:09:53','2014-08-25 09:09:53','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\n</div>\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-25 10:09:53','2014-08-25 09:09:53','',97,'https://moped.sics.se/?p=177',0,'revision','',0),(178,1,'2014-08-25 10:10:26','2014-08-25 09:10:26','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amending this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments.\r\n\r\nThe information, collected here, consists of hardware configuration descriptions, open-source software binaries, together with installation instructions, needed to make the hardware come alive, as well as a more theoretical part that describes the architectural concepts that have been developed in parallel. Also, this site is intended as a <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems in particular, and FES systems in general.','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-25 10:10:26','2014-08-25 09:10:26','',27,'https://moped.sics.se/?p=178',0,'revision','',0),(179,1,'2014-08-25 10:24:29','2014-08-25 09:24:29','[gallery ids=\"75\"]\n\n<em><strong>Background</strong></em>\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\n\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amending this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments.\n\nThe platform is based on an RC car, equipped with a distributed control system, consisting of a number of Raspberry Pi (RPi) boards. The goal is to simulate typical behavior of an automotive electronic system, while providing the means for them to be easily upgradable with new software and allowing them to interact with each other and other embedded systems. The basic MOPED version, highlighted in a <a title=\"The MOPED demo movie\" href=\"https://www.youtube.com/watch?v=JJ4RdU0t0kA\" target=\"_blank\">short demo clip</a>, is equipped with two <a title=\"The AUTOSAR consortium\" href=\"http://www.autosar.org/\">AUTOSAR</a>-based RPis for vehicle control and one Linux-based RPi, for communication with a mobile phone to receive driving instructions.\n\nThe information, collected on this website, consists of hardware configuration descriptions, open-source software binaries, together with installation instructions, needed to make the hardware come alive, as well as a more theoretical part that describes the architectural concepts that have been developed in parallel. Also, this site is intended as a <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems in particular, and FES systems in general.','Home','','inherit','closed','open','','27-autosave-v1','','','2014-08-25 10:24:29','2014-08-25 09:24:29','',27,'https://moped.sics.se/?p=179',0,'revision','',0),(180,1,'2014-08-25 10:24:34','2014-08-25 09:24:34','[gallery ids=\"75\"]\r\n\r\n<em><strong>Background</strong></em>\r\nThe role of computing devices, embedded into everyday objects, has grown tremendously over the last two decades. The more recent advances in communication technology has opened up for another huge technological leap, namely embedded devices communicating with each other and thus offering new services to their users. This vision has attracted attention from numerous research and development groups, each approaching it from a different direction, and consequently producing various technical terms, such as Federated Embedded Systems (FES), Internet of Things, Cyber-Physical Systems (CPS), Multi-Agent Systems, and Systems of Systems, to mention just a few.\r\n\r\nWhile the development pace of FES is accelerating on the global scale, there is still a lack of comprehensive and accessible experimental platforms for such interconnected embedded systems. This web site is dedicated to amending this shortcoming, by presenting a mobile open platform for experimental development (MOPED) of FES (or CPS in general), developed in a research project on FES architecture and primarily intended for use in research and education environments.\r\n\r\nThe platform is based on an RC car, equipped with a distributed control system, consisting of a number of Raspberry Pi (RPi) boards. The goal is to simulate typical behavior of an automotive electronic system, while providing the means for them to be easily upgradable with new software and allowing them to interact with each other and other embedded systems. The basic MOPED version, highlighted in a <a title=\"The MOPED demo movie\" href=\"https://www.youtube.com/watch?v=JJ4RdU0t0kA\" target=\"_blank\">short demo clip</a>, is equipped with two <a title=\"The AUTOSAR consortium\" href=\"http://www.autosar.org/\">AUTOSAR</a>-based RPis for vehicle control and one Linux-based RPi, for communication with a mobile phone to receive driving instructions.\r\n\r\nThe information, collected on this website, consists of hardware configuration descriptions, open-source software binaries, together with installation instructions, needed to make the hardware come alive, as well as a more theoretical part that describes the architectural concepts that have been developed in parallel. Also, this site is intended as a <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">portal for open innovation</a> and collaboration on FES, with a database of plugin software for dynamic reconfiguration of MOPED systems in particular, and FES systems in general.','Home','','inherit','closed','open','','27-revision-v1','','','2014-08-25 10:24:34','2014-08-25 09:24:34','',27,'https://moped.sics.se/?p=180',0,'revision','',0),(181,1,'2014-08-25 10:25:28','2014-08-25 09:25:28','[contentmirror site=undefined posttype=page item=93]','Overview','','publish','closed','open','','overview','','','2014-09-08 09:07:34','2014-09-08 08:07:34','',93,'https://moped.sics.se/?page_id=181',0,'page','',0),(182,1,'2014-08-25 10:25:28','2014-08-25 09:25:28','','Overview','','inherit','closed','open','','181-revision-v1','','','2014-08-25 10:25:28','2014-08-25 09:25:28','',181,'https://moped.sics.se/?p=182',0,'revision','',0),(185,1,'2014-08-25 12:26:12','2014-08-25 11:26:12','[contentmirror site=undefined posttype=page item=95]','Overview','','publish','closed','open','','overview','','','2014-09-08 09:08:22','2014-09-08 08:08:22','',95,'https://moped.sics.se/?page_id=185',0,'page','',0),(186,1,'2014-08-25 12:26:12','2014-08-25 11:26:12','','Overview','','inherit','closed','open','','185-revision-v1','','','2014-08-25 12:26:12','2014-08-25 11:26:12','',185,'https://moped.sics.se/?p=186',0,'revision','',0),(187,1,'2014-08-25 16:10:15','2014-08-25 15:10:15','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively, as shown in the below Figure. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n</div>\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-25 16:10:15','2014-08-25 15:10:15','',97,'https://moped.sics.se/?p=187',0,'revision','',0),(188,1,'2014-08-25 16:10:31','2014-08-25 15:10:31','','server','','inherit','closed','open','','server','','','2014-08-25 16:10:31','2014-08-25 15:10:31','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg',0,'attachment','image/jpeg',0),(189,1,'2014-08-25 16:15:11','2014-08-25 15:15:11','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n</div>\r\n&nbsp;','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-08-25 16:15:11','2014-08-25 15:15:11','',97,'https://moped.sics.se/?p=189',0,'revision','',0),(190,1,'2014-09-08 09:04:47','2014-09-08 08:04:47','[contentmirror site=undefined posttype=page item=93]','Hardware configuration','','inherit','closed','open','','185-autosave-v1','','','2014-09-08 09:04:47','2014-09-08 08:04:47','',185,'https://moped.sics.se/?p=190',0,'revision','',0),(191,1,'2014-09-08 09:04:56','2014-09-08 08:04:56','[contentmirror site=undefined posttype=page item=93]','Hardware configuration','','inherit','closed','open','','185-revision-v1','','','2014-09-08 09:04:56','2014-09-08 08:04:56','',185,'https://moped.sics.se/?p=191',0,'revision','',0),(192,1,'2014-09-08 09:06:04','2014-09-08 08:06:04','[contentmirror site=undefined posttype=page item=93]','Overview','','inherit','closed','open','','185-revision-v1','','','2014-09-08 09:06:04','2014-09-08 08:06:04','',185,'https://moped.sics.se/?p=192',0,'revision','',0),(193,1,'2014-09-08 09:06:52','2014-09-08 08:06:52','[contentmirror site=undefined posttype=page item=93]','Hardware configuration','','inherit','closed','open','','181-revision-v1','','','2014-09-08 09:06:52','2014-09-08 08:06:52','',181,'https://moped.sics.se/?p=193',0,'revision','',0),(194,1,'2014-09-08 09:07:34','2014-09-08 08:07:34','[contentmirror site=undefined posttype=page item=93]','Overview','','inherit','closed','open','','181-revision-v1','','','2014-09-08 09:07:34','2014-09-08 08:07:34','',181,'https://moped.sics.se/?p=194',0,'revision','',0),(195,1,'2014-09-08 09:07:55','2014-09-08 08:07:55','[contentmirror site=undefined posttype=page item=95]','Overview','','inherit','closed','open','','185-revision-v1','','','2014-09-08 09:07:55','2014-09-08 08:07:55','',185,'https://moped.sics.se/?p=195',0,'revision','',0),(203,1,'2014-12-22 13:37:46','2014-12-22 12:37:46','<em><strong>Work in progress:</strong></em>\n<ul>\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\n	<li>Installation and set up of the trusted server</li>\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\n	<li>PlugIn Development APIs is application i</li>\n</ul>','Installation instructions','','inherit','closed','open','','127-autosave-v1','','','2014-12-22 13:37:46','2014-12-22 12:37:46','',127,'https://moped.sics.se/?p=203',0,'revision','',0),(205,1,'2014-12-11 09:06:41','2014-12-11 08:06:41','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server.</li>\r\n	<li>Installation packages and instructions for the simulation tool.</li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). To install it on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is actually the most tricky part of the WirelessIno installation. Next, download the .apk-file to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-11 09:06:41','2014-12-11 08:06:41','',127,'https://moped.sics.se/?p=205',0,'revision','',0),(206,1,'2014-12-11 09:15:54','2014-12-11 08:15:54','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server.</li>\r\n	<li>Installation packages and instructions for the simulation tool.</li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). To install it on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is actually the most tricky part of the WirelessIno installation. Next, download the .apk-file to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-11 09:15:54','2014-12-11 08:15:54','',127,'https://moped.sics.se/?p=206',0,'revision','',0),(207,1,'2014-12-11 09:57:35','2014-12-11 08:57:35','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server.</li>\r\n	<li>Installation packages and instructions for the simulation tool.</li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). To install it on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is actually the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">WirelessIno</a> .apk to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-11 09:57:35','2014-12-11 08:57:35','',127,'https://moped.sics.se/?p=207',0,'revision','',0),(208,1,'2014-12-11 10:01:26','2014-12-11 09:01:26','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">WirelessIno</a> .apk to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>Installation of kernel.img, which includes OS and the drivers, <strong>[make a link (github?)].</strong></li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-11 10:01:26','2014-12-11 09:01:26','',127,'https://moped.sics.se/?p=208',0,'revision','',0),(210,1,'2014-12-11 10:05:28','2014-12-11 09:05:28','','kernel_SCU','','inherit','closed','open','','kernel_scu','','','2014-12-11 10:05:28','2014-12-11 09:05:28','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img',0,'attachment','application/x-raw-disk-image',0),(212,1,'2014-12-11 10:06:06','2014-12-11 09:06:06','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">WirelessIno</a> .apk to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi instructions (lin). Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-11 10:06:06','2014-12-11 09:06:06','',127,'https://moped.sics.se/?p=212',0,'revision','',0),(213,1,'2014-12-11 10:24:58','2014-12-11 09:24:58','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">WirelessIno</a> .apk to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-11 10:24:58','2014-12-11 09:24:58','',127,'https://moped.sics.se/?p=213',0,'revision','',0),(215,16,'2014-12-12 09:17:29','2014-12-12 08:17:29','<strong><em>--- Under construction ---</em></strong>\r\n\r\n<strong>How to charge a LiPo battery?</strong>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 09:17:29','2014-12-12 08:17:29','',101,'https://moped.sics.se/?p=215',0,'revision','',0),(216,16,'2014-12-12 09:18:32','2014-12-12 08:18:32','','LiPo_charging','','inherit','closed','open','','lipo_charging','','','2014-12-12 09:18:32','2014-12-12 08:18:32','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg',0,'attachment','image/jpeg',0),(218,16,'2014-12-12 09:37:01','2014-12-12 08:37:01','<strong><em>--- Under construction ---</em></strong>\r\n\r\n<em><strong>How to charge a LiPo battery?</strong></em>\r\n\r\n&nbsp;\r\n<ol>\r\n	<li>Connect the power supply, for example Turnigy, and the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li><span style=\"line-height: 1.5;\">Before turning on the power supply, switch the current and voltage wheels to minimum values.</span></li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max (the upper wheel on the power supply box).</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Choose appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li>Press enter/start and hold until it beeps, which means that the charging has started. The current value on the power supply box (upper display) should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy.</li>\r\n	<li>Turn off the power supply.</li>\r\n</ol>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 09:37:01','2014-12-12 08:37:01','',101,'https://moped.sics.se/?p=218',0,'revision','',0),(220,16,'2014-12-12 09:48:43','2014-12-12 08:48:43','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply and the charger, for example Turnigy, to the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max.</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left buttons on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy and turn off the power supply.</li>\r\n</ol>','Battery charging','','publish','closed','open','','battery-charging','','','2015-10-29 15:59:18','2015-10-29 14:59:18','',93,'https://moped.sics.se/?page_id=220',0,'page','',0),(221,16,'2014-12-12 09:40:32','2014-12-12 08:40:32','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply, for example Turnigy, and the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max (the upper wheel on the power supply box).</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li>Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box (upper display) should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy.</li>\r\n	<li>Turn off the power supply.</li>\r\n</ol>','How to charge a LiPo battery?','','inherit','closed','open','','220-revision-v1','','','2014-12-12 09:40:32','2014-12-12 08:40:32','',220,'https://moped.sics.se/?p=221',0,'revision','',0),(222,16,'2014-12-12 09:47:14','2014-12-12 08:47:14','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply, for example Turnigy, and the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max (the upper wheel on the power supply box).</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box (upper display) should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy and turn off the power supply.</li>\r\n</ol>','How to charge a LiPo battery?','','inherit','closed','open','','220-revision-v1','','','2014-12-12 09:47:14','2014-12-12 08:47:14','',220,'https://moped.sics.se/?p=222',0,'revision','',0),(223,16,'2014-12-12 09:47:26','2014-12-12 08:47:26','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply, for example Turnigy, and the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max (the upper wheel on the power supply box).</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box (upper display) should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy and turn off the power supply.</li>\r\n</ol>','Battery charging','','inherit','closed','open','','220-revision-v1','','','2014-12-12 09:47:26','2014-12-12 08:47:26','',220,'https://moped.sics.se/?p=223',0,'revision','',0),(224,16,'2014-12-12 09:48:43','2014-12-12 08:48:43','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply, for example Turnigy, and the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max (the upper wheel on the power supply box).</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left buttons on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box (upper display) should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy and turn off the power supply.</li>\r\n</ol>','Battery charging','','inherit','closed','open','','220-revision-v1','','','2014-12-12 09:48:43','2014-12-12 08:48:43','',220,'https://moped.sics.se/?p=224',0,'revision','',0),(225,16,'2014-12-12 09:52:10','2014-12-12 08:52:10','<strong><em>--- Under construction ---</em></strong>\r\n<ul>\r\n	<li><a title=\"Battery charging\" href=\"https://moped.sics.se/?page_id=220\">How to charge a LiPo battery?</a></li>\r\n</ul>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 09:52:10','2014-12-12 08:52:10','',101,'https://moped.sics.se/?p=225',0,'revision','',0),(226,16,'2014-12-12 11:50:43','2014-12-12 10:50:43','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply and the charger, for example Turnigy, to the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max (the upper wheel on the power supply box).</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left buttons on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box (upper display) should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy and turn off the power supply.</li>\r\n</ol>','Battery charging','','inherit','closed','open','','220-revision-v1','','','2014-12-12 11:50:43','2014-12-12 10:50:43','',220,'https://moped.sics.se/?p=226',0,'revision','',0),(228,16,'2014-12-12 13:23:25','2014-12-12 12:23:25','','motor_gear','','inherit','closed','open','','motor_gear','','','2014-12-12 13:23:25','2014-12-12 12:23:25','',93,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear.jpg',0,'attachment','image/jpeg',0),(232,16,'2014-12-12 13:45:56','2014-12-12 12:45:56','','5V_dist_board','','inherit','closed','open','','5v_dist_board','','','2014-12-12 13:45:56','2014-12-12 12:45:56','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg',0,'attachment','image/jpeg',0),(233,16,'2014-12-12 13:45:57','2014-12-12 12:45:57','','adc_board','','inherit','closed','open','','adc_board','','','2014-12-12 13:45:57','2014-12-12 12:45:57','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg',0,'attachment','image/jpeg',0),(234,16,'2014-12-12 13:45:57','2014-12-12 12:45:57','','can_board','','inherit','closed','open','','can_board','','','2014-12-12 13:45:57','2014-12-12 12:45:57','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg',0,'attachment','image/jpeg',0),(235,16,'2014-12-12 13:45:57','2014-12-12 12:45:57','','empty_chassis','','inherit','closed','open','','empty_chassis','','','2014-12-12 13:45:57','2014-12-12 12:45:57','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg',0,'attachment','image/jpeg',0),(236,16,'2014-12-12 13:45:57','2014-12-12 12:45:57','','imu_board','','inherit','closed','open','','imu_board','','','2014-12-12 13:45:57','2014-12-12 12:45:57','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg',0,'attachment','image/jpeg',0),(237,16,'2014-12-12 13:45:57','2014-12-12 12:45:57','','moped_car','','inherit','closed','open','','moped_car-2','','','2014-12-12 13:45:57','2014-12-12 12:45:57','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg',0,'attachment','image/jpeg',0),(238,16,'2014-12-12 13:45:58','2014-12-12 12:45:58','','motor_gear','','inherit','closed','open','','motor_gear-2','','','2014-12-12 13:45:58','2014-12-12 12:45:58','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg',0,'attachment','image/jpeg',0),(239,16,'2014-12-12 13:45:58','2014-12-12 12:45:58','','motor_wires','','inherit','closed','open','','motor_wires','','','2014-12-12 13:45:58','2014-12-12 12:45:58','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg',0,'attachment','image/jpeg',0),(240,16,'2014-12-12 13:45:58','2014-12-12 12:45:58','','power_dist_cords','','inherit','closed','open','','power_dist_cords-2','','','2014-12-12 13:45:58','2014-12-12 12:45:58','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg',0,'attachment','image/jpeg',0),(241,16,'2014-12-12 13:45:58','2014-12-12 12:45:58','','rpi_fasteners','','inherit','closed','open','','rpi_fasteners','','','2014-12-12 13:45:58','2014-12-12 12:45:58','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg',0,'attachment','image/jpeg',0),(242,16,'2014-12-12 13:45:58','2014-12-12 12:45:58','','rpis','','inherit','closed','open','','rpis','','','2014-12-12 13:45:58','2014-12-12 12:45:58','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg',0,'attachment','image/jpeg',0),(243,16,'2014-12-12 13:45:59','2014-12-12 12:45:59','','speed_controller_mounting','','inherit','closed','open','','speed_controller_mounting','','','2014-12-12 13:45:59','2014-12-12 12:45:59','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg',0,'attachment','image/jpeg',0),(244,16,'2014-12-12 13:45:59','2014-12-12 12:45:59','','speed_controller_wires','','inherit','closed','open','','speed_controller_wires','','','2014-12-12 13:45:59','2014-12-12 12:45:59','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg',0,'attachment','image/jpeg',0),(245,16,'2014-12-12 13:45:59','2014-12-12 12:45:59','','speed_servo_controller','','inherit','closed','open','','speed_servo_controller','','','2014-12-12 13:45:59','2014-12-12 12:45:59','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg',0,'attachment','image/jpeg',0),(246,16,'2014-12-12 13:45:59','2014-12-12 12:45:59','','ultrasonic','','inherit','closed','open','','ultrasonic','','','2014-12-12 13:45:59','2014-12-12 12:45:59','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg',0,'attachment','image/jpeg',0),(247,16,'2014-12-12 13:45:59','2014-12-12 12:45:59','','wheel_sensor','','inherit','closed','open','','wheel_sensor','','','2014-12-12 13:45:59','2014-12-12 12:45:59','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg',0,'attachment','image/jpeg',0),(248,16,'2014-12-12 13:45:59','2014-12-12 12:45:59','','wheel_sensor_cables','','inherit','closed','open','','wheel_sensor_cables','','','2014-12-12 13:45:59','2014-12-12 12:45:59','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg',0,'attachment','image/jpeg',0),(249,16,'2014-12-12 13:46:00','2014-12-12 12:46:00','','wheel_strips','','inherit','closed','open','','wheel_strips','','','2014-12-12 13:46:00','2014-12-12 12:46:00','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg',0,'attachment','image/jpeg',0),(250,16,'2014-12-12 13:48:05','2014-12-12 12:48:05','<strong><em>--- Under construction ---</em></strong>\r\n<ul>\r\n	<li><a title=\"Battery charging\" href=\"https://moped.sics.se/?page_id=220\">How to charge a LiPo battery?</a></li>\r\n</ul>\r\nThis build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car.jpg\"><img class=\"alignnone size-full wp-image-230\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car.jpg\" width=\"945\" height=\"708\" /></a>\r\n\r\nHW TABLE (LINK)\r\n<blockquote><strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\"alignnone size-full wp-image-235\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"506\" height=\"380\" /></a>\r\n\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li>Disassemble the motor by first removing the motor cover.</li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\"alignnone size-full wp-image-238\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"850\" height=\"310\" /></a>\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n\r\nRoute the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\"alignnone size-full wp-image-239\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"414\" height=\"310\" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 13:48:05','2014-12-12 12:48:05','',101,'https://moped.sics.se/?p=250',0,'revision','',0),(251,16,'2014-12-12 13:48:34','2014-12-12 12:48:34','<strong><em>--- Under construction ---</em></strong>\r\n<ul>\r\n	<li><a title=\"Battery charging\" href=\"https://moped.sics.se/?page_id=220\">How to charge a LiPo battery?</a></li>\r\n</ul>\r\nThis build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\"alignnone size-full wp-image-237\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"945\" height=\"708\" /></a>\r\n\r\nHW TABLE (LINK)\r\n<blockquote><strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\"alignnone size-full wp-image-235\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"506\" height=\"380\" /></a>\r\n\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li>Disassemble the motor by first removing the motor cover.</li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\"alignnone size-full wp-image-238\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"850\" height=\"310\" /></a>\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n\r\nRoute the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\"alignnone size-full wp-image-239\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"414\" height=\"310\" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 13:48:34','2014-12-12 12:48:34','',101,'https://moped.sics.se/?p=251',0,'revision','',0),(252,16,'2014-12-12 13:54:20','2014-12-12 12:54:20','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\"alignnone size-full wp-image-237\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"945\" height=\"708\" /></a>\r\n\r\nHW TABLE (LINK)\r\n<blockquote><strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\"alignnone size-full wp-image-235\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"506\" height=\"380\" /></a>\r\n\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li>Disassemble the motor by first removing the motor cover.</li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\"alignnone size-full wp-image-238\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"850\" height=\"310\" /></a>\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n\r\nRoute the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\"alignnone size-full wp-image-239\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"414\" height=\"310\" /></a>\r\n\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\"alignnone size-full wp-image-244\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a>\r\n\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\"alignnone size-full wp-image-243\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"840\" height=\"415\" /></a>\r\n\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\"alignnone size-full wp-image-249\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"414\" height=\"310\" /></a>\r\n\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\"alignnone size-full wp-image-247\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"815\" height=\"414\" /></a>\r\n\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\"alignnone size-full wp-image-248\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"413\" height=\"310\" /></a>\r\n\r\n&nbsp;\r\n\r\n<strong><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\"alignnone size-full wp-image-245\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a>\r\n\r\n&nbsp;\r\n\r\n<strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\"alignnone size-full wp-image-232\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a>\r\n\r\n&nbsp;\r\n\r\n<em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\"alignnone size-full wp-image-240\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a>\r\n\r\n&nbsp;\r\n\r\n<em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\"alignnone size-full wp-image-246\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"901\" height=\"310\" /></a>\r\n\r\n&nbsp;\r\n\r\n<em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n\r\n&nbsp;','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 13:54:20','2014-12-12 12:54:20','',101,'https://moped.sics.se/?p=252',0,'revision','',0),(253,16,'2014-12-12 13:58:23','2014-12-12 12:58:23','','moped_car_high_res','','inherit','closed','open','','moped_car_high_res','','','2014-12-12 13:58:23','2014-12-12 12:58:23','',101,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg',0,'attachment','image/jpeg',0),(254,16,'2014-12-12 14:04:13','2014-12-12 13:04:13','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\nHW TABLE (LINK)\r\n<blockquote><strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n&nbsp;\r\n\r\n<em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n&nbsp;\r\n\r\nThe A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n&nbsp;\r\n\r\nMount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nSolder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n&nbsp;\r\n\r\nIf CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nIf Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 14:04:13','2014-12-12 13:04:13','',101,'https://moped.sics.se/?p=254',0,'revision','',0),(255,16,'2014-12-12 14:09:11','2014-12-12 13:09:11','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E14</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet Switch</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DLINK DES-105</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010620335</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H1,H2,H3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010379761</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">&nbsp;</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">&nbsp;</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote>&nbsp;\r\n\r\n<strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n&nbsp;\r\n\r\n<em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n&nbsp;\r\n\r\nThe A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n&nbsp;\r\n\r\nMount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nSolder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n&nbsp;\r\n\r\nIf CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nIf Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 14:09:11','2014-12-12 13:09:11','',101,'https://moped.sics.se/?p=255',0,'revision','',0),(256,16,'2014-12-12 14:09:25','2014-12-12 13:09:25','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E14</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet Switch</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DLINK DES-105</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010620335</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H1,H2,H3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010379761</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote>&nbsp;\r\n\r\n<strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n&nbsp;\r\n\r\n<em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n&nbsp;\r\n\r\nThe A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n&nbsp;\r\n\r\nMount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nSolder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n&nbsp;\r\n\r\nIf CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nIf Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 14:09:25','2014-12-12 13:09:25','',101,'https://moped.sics.se/?p=256',0,'revision','',0),(257,16,'2014-12-12 14:09:52','2014-12-12 13:09:52','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E14</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet Switch</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DLINK DES-105</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010620335</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H1,H2,H3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010379761</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote> <strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n&nbsp;\r\n\r\n<em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n&nbsp;\r\n\r\nThe A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n&nbsp;\r\n\r\nMount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nSolder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n&nbsp;\r\n\r\nIf CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nIf Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 14:09:52','2014-12-12 13:09:52','',101,'https://moped.sics.se/?p=257',0,'revision','',0),(258,16,'2014-12-12 14:10:25','2014-12-12 13:10:25','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E14</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet Switch</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DLINK DES-105</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010620335</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H1,H2,H3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010379761</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote> <strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n <em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n&nbsp;\r\n\r\nThe A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n&nbsp;\r\n\r\nMount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nSolder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n&nbsp;\r\n\r\nIf CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\n&nbsp;\r\n\r\nIf Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 14:10:25','2014-12-12 13:10:25','',101,'https://moped.sics.se/?p=258',0,'revision','',0),(259,16,'2014-12-12 14:10:54','2014-12-12 13:10:54','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E14</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet Switch</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DLINK DES-105</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010620335</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H1,H2,H3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010379761</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote> <strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n <em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n The A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n<span style=\"line-height: 1.5;\">Mount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.</span>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n Solder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n If CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\n If Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2014-12-12 14:10:54','2014-12-12 13:10:54','',101,'https://moped.sics.se/?p=259',0,'revision','',0),(261,16,'2014-12-19 08:44:17','2014-12-19 07:44:17','','WirelessIno','','inherit','closed','open','','wirelessino','','','2014-12-19 08:44:17','2014-12-19 07:44:17','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk',0,'attachment','application/vnd.android.package-archive',0),(263,16,'2014-12-19 09:11:39','2014-12-19 08:11:39','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-19 09:11:39','2014-12-19 08:11:39','',127,'https://moped.sics.se/?p=263',0,'revision','',0),(264,1,'2014-12-19 14:45:33','2014-12-19 13:45:33','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li>PlugIn Zip Generator is a tool  to package Java class file into .zip file which is acceptable file format for upload</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-19 14:45:33','2014-12-19 13:45:33','',127,'https://moped.sics.se/?p=264',0,'revision','',0),(265,1,'2014-12-19 14:46:22','2014-12-19 13:46:22','It is to package Java PlugIn class file into .zip file which is only acceptable executable file except .xml (plugin configuration file)','PluginZipFileGenerator-0.0.1-SNAPSHOT','PlugIn Zip File Generator','inherit','closed','open','','pluginzipfilegenerator-0-0-1-snapshot','','','2014-12-19 14:46:22','2014-12-19 13:46:22','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/12/PluginZipFileGenerator-0.0.1-SNAPSHOT.jar',0,'attachment','application/x-java-archive',0),(266,1,'2014-12-19 14:49:46','2014-12-19 13:49:46','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/?attachment_id=265\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-19 14:49:46','2014-12-19 13:49:46','',127,'https://moped.sics.se/?p=266',0,'revision','',0),(267,1,'2014-12-19 14:50:58','2014-12-19 13:50:58','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/PluginZipFileGenerator-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-19 14:50:58','2014-12-19 13:50:58','',127,'https://moped.sics.se/?p=267',0,'revision','',0),(269,1,'2014-12-19 15:05:29','2014-12-19 14:05:29','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/PluginZipFileGenerator-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which must be imported to a new Java project in Eclipse when develop a new PlugIn.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-19 15:05:29','2014-12-19 14:05:29','',127,'https://moped.sics.se/?p=269',0,'revision','',0),(271,1,'2014-12-22 10:06:45','2014-12-22 09:06:45','base library to compile PlugIn','cldc-1.1-java5.0','cldc-1.1','inherit','closed','open','','cldc-1-1-java5-0','','','2014-12-22 10:06:45','2014-12-22 09:06:45','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar',0,'attachment','application/x-java-archive',0),(272,1,'2014-12-22 10:18:57','2014-12-22 09:18:57','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/PluginZipFileGenerator-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-22 10:18:57','2014-12-22 09:18:57','',127,'https://moped.sics.se/?p=272',0,'revision','',0),(273,1,'2014-12-22 11:06:25','2014-12-22 10:06:25','','api-0.0.1-SNAPSHOT','','inherit','closed','open','','api-0-0-1-snapshot','','','2014-12-22 11:06:25','2014-12-22 10:06:25','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar',0,'attachment','application/x-java-archive',0),(274,1,'2014-12-22 11:07:14','2014-12-22 10:07:14','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-22 11:07:14','2014-12-22 10:07:14','',127,'https://moped.sics.se/?p=274',0,'revision','',0),(276,1,'2014-12-22 13:35:40','2014-12-22 12:35:40','','apidocs','','inherit','closed','open','','apidocs','','','2014-12-22 13:35:40','2014-12-22 12:35:40','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/12/apidocs.zip',0,'attachment','application/zip',0),(277,1,'2014-12-22 13:38:28','2014-12-22 12:38:28','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://twiki.sics.se/bin/view/FRESTA/Deliverables\">Source files</a></li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-22 13:38:28','2014-12-22 12:38:28','',127,'https://moped.sics.se/?p=277',0,'revision','',0),(278,16,'2014-12-23 08:02:46','2014-12-23 07:02:46','','ewili13','','inherit','closed','open','','ewili13','','','2014-12-23 08:02:46','2014-12-23 07:02:46','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf',0,'attachment','application/pdf',0),(279,16,'2014-12-23 08:13:18','2014-12-23 07:13:18','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n</div>\r\nPorting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)\r\n\r\nMore details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.\r\n\r\nThe <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.','Theoretical contributions','','inherit','closed','open','','97-autosave-v1','','','2014-12-23 08:13:18','2014-12-23 07:13:18','',97,'https://moped.sics.se/?p=279',0,'revision','',0),(280,16,'2014-12-23 08:05:09','2014-12-23 07:05:09','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n</div>\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">Porting of AUTOSAR OS to Raspberry Pi hardware. </a>','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-12-23 08:05:09','2014-12-23 07:05:09','',97,'https://moped.sics.se/?p=280',0,'revision','',0),(281,16,'2014-12-23 08:05:43','2014-12-23 07:05:43','','dac14','','inherit','closed','open','','dac14','','','2014-12-23 08:05:43','2014-12-23 07:05:43','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf',0,'attachment','application/pdf',0),(282,16,'2014-12-23 08:06:32','2014-12-23 07:06:32','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n</div>\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">Porting of Autosar OS to Raspberry Pi hardware. </a>\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">More details on the dynamic Autosar concept.  </a>','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-12-23 08:06:32','2014-12-23 07:06:32','',97,'https://moped.sics.se/?p=282',0,'revision','',0),(283,16,'2014-12-23 08:07:24','2014-12-23 07:07:24','','MOPED','','inherit','closed','open','','moped','','','2014-12-23 08:07:24','2014-12-23 07:07:24','',97,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf',0,'attachment','application/pdf',0),(284,16,'2014-12-23 08:13:37','2014-12-23 07:13:37','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Relevant publications</strong></em>\r\n\r\n</div>\r\nPorting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)\r\n\r\nMore details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.\r\n\r\nThe <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-12-23 08:13:37','2014-12-23 07:13:37','',97,'https://moped.sics.se/?p=284',0,'revision','',0),(286,16,'2014-12-23 10:00:03','2014-12-23 09:00:03','Here, main software elements, included into the MOPED platform, are shortly outlined. The interested reader is referred to the theoretical section for more details on the concepts, while the more impatient reader is advised to proceed to the step-by-step <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.\r\n\r\n<strong><em>ECU software architecture</em></strong>\r\n\r\nAn important design choice was to make the software configuration as realistic as possible, tightly related to the technology that is actually used in real embedded systems. For a vehicular platform, an obvious choice was to base the ECU software on the <a title=\"The autosar consortium\" href=\"http://www.autosar.org/\" target=\"_blank\">AUTOSAR</a> standard, being the currently prevailing software architecture standard in the automotive segment. <span style=\"line-height: 1.5;\">The implementation chosen was <a title=\"The Arctic Core product page\" href=\"http://www.arccore.com/products/arctic-core/\" target=\"_blank\">Arctic Core</a>, one of the very few open-source </span>implementations available with full AUTOSAR support. The implementation used corresponds to version 4 of the AUTOSAR standard.\r\n\r\nAUTOSAR is a layered software architecture that decouples application software from lower level basic software (BSW) by means of a standardized middleware called runtime environment (RTE). This allows running the same application software seamlessly on different hardware platforms, as long as the underlying hardware is linked with the RTE through appropriate BSW. The BSW consists of an operating system that has evolved from the OSEK standard; system services for e.g., memory management; communication concepts; ECU and microcontroller abstraction layers; and complex device\r\ndrivers for direct access to hardware.\r\n\r\n[caption id=\"attachment_118\" align=\"aligncenter\" width=\"514\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\"><img class=\" wp-image-118\" alt=\"autosar_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/autosar_architecture.jpg\" width=\"514\" height=\"480\" /></a> The AUTOSAR architecture[/caption]\r\n\r\nThe application software typically consists of a number of software components (SW-C). Each SW-C declares a number of ports for communication with the rest of the system. They can be either required ports (meaning that the component is expecting some input) or provided ports (used by the SW-C for its output). The ports can implement different interaction schemes, including sender-receiver or client-server. The internal functionality, or the runnable, of the component only accesses its ports, and not any other components, which promotes reuse and transferability of SW-Cs between ECUs. The runnables are mapped to OS tasks. SW-Cs can also be composite, i.e. containing other SW-Cs inside.\r\n\r\n<em><strong>Porting AUTOSAR to Raspberry Pi</strong></em>\r\n\r\nFirst of all, necessary low level software needs to be put in place to glue together higher level software with the underlying Raspberry Pi hardware. This involves modifications of OS functionality such as boot loader, initialization, memory model, context switching, and exception handling. It also includes writing device drivers for various I/O types, such as the general-purpose I/O, UART, SPI, I2C, Ethernet, and CAN. More details on the porting process can be found <a title=\"Porting AUTOSAR to Raspberry Pi (article)\" href=\"http://sigbed.seas.upenn.edu/archives/2014-02/ewili13_submission_9.pdf\" target=\"_blank\">here</a>.\r\n\r\nCurrent version of the AUTOSAR basic software, targeting Raspberry Pi hardware, is shipped in the form of a kernel.img-file, ready to be deployed on a Raspberry Pi board. See the installation instructions page for more detail on how to set up the basic AUTOSAR software on a Raspberry Pi.\r\n\r\n<em><strong>Dynamic application software</strong></em>\r\n\r\nOrdinary AUTOSAR software is static, once the configuration phase is over and the vehicle has left the factory. This hinders the development of new kinds of applications and interactions between embedded systems. To resolve this limitation, AUTOSAR concepts have been extended with dynamic behavior, presented in more detail <a title=\"Theoretical contributions\" href=\"https://moped.sics.se/?page_id=97\">here</a>.\r\n\r\nTo put it shortly, the dynamic concepts that have been developed involve the definition of two types of dedicated SW-Cs. One is called the external communication manager (ECM) and is responsible for downloading  new software and communicating with other systems. The software components of the other type, called plugin SW-Cs, serve as the actual containers for the additional software.\r\n\r\nThe dynamic SW-Cs also contain a static side, regarding their connections to the underlying system. These connections (ports) must be supplied at the design time by the vehicle manufacturer and serve as an API to the developers of plugin software. The interface between the dynamic elements of plugin software and the static ports of a plugin SW-C is handled by a middleware, called the plugin runtime environment (PIRTE).\r\n\r\nIn our approach, Java was the choice of programming language for the additional software, in order to promote its transferability. Thus, each plugin SW-C contains a Squawk Java virtual machine. Further, PIRTE exists in two flavors, one for each type of dynamic SW-Cs, and comes bundled together with the Squawk JVM. Step-by-step installation instructions, collected <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>, allow to set up the system for future addition of plugin software.\r\n\r\n<em><strong>Server-side software</strong></em>\r\n\r\nThe additional application software is delivered to the embedded system through a pre-defined trusted server. An application may consist of several interacting plugin components and sometimes rely on certain basic software functionality and even earlier installed plugins. It falls under PIRTE\'s responsibility to set up proper communication channels for the additional software internally. H<span style=\"line-height: 1.5;\">owever, to reduce the computational load on the ECUs, it was decided to store the description of how this should be done externally and deploy it together with the binaries.</span>\r\n\r\n[caption id=\"attachment_149\" align=\"aligncenter\" width=\"869\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\"><img class=\" wp-image-149\" alt=\"ecm_server_communication\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ecm_server_communication.jpg\" width=\"869\" height=\"576\" /></a> The plugin installation process.[/caption]\r\n\r\n&nbsp;\r\n\r\n<span style=\"line-height: 1.5;\">Since the configuration description will generally differ depending on the underlying hardware and software, </span><span style=\"line-height: 1.5;\">the application server needs to keep track not only of the different hardware models, but also of the basic and additional software, currently installed. Typically, the information about necessary connections is provided by the application developer and synthesized on the server-side into PIRTE-readable format, taking into account the actual configuration of the target system. The server becomes thus an important point of intelligence for managing different plugins and their positive and negative interactions. The steps to set up an application server are listed <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">here</a>. </span>\r\n\r\n<span style=\"line-height: 1.5;\">Also, it should be possible to publish information to another device or a server. The functionality for doing so is included into the ECM PIRTE, while the actual activation of this functionality is done by supplying proper configuration, which is best described by an <a title=\"Example application\" href=\"https://moped.sics.se/?page_id=136\">example application</a>.</span>\r\n\r\n<em><strong>Simulation software</strong></em>\r\n\r\nTypically, an application developer has a limited access to appropriate hardware, especially one that is AUTOSAR-compliant. Thus, the MOPED platform includes simulation tools for representing message transfer between SW-Cs, as well as between SW-C and basic software, in a distributed AUTOSAR system. In such a way, to a large extent, new applications can be tested in desktop environment. The simulation software packages are found on the <a title=\"Installation instructions\" href=\"https://moped.sics.se/?page_id=127\">installation instructions page</a>.','Software configuration','','inherit','closed','open','','95-autosave-v1','','','2014-12-23 10:00:03','2014-12-23 09:00:03','',95,'https://moped.sics.se/?p=286',0,'revision','',0),(287,16,'2014-12-23 10:04:08','2014-12-23 09:04:08','[contentmirror site=undefined posttype=page item=97]','Overview of concepts','','publish','closed','open','','overview-of-concepts','','','2014-12-23 10:04:24','2014-12-23 09:04:24','',97,'https://moped.sics.se/?page_id=287',0,'page','',0),(288,16,'2014-12-23 10:04:08','2014-12-23 09:04:08','[contentmirror site=undefined posttype=page item=97]','Overview of concepts','','inherit','closed','open','','287-revision-v1','','','2014-12-23 10:04:08','2014-12-23 09:04:08','',287,'https://moped.sics.se/?p=288',0,'revision','',0),(289,16,'2014-12-23 10:05:33','2014-12-23 09:05:33','<em><strong>Publications:</strong></em>\r\n<ul>\r\n	<li>Porting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)</li>\r\n	<li>More details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.</li>\r\n	<li>The <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.</li>\r\n</ul>\r\n&nbsp;\r\n\r\n<strong><em>Links:</em></strong>\r\n<ul>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">MOPED software</a> on GitHub</li>\r\n</ul>','Relevant links','','publish','closed','open','','relevant-publications','','','2014-12-23 10:08:40','2014-12-23 09:08:40','',97,'https://moped.sics.se/?page_id=289',0,'page','',0),(290,16,'2014-12-23 10:05:19','2014-12-23 09:05:19','<span style=\"line-height: 1.5;\">This page contains a more detailed description of the concepts that allow MOPED to be an open, flexible, and easily extendable platform for experimentation on interconnected embedded systems. Our contributions extend the state-of-the-art <a title=\"The AUTOSAR consortium webpage\" href=\"http://www.autosar.org/\">AUTOSAR</a> standard with the possibility to dynamically add application software at runtime. </span>\r\n\r\n<em><strong>Ordinary application software <em><strong>(static)</strong></em></strong></em>\r\n\r\nAccording to the AUTOSAR standard, application software should be contained into software components (SW-C) that communicate with the rest of the system through provided (output) and required (input) ports. In other words, the application software reads and writes to its ports without the knowledge of how the rest of the surrounding software is organised. The signals between the ports are transferred by a middleware, called Runtime Environment (RTE).\r\n\r\nThis allows for simple re-allocation of software components during the design phase, by simply adjusting how the RTE forwards messages between the ports. In practice, this is typically done by defining desired port connections and SW-C allocations in xml-format, which is then used to automatically generate appropriate RTE code (typically C-code).\r\n\r\nHowever, once this code is generated and integrated into the system, it is no longer easy to modify it. Generally, any modification requires regeneration of the RTE code, its reintegration with the rest of the software system and a re-flash of the whole ECU code. In this sense, typical application software in an AUTOSAR-based vehicle is rather static.\r\n\r\n<em><strong>Plugin application software <em><strong>(dynamic)</strong></em></strong></em>\r\n\r\nThe MOPED architecture extends the existing AUTOSAR standard by opening up for dynamic installation of additional application software. The idea is to pre-define SW-Cs that are dedicated to plugin software. Such plugin SW-Cs contain a virtual machine (which in our case is the lightweight <a title=\"Squaqk main page\" href=\"https://java.net/projects/squawk/pages/SquawkDevelopment\">Squawk</a> Java VM)  for plugin execution and a dynamic middleware, called Plugin Runtime Environment or PIRTE, that interfaces between the dynamic nature of the plugins and the static nature of the ordinary AUTOSAR RTE.\r\n\r\nAlso, there is a need for a SW-C that is responsible for the communication with the external world, e.g. for transmission of plugin binaries or for publishing sensor data. This is handled by an External Communication Manager (ECM) SW-C, typically allocated to a WiFi-equipped ECU.\r\n\r\n<em><strong>Plugin components and their ports</strong></em>\r\n\r\nReplicating the AUTOSAR concepts, plugins come as self-contained software components (we will call them simply plugin components or PCs to avoid confusion with the AUTOSAR-level plugin SW-Cs, which are the containers for the PCs) and interact with the rest of the system through so-called plugin ports (provided and required).\r\n\r\n<span style=\"line-height: 1.5;\">When a new plugin is installed (which is done by PIRTE), all its ports must be connected according to a configuration description (which should be shipped with the binary packages), either to other plugin ports within the same SW-C or to so-called virtual ports, which serve as relays passing data to PIRTE for further processing. PIRTE is then responsible for formatting the data and forwarding it through the AUTOSAR interface to the RTE. This is done through one of three types of ports that must be pre-defined at the SW-C level:</span>\r\n<ul>\r\n	<li>one pair of ports (P/R) for interacting with the outside world, for example for receiving new plugin binaries or for publishing sensor data to an external server (type I ports);</li>\r\n	<li>one pair of ports (P/R) for every other plugin SW-C (type II ports);</li>\r\n	<li>ordinary ports, used for accessing built-in software, e.g. sensor signals (type III ports).</li>\r\n</ul>\r\n[caption id=\"attachment_158\" align=\"aligncenter\" width=\"1054\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\"><img class=\" wp-image-158\" alt=\"ports_in_pluginSWC\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ports_in_pluginSWC.jpg\" width=\"1054\" height=\"474\" /></a> Different kinds of port connections in a plugin SW-C[/caption]\r\n\r\nIn the above figure, type I/II/III ports are orange/green/blue respectively. Focusing on the left ECU, a new plugin is received at s9, the required type I port, and passed to v9, which triggers PIRTE to install the plugin. In the other direction, data is sent from the plugin port p3 to v8, and further through s10 to the wifi equipment for external publishing. P4 is connected to p5 through a simple write operation, while p0 and p1 are similarly connected to the basic software (after appropriate formatting in v0 and v1 respectively, such as for example mapping from Java to C through JNI technology).\r\n\r\n<span style=\"line-height: 1.5;\">Type II ports are probably the trickiest ones to handle. While they have to serve varying plugin configurations, their number is fixed on the SW-C level, since the AUTOSAR ports must be pre-defined statically. Thus, some kind of indexing information must be introduced. This is done by PIRTE at the virtual layer. For example, at v5, the data proceeding from p2 and p3 is labeled with their respective recipient plugin ports in the right ECU, p0 and p3, before being written to s7 for further transportation through RTE. The recipient PIRTE will then route the data to the correct plugin port in its virtual port v5. </span>\r\n\r\n<em><strong>Plugin configuration</strong></em>\r\n\r\nIn order to establish appropriate connections between the plugin ports, each plugin installation should be accompanied by a configuration description. Such description consists of the following parts:\r\n<ul>\r\n	<li><em>Header</em> contains the message type (e.g. bytecode or external input signal), the SW-C port on which the incoming message (or bytecode) should be relayed (which decides which plugin SW-C will receive the plugin), and additional information (e.g. name of the plugin);</li>\r\n	<li><em>Port internal context (PIC)</em> assigns unique ids, within the scope of each plugin SW-C, to the ports of the installed plugins;</li>\r\n	<li><em>Port linking context (PLC) </em>provides the information to PIRTE about which connections between plugin and virtual ports that should be established. In case of type II connections, indexing information for the recipient ports is also included;</li>\r\n	<li><em>External communication context (ECC)</em> defines addressing information for the additional external resources that will be used by the plugins.</li>\r\n</ul>\r\nThe following figure exemplifies the use of configuration data. Two plugins (\"COM\" and \"OP\") are being installed. The first one is installed in the ECM, while the second one is targeted for ECU2.\r\n<div>\r\n\r\n[caption id=\"attachment_162\" align=\"aligncenter\" width=\"2135\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\"><img class=\"size-full wp-image-162\" alt=\"Example application, consisting of two plugins &quot;COM&quot; and &quot;OP&quot;\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/example_communication.jpg\" width=\"2135\" height=\"1193\" /></a> Example application, consisting of two plugins \"COM\" and \"OP\"[/caption]\r\n\r\n</div>\r\n<div>\r\n\r\nTo achieve this, two installation packages of the following form:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\"><img class=\"aligncenter size-full wp-image-166\" alt=\"installation_message_pattern\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_pattern.jpg\" width=\"856\" height=\"174\" /></a>\r\n\r\nare sent to the vehicle, which results in the following installation messages:\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\"><img class=\"aligncenter size-full wp-image-171\" alt=\"installation_message_example\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/installation_message_example.jpg\" width=\"1325\" height=\"178\" /></a>\r\n\r\nwhere the initial 0 stands for \"installation message\" type. The relay port v2 means that the \"OP\" package should be placed in v2, which will forward it to s2 and consequently through RTE to s1 on ECU2, where the binaries will be installed by the recipient PIRTE. The relay port \"-1\" means that the \"COM\"-plugin stays on ECU1.\r\n\r\nBoth plugins receive port indices from p0 to p3. On ECU1, p0 and p1 are used for external communication and are not connected to the rest of the system through virtual ports. The other plugin ports, p2 and p3 are connected to the virtual port v0, with attached indexing information p0 and p1 respectively. This is used on the recipient side (by PIRTE) to dispatch the messages correctly to the \"OP\" plugin. For example, a signal from p2 on \"COM\" is routed to v0 (direct connection, ECU1) -&gt; s0 (PIRTE mapping, ECU1) -&gt;  RTE -&gt; s3 (ECU2) -&gt; v3 (PIRTE mapping, ECU2) -&gt; p0 (PIRTE dispatching, ECU2). <strong>\r\n</strong>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Server structure</strong></em>\r\n\r\nAll plug-in management is done through a pre-defined trusted server, a.k.a. <a title=\"The open innovation portal\" href=\"https://moped.sics.se/?page_id=86\">\"the open innovation portal\"</a>, which relieves the resource-constrained embedded system from much of the firewall issues. The server not only serves as a gateway for the plugin binaries, but it is also responsible for verifying that new plugins are compatible with a particular vehicle configuration. Also, the server is better suited for maintaining a coherent picture of the plugins that have been installed and how they may interfere with each other. It collects all information about the state of the FES and uses it to create plugin configurations that are shipped together with the plugin binaries at installation.\r\n\r\nThe following picture shows the functional server-side components that have been included into the MOPED platform, explained in more detail below.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\"><img class=\"aligncenter size-full wp-image-188\" alt=\"server\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/server.jpg\" width=\"687\" height=\"500\" /></a>\r\n\r\nOn the top level from the users perspective, the server has a <em>User</em> and a <em>Vehicle</em> module, recording user profiles and associated vehicle details respectively. <em>Vehicle</em> has an associated configuration <em>Vehicle Conf</em>, which consists of hardware configuration in the <em>HW Conf</em> module, built-in software configuration in the <em>SystemSW Conf</em> module, and records of the installed plug-ins in the <em>InstalledAPP</em> module.\r\n\r\nOn the developer side, the <em>APP</em> module represents the application code stored on the server. Typically, an application consists of one or several plug-in binaries. Furthermore, each <em>APP</em> comes with one or several configurations (<em>SW conf</em> ), which describe for various vehicle models how the plug-ins should be distributed in the vehicle and how the different plug-in ports should be connected. Combining the vehicle and plug-in configurations, the server creates a context for the specific combination of <em>APP</em> and <em>Vehicle</em>.\r\n\r\nThe trusted server provides two modules that communicate externally. The <em>Web Services</em> module presents an interface to the user of the server, whether it is the vehicle user, the\r\nOEM, or the plug-in developer. The <em>Pusher</em> module is used to interact with the vehicles through their ECM modules.\r\n\r\nThe server provides three kinds of operations through the <em>Web Services</em> module: user  setup, upload of plug-ins and configurations, and plug-in (re)deployment. Except for typical settings, such as creating a user account, the user setup involves binding of a <em>Vehicle</em> module to a <em>User</em>, allowing the server to keep track of specific <em>Vehicle</em>-<em>User</em>-configurations.\r\nUpload operations are typically done by OEMs or third party plug-in developers. OEMs should upload descriptions of the hardware resources that are available to plug-ins (H<em>W</em>\r\n<em>conf</em> ), together with the exposed API, in terms of virtual ports in the available plug-in SW-Cs (<em>SystemSW conf</em>). Finally, the plug-in developers upload their binary code and\r\ndescriptions of how to distribute their plug-ins on the available ECUs and how to connect the plug-in and virtual ports, based on the information in <em>HW conf</em> and <em>SystemSW conf</em>.\r\n\r\n<span style=\"line-height: 1.5;\">Plug-in installation is normally triggered by the user through </span>a web portal. To begin with, the server checks whether the target vehicle meets the pre-requisites of the plug-in by comparing the vehicle configuration with the list of <em>SW conf</em> modules for the plug-in. If a match is found, i.e. there exists a description of how to distribute and connect the plug-ins in the vehicle, the turn comes to check the plug-in dependencies. In some cases, certain pre-requisite plug-ins must be installed in order for the new plug-ins to function. Conversely, the deployment operation can be hindered by an already installed plug-in being in conflict with the new plug-in functionality.\r\n\r\nIf the compatibility check fails, the server presents the reason for the failure to the user. If the check passes, the server creates a PIC context by assigning SW-C-scope unique ids\r\nto the plug-in ports, using the knowledge about the already installed plug-ins. Next, the port connection information, found in <em>SW conf</em>, is translated into a PLC context. Special care must be taken with the plug-in ports that will be connected to plug-ins located in other SW-Cs. In that case, the port ids of the recipient side must be included into the context that is communicated to the sending side SW-C. If any plug-in is designed to communicate externally, a package with ECC information is prepared for the ECM PIRTE.\r\n\r\nFinally, the server extracts appropriate binaries from the <em>APP</em> database, combines them with the generated contexts into installation packages, adds the ids of the destination ECUs and the message types, and sends the packages to the target vehicle through the Pusher module. Afterwards, the server keeps track of the returning acknowledgement messages (acks) and records them into the <em>InstalledAPP</em> table.\r\n\r\nWhen the uninstallation operation is invoked, the server starts by consulting its <em>InstalledAPP</em> table to check which plug-ins belong to this APP and whether there are some\r\nother installed plug-ins that are dependent on the plug-ins being uninstalled. If this is the case, the user is notified about the need to also uninstall the dependent plug-ins.\r\nOtherwise, uninstallation messages, containing the plug-in names and the ids of the ECUs on which they run, are sent to the vehicle and the InstalledAPP table is updated once\r\nsuccessful uninstallation has been fully acknowledged.\r\n\r\nFinally, the restore operation is used when an ECU hardware has been physically replaced, e.g. in a workshop. The server filters out previously installed plug-ins in the replaced\r\nECU by querying the <em>InstalledAPP</em> module. Next, the usual installation steps are followed for each plug-in.\r\n\r\n</div>','Theoretical contributions','','inherit','closed','open','','97-revision-v1','','','2014-12-23 10:05:19','2014-12-23 09:05:19','',97,'https://moped.sics.se/?p=290',0,'revision','',0),(291,16,'2014-12-23 10:05:33','2014-12-23 09:05:33','Porting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)\r\n\r\nMore details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.\r\n\r\nThe <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.','Relevant publications','','inherit','closed','open','','289-revision-v1','','','2014-12-23 10:05:33','2014-12-23 09:05:33','',289,'https://moped.sics.se/?p=291',0,'revision','',0),(292,16,'2014-12-23 10:06:34','2014-12-23 09:06:34','<em><strong>Publications:</strong></em>\n<ul>\n	<li>Porting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)</li>\n	<li>More details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.</li>\n	<li>The <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.</li>\n</ul>\nLinks:','Relevant links','','inherit','closed','open','','289-autosave-v1','','','2014-12-23 10:06:34','2014-12-23 09:06:34','',289,'https://moped.sics.se/?p=292',0,'revision','',0),(293,16,'2014-12-23 10:07:26','2014-12-23 09:07:26','<em><strong>Publications:</strong></em>\r\n<ul>\r\n	<li>Porting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)</li>\r\n	<li>More details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.</li>\r\n	<li>The <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.</li>\r\n</ul>\r\n<strong><em>Links:</em></strong>\r\n<ul>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">MOPED software</a> on GitHub</li>\r\n</ul>','Relevant links','','inherit','closed','open','','289-revision-v1','','','2014-12-23 10:07:26','2014-12-23 09:07:26','',289,'https://moped.sics.se/?p=293',0,'revision','',0),(294,16,'2014-12-23 10:08:40','2014-12-23 09:08:40','<em><strong>Publications:</strong></em>\r\n<ul>\r\n	<li>Porting of Autosar OS to Raspberry Pi hardware (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ewili13.pdf\">paper</a> /<a href=\"http://www.idt.mdh.se/utbildning/exjobb/files/TR1442.pdf\"> MSc-thesis</a>)</li>\r\n	<li>More details on the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/dac14.pdf\">dynamic Autosar</a> concept.</li>\r\n	<li>The <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/MOPED.pdf\">MOPED platform</a> in paper form.</li>\r\n</ul>\r\n&nbsp;\r\n\r\n<strong><em>Links:</em></strong>\r\n<ul>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">MOPED software</a> on GitHub</li>\r\n</ul>','Relevant links','','inherit','closed','open','','289-revision-v1','','','2014-12-23 10:08:40','2014-12-23 09:08:40','',289,'https://moped.sics.se/?p=294',0,'revision','',0),(295,16,'2014-12-23 10:09:35','2014-12-23 09:09:35','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_VCU.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-23 10:09:35','2014-12-23 09:09:35','',127,'https://moped.sics.se/?p=295',0,'revision','',0),(296,16,'2014-12-23 12:30:45','2014-12-23 11:30:45','','kernel','','inherit','closed','open','','kernel','','','2014-12-23 12:30:45','2014-12-23 11:30:45','',127,'https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img',0,'attachment','application/x-raw-disk-image',0),(297,16,'2014-12-23 12:31:27','2014-12-23 11:31:27','<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2014-12-23 12:31:27','2014-12-23 11:31:27','',127,'https://moped.sics.se/?p=297',0,'revision','',0),(303,16,'2015-01-09 13:29:59','2015-01-09 12:29:59','[apps_display_form]\r\n\r\n[insert_php]\r\necho \"hej\";\r\n[/insert_php]','Apps Gallery','','inherit','closed','open','','46-autosave-v1','','','2015-01-09 13:29:59','2015-01-09 12:29:59','',46,'https://moped.sics.se/?p=303',0,'revision','',0),(304,16,'2015-01-09 13:20:24','2015-01-09 12:20:24','[apps_display_form]\r\n\r\n&lt;?php\r\n\r\nif (isset($_POST[\'Jdk_install\'])) {\r\necho \"Jdk_install clicked\";\r\n}\r\nelse if (isset($_POST[\'Squawk_install\'])) {\r\necho \"Squawk_install clicked\";\r\n}\r\n\r\n?&gt;\r\n\r\n&nbsp;','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2015-01-09 13:20:24','2015-01-09 12:20:24','',46,'https://moped.sics.se/?p=304',0,'revision','',0),(305,16,'2015-01-09 13:22:18','2015-01-09 12:22:18','[apps_display_form]\r\n\r\n&lt;?php\r\nif (isset($_POST[\'Jdk_install\'])) {\r\necho \"Jdk_install clicked\";\r\n}\r\nelse if (isset($_POST[\'Squawk_install\'])) {\r\necho \"Squawk_install clicked\";\r\n}\r\n?&gt;','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2015-01-09 13:22:18','2015-01-09 12:22:18','',46,'https://moped.sics.se/?p=305',0,'revision','',0),(306,16,'2015-01-09 13:23:38','2015-01-09 12:23:38','[apps_display_form]\r\n\r\n[insert_php]\r\nif (isset($_POST[\'Jdk_install\'])) {\r\necho \"Jdk_install clicked\";\r\n}\r\nelse if (isset($_POST[\'Squawk_install\'])) {\r\necho \"Squawk_install clicked\";\r\n}\r\n[/insert_php]','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2015-01-09 13:23:38','2015-01-09 12:23:38','',46,'https://moped.sics.se/?p=306',0,'revision','',0),(307,16,'2015-01-09 13:25:48','2015-01-09 12:25:48','[apps_display_form]\r\n\r\n[insert_php]\r\necho \"hej\";\r\nif (isset($_POST[\'Jdk_install\']))  {\r\n  echo \"Jdk_install clicked\";\r\n} else if (isset($_POST[\'Squawk_install\'])) {\r\n  echo \"Squawk_install clicked\";\r\n}\r\n[/insert_php]','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2015-01-09 13:25:48','2015-01-09 12:25:48','',46,'https://moped.sics.se/?p=307',0,'revision','',0),(308,16,'2015-01-09 13:45:55','2015-01-09 12:45:55','[apps_display_form]\r\n\r\n[insert_php]\r\necho \"hej\";\r\n[/insert_php]','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2015-01-09 13:45:55','2015-01-09 12:45:55','',46,'https://moped.sics.se/?p=308',0,'revision','',0),(309,16,'2015-01-09 13:59:26','2015-01-09 12:59:26','[apps_display_form]','Apps Gallery','','inherit','closed','open','','46-revision-v1','','','2015-01-09 13:59:26','2015-01-09 12:59:26','',46,'https://moped.sics.se/?p=309',0,'revision','',0),(312,16,'2015-01-15 13:08:50','2015-01-15 12:08:50','[groups_member group=\"Developers\"]\r\n[plugin_upload_form]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 13:08:50','2015-01-15 12:08:50','',4,'https://moped.sics.se/?p=312',0,'revision','',0),(313,16,'2015-01-15 14:00:03','2015-01-15 13:00:03','[groups_member group=\"Developers\"]\r\n[application_upload_form]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:00:03','2015-01-15 13:00:03','',4,'https://moped.sics.se/?p=313',0,'revision','',0),(314,16,'2015-01-15 14:03:30','2015-01-15 13:03:30','[groups_member group=\"Developers\"]\r\n[app_upload_form]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:03:30','2015-01-15 13:03:30','',4,'https://moped.sics.se/?p=314',0,'revision','',0),(315,16,'2015-01-15 14:13:39','2015-01-15 13:13:39','[groups_member group=\"Developers\"]\r\n[hej]\r\n[/groups_member]','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:13:39','2015-01-15 13:13:39','',4,'https://moped.sics.se/?p=315',0,'revision','',0),(316,16,'2015-01-15 14:24:41','2015-01-15 13:24:41','[hallo]\r\n[halloj]\r\n[hej]\r\n\r\n','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:24:41','2015-01-15 13:24:41','',4,'https://moped.sics.se/?p=316',0,'revision','',0),(318,16,'2015-01-15 14:37:07','2015-01-15 13:37:07','[hej]\r\n[app_upload_form]\r\n\r\n','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:37:07','2015-01-15 13:37:07','',4,'https://moped.sics.se/?p=318',0,'revision','',0),(319,16,'2015-01-15 14:50:16','2015-01-15 13:50:16','[groups_member group=\"Engineers\"]\r\n[application_upload_form]\r\n[/groups_member]\r\n\r\n','Application Upload','','inherit','closed','open','','4-autosave-v1','','','2015-01-15 14:50:16','2015-01-15 13:50:16','',4,'https://moped.sics.se/?p=319',0,'revision','',0),(320,16,'2015-01-15 14:49:01','2015-01-15 13:49:01','[groups_member group=\"Engineers\"]\r\n[app_upload_form]\r\n[/groups_member]\r\n\r\n','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:49:01','2015-01-15 13:49:01','',4,'https://moped.sics.se/?p=320',0,'revision','',0),(321,16,'2015-01-15 14:50:17','2015-01-15 13:50:17','[groups_member group=\"Engineers\"]\r\n[application_upload_form]\r\n[/groups_member]\r\n\r\n','Application Upload','','inherit','closed','open','','4-revision-v1','','','2015-01-15 14:50:17','2015-01-15 13:50:17','',4,'https://moped.sics.se/?p=321',0,'revision','',0),(325,16,'2015-02-06 10:13:48','2015-02-06 09:13:48','<em><strong>Work in progress:</strong></em>\r\n\r\nCurrent MOPED setup consists of one so-called Telematics node, which is the gateway for cooperation with the external word, and several vehicle control nodes. The Telematics node contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. The Telematics node runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel on the Telematics node must include CAN-drivers (which is not default).\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 10:13:48','2015-02-06 09:13:48','',127,'https://moped.sics.se/?p=325',0,'revision','',0),(326,16,'2015-02-06 10:26:25','2015-02-06 09:26:25','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called Telematics control unit (TCU), which is the gateway for cooperation with the external word, and several vehicle control nodes. TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel on TCU must include CAN-drivers (which is not default).</span>\r\n\r\n<strong><em>Setting up Linux on TCU</em></strong>\r\n\r\n<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU:</span>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">The most pure way is to compile a Linux kernel, including CAN drivers in it, following these </span><a style=\"line-height: 1.5;\" title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a><span style=\"line-height: 1.5;\">. </span></li>\r\n	<li>Another method, which is very handy once you already have a CAN-enabled Linux image, is to simply copy an existing kernel image block by block to a new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place, the dd-command is very useful, but it is very important to set input/output-direction correctly to avoid losing data in wrong places.</li>\r\n	<li></li>\r\n</ul>\r\n<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 10:26:25','2015-02-06 09:26:25','',127,'https://moped.sics.se/?p=326',0,'revision','',0),(327,16,'2015-02-06 10:28:35','2015-02-06 09:28:35','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called Telematics control unit (TCU), which is the gateway for cooperation with the external word, and several vehicle control nodes. TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel on TCU must include CAN-drivers (which is not default).</span>\r\n\r\n<strong><em>Setting up Linux on TCU</em></strong>\r\n\r\n<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU:</span>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">The most pure way is to compile a Linux kernel, including CAN drivers in it, following these </span><a style=\"line-height: 1.5;\" title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a><span style=\"line-height: 1.5;\">. </span></li>\r\n	<li>Another method, which is very handy once you already have a CAN-enabled Linux image, is to simply copy an existing kernel image block by block to a new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly or data risks being lost in wrong places.</li>\r\n</ul>\r\n<em><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 10:28:35','2015-02-06 09:28:35','',127,'https://moped.sics.se/?p=327',0,'revision','',0),(328,16,'2015-02-06 10:28:55','2015-02-06 09:28:55','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, we provide our version of the <a title=\"CAN-enable Linux image\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/linux-image.gz\">kernel image</a> (as it is), suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems is quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow those instructions.','Setting up Linux on TCU','','publish','closed','open','','setting-up-linux-on-tcu','','','2015-02-06 11:22:00','2015-02-06 10:22:00','',127,'https://moped.sics.se/?page_id=328',0,'page','',0),(329,16,'2015-02-06 10:28:55','2015-02-06 09:28:55','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU:</span>\r\n<ul>\r\n	<li>The most pure way is to compile a Linux kernel, including CAN drivers in it, following these <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a>.</li>\r\n	<li>Another method, which is very handy once you already have a CAN-enabled Linux image, is to simply copy an existing kernel image block by block to a new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly or data risks being lost in wrong places.</li>\r\n</ul>','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 10:28:55','2015-02-06 09:28:55','',328,'https://moped.sics.se/?p=329',0,'revision','',0),(331,16,'2015-02-06 10:40:17','2015-02-06 09:40:17','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n\r\n<em><strong>Kernel compilation</strong></em>\r\n\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n\r\n<em><strong>Image copying</strong></em>\r\n\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux SD-card, is to simply copy an existing kernel image block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 10:40:17','2015-02-06 09:40:17','',328,'https://moped.sics.se/?p=331',0,'revision','',0),(332,16,'2015-02-06 10:47:21','2015-02-06 09:47:21','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux SD-card, is to simply copy an existing kernel image block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount the SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nIf using an intermediary storage file (instead of directly copying between two SD-cards):\r\n\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz\r\n\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 10:47:21','2015-02-06 09:47:21','',328,'https://moped.sics.se/?p=332',0,'revision','',0),(333,16,'2015-02-06 10:58:35','2015-02-06 09:58:35','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. To simplify things, here is our version of the kernel image. [LINK]\r\n\r\nOn a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>gzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nIf you wish to backup up an image, run <em>dd</em> in the opposite direction:\r\n<pre>dd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n&nbsp;','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 10:58:35','2015-02-06 09:58:35','',328,'https://moped.sics.se/?p=333',0,'revision','',0),(334,16,'2015-02-06 11:00:43','2015-02-06 10:00:43','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, here is our version of the kernel image [LINK].  suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nIf you wish to backup up an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n&nbsp;','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:00:43','2015-02-06 10:00:43','',328,'https://moped.sics.se/?p=334',0,'revision','',0),(335,16,'2015-02-06 11:01:52','2015-02-06 10:01:52','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, here is our version of the kernel image [LINK].  suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n&nbsp;','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:01:52','2015-02-06 10:01:52','',328,'https://moped.sics.se/?p=335',0,'revision','',0),(336,16,'2015-02-06 11:06:46','2015-02-06 10:06:46','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, here is our version of the kernel image [LINK].  suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems are quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow the instructions.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:06:46','2015-02-06 10:06:46','',328,'https://moped.sics.se/?p=336',0,'revision','',0),(337,16,'2015-02-06 11:07:32','2015-02-06 10:07:32','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, here is our version of the kernel image [LINK].  suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems is quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow those instructions.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:07:32','2015-02-06 10:07:32','',328,'https://moped.sics.se/?p=337',0,'revision','',0),(338,16,'2015-02-06 11:08:28','2015-02-06 10:08:28','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, we provide our version of the kernel image (as it is) [LINK], suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems is quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow those instructions.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:08:28','2015-02-06 10:08:28','',328,'https://moped.sics.se/?p=338',0,'revision','',0),(341,16,'2015-02-06 11:14:14','2015-02-06 10:14:14','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, we provide our version of the kernel image (as it is) [<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/AUTOSAR.png\">LINK</a>], suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems is quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow those instructions.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:14:14','2015-02-06 10:14:14','',328,'https://moped.sics.se/?p=341',0,'revision','',0),(342,16,'2015-02-06 11:18:08','2015-02-06 10:18:08','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, we provide our version of the kernel image (as it is) [<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/AUTOSAR.png\" target=\"_blank\">LINK</a>], suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems is quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow those instructions.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:18:08','2015-02-06 10:18:08','',328,'https://moped.sics.se/?p=342',0,'revision','',0),(343,16,'2015-02-06 11:22:00','2015-02-06 10:22:00','<span style=\"line-height: 1.5;\">There are (at least) two ways to go about for setting up Linux on the TCU. Either an existing kernel is copied to a new SD-card or a kernel is compiled from scratch.</span>\r\n<h2><em><strong>Kernel compilation</strong></em></h2>\r\n<em><strong></strong></em>The most pure way to set up the TCU is to compile a Linux kernel from scratch, baking in CAN drivers in it. Although there are a number of steps to pass, each requiring some time and focus, this endeavour has all prospects of being a fun and instructive experience, at least once. If you are in the mood for some kernel compilation, there are excellent <a title=\"Linux kernel with CAN\" href=\"http://elinux.org/RPi_CANBus\" target=\"_blank\">step-by-step instructions</a> out there, just cross your fingers and follow them.\r\n<h2><em><strong>Image copying</strong></em></h2>\r\n<em><strong></strong></em>Another method, which is very handy once you already have a CAN-enabled Linux image is to simply copy an existing kernel block by block to the new SD-card. On a Linux desktop, this is easily done using the \"dd\" command. A note of warning is in place though. The dd-command is very useful but also very brute, so it is very important to set its input/output-directories correctly to avoid overwriting data in wrong places.\r\n\r\nTo simplify things, we provide our version of the <a title=\"CAN-enable Linux image\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/linux-image.gz\">kernel image</a> (as it is), suitable for file-to-SD-card copying.\r\n<h3><em>Instructions for Linux desktops</em></h3>\r\nHere, we go through two closely related alternatives, copying the contents of an existing SD-card to a new one, and creating an image directly from a zip-file.\r\n\r\n<strong><em>Coping from card to card</em></strong>\r\n\r\nTo start with, check what partition names are assigned to the SD-cards:\r\n<pre>sudo fdisk -l</pre>\r\nand notice the difference between the print-outs when SD-cards are inserted and when they are not. Suppose that a working Linux SD-card has been mounted on /dev/sdd, while the new card is mounted on /dev/mmcblk0. Unmount all SD-partitions and use the ”dd”-command to copy data. Be very careful about setting input (if) and output (of) correctly.\r\n<pre>sudo -i\r\numount /dev/sd1\r\numount /dev/sd2\r\n...\r\numount /dev/mmcblk0p1\r\n...\r\n\r\ndd if=/dev/sdd of=/dev/mmcblk0<span style=\"color: #141412; font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></pre>\r\nNow give it 30-60 min, depending on your system, and you should have a new CAN-enabled Linux SD-card.\r\n\r\n<em><strong>Copying from a file</strong></em>\r\n\r\nIf using an intermediary storage file instead of directly copying between two SD-cards, just run the following command (assuming that the new SD-card is located at /dev/mmcblk0):\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ngzip -dc linux-image.gz | dd of=/dev/mmcblk0</pre>\r\nAs always, have some patience (30-60 min) and it should just work.\r\n\r\nIf you wish to backup up an SD-card to an image, run <em>dd</em> in the opposite direction:\r\n<pre>umount /dev/mmcblk0p1\r\numount /dev/mmcblk0p2\r\n...\r\ndd if=/dev/mmcblk0 | gzip &gt; linux-image.gz</pre>\r\n<h3><em> Instructions for Windows desktops</em></h3>\r\nThe procedure on Windows systems is quite similar to how it is done in Linux, with the exception that you need to find some disk copying software. Good instructions (and a link to Windows <em>dd</em>-software) can be found <a href=\"http://www.myraspberrypiexperience.com/using-dd-for-windows/\">here</a>. Just replace the Debian image with our CAN-enable kernel and follow those instructions.','Setting up Linux on TCU','','inherit','closed','open','','328-revision-v1','','','2015-02-06 11:22:00','2015-02-06 10:22:00','',328,'https://moped.sics.se/?p=343',0,'revision','',0),(344,16,'2015-02-06 11:28:41','2015-02-06 10:28:41','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n[CONFIGURATION]\r\n\r\n<em><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>On the Autosar nodes, prepare the SD cards according to general Raspberry Pi <a href=\"http://www.raspberrypi.org/help/noobs-setup/\">instructions</a>. Then, replace the kernel image with the one containing Autosar binaries (<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> / <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>).\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 11:28:41','2015-02-06 10:28:41','',127,'https://moped.sics.se/?p=344',0,'revision','',0),(346,16,'2015-02-06 11:38:39','2015-02-06 10:38:39','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n[CONFIGURATION]\r\n\r\n<em><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic bootloader files. Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 11:38:39','2015-02-06 10:38:39','',127,'https://moped.sics.se/?p=346',0,'revision','',0),(347,16,'2015-02-06 11:40:17','2015-02-06 10:40:17','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n[CONFIGURATION]\r\n\r\n<em><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a>. Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 11:40:17','2015-02-06 10:40:17','',127,'https://moped.sics.se/?p=347',0,'revision','',0),(348,16,'2015-02-06 11:41:40','2015-02-06 10:41:40','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n[Add WPA CONFIGURATION]\r\n\r\n<em><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 11:41:40','2015-02-06 10:41:40','',127,'https://moped.sics.se/?p=348',0,'revision','',0),(349,16,'2015-02-06 11:59:01','2015-02-06 10:59:01','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n\r\n<em><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n\r\n&nbsp;\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phones hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 11:59:01','2015-02-06 10:59:01','',127,'https://moped.sics.se/?p=349',0,'revision','',0),(350,16,'2015-02-06 12:00:13','2015-02-06 11:00:13','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n\r\n<em><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phones hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:00:13','2015-02-06 11:00:13','',127,'https://moped.sics.se/?p=350',0,'revision','',0),(351,16,'2015-02-06 12:00:45','2015-02-06 11:00:45','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n\r\n<em><strong>TCU setup</strong></em>\r\n\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n\r\n<em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em>\r\n\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n\r\n<em><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n\r\n<em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:00:45','2015-02-06 11:00:45','',127,'https://moped.sics.se/?p=351',0,'revision','',0),(352,16,'2015-02-06 12:01:11','2015-02-06 11:01:11','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n<h4><em><strong>Configuring TCU for a new hotspot</strong></em></h4>\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4><em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em></h4>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li>To drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured with the phone data, see<a href=\"https://twiki.sics.se/bin/view/FRESTA/MOPEDDemoManual\"> set up instructions</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\". That should be it!</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:01:11','2015-02-06 11:01:11','',127,'https://moped.sics.se/?p=352',0,'revision','',0),(353,16,'2015-02-06 12:07:06','2015-02-06 11:07:06','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n<h4><em><strong>Configuring TCU for a new hotspot</strong></em></h4>\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). First, the telematics node on the car needs to be configured to connect to the phone\'s hotspot (see the instructions above). To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nStart up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in the WiFi-sharing settings of the phone) and connect the WirelessIno to that address, using port 9000.\r\n\r\nThat should be it, cross your fingers and drive!\r\n<h4><em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em></h4>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li></li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:07:06','2015-02-06 11:07:06','',127,'https://moped.sics.se/?p=353',0,'revision','',0),(354,16,'2015-02-06 12:08:48','2015-02-06 11:08:48','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n<h4><em><strong>Configuring TCU for a new hotspot</strong></em></h4>\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!\r\n<h4><em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em></h4>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li></li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:08:48','2015-02-06 11:08:48','',127,'https://moped.sics.se/?p=354',0,'revision','',0),(355,16,'2015-02-06 12:09:16','2015-02-06 11:09:16','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n<h4><em><strong>Configuring TCU for a new hotspot</strong></em></h4>\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!\r\n<h4><em style=\"line-height: 1.5;\"><strong>Work in progress:</strong></em></h4>\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Installation packages and instructions for the simulation tool.</span></li>\r\n	<li><a style=\"line-height: 1.5;\" href=\"https://github.com/sics-sse/moped\">Source files</a><span style=\"line-height: 1.5;\"> on GitHub.</span></li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:09:16','2015-02-06 11:09:16','',127,'https://moped.sics.se/?p=355',0,'revision','',0),(357,16,'2015-02-06 12:10:59','2015-02-06 11:10:59','<ul>\r\n	<li>Installation packages and instructions for the simulation tool.</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Work in progress (SW installation)','','publish','closed','open','','work-in-progress-sw-installation','','','2015-02-06 12:11:29','2015-02-06 11:11:29','',127,'https://moped.sics.se/?page_id=357',0,'page','',0),(358,16,'2015-02-06 12:10:59','2015-02-06 11:10:59','a','Work in progress (SW installation)','','inherit','closed','open','','357-revision-v1','','','2015-02-06 12:10:59','2015-02-06 11:10:59','',357,'https://moped.sics.se/?p=358',0,'revision','',0),(359,16,'2015-02-06 12:11:18','2015-02-06 11:11:18','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n<h4><em><strong>Configuring TCU for a new hotspot</strong></em></h4>\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, BluIno (add cred info). To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:11:18','2015-02-06 11:11:18','',127,'https://moped.sics.se/?p=359',0,'revision','',0),(360,16,'2015-02-06 12:11:29','2015-02-06 11:11:29','<ul>\r\n	<li>Installation packages and instructions for the simulation tool.</li>\r\n	<li><a href=\"https://github.com/sics-sse/moped\">Source files</a> on GitHub.</li>\r\n	<li><strong></strong>Installation of Squawk + PIRTE, incl. the necessary links and binaries</li>\r\n	<li>Installation and set up of the trusted server</li>\r\n	<li><a title=\"PlugIn Zip Generator\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Zip Generator</a> is a tool  to package Java class file into .zip file which is acceptable file format for upload.</li>\r\n	<li><a title=\"PlugIn Development LIB\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/api-0.0.1-SNAPSHOT.jar\">PlugIn Developement LIB</a> is lib which provides additional APIs for PlugIn Development in terms of CLDC library.</li>\r\n	<li><a title=\"CLDC 1.1\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/12/cldc-1.1-java5.0.jar\">CLDC 1.1</a> is base library to compile PlugIn.</li>\r\n	<li><a title=\"PlugIn Development API documents\" href=\"https://moped.sics.se/?page_id=220\">PlugIn Development API documents</a></li>\r\n</ul>','Work in progress (SW installation)','','inherit','closed','open','','357-revision-v1','','','2015-02-06 12:11:29','2015-02-06 11:11:29','',357,'https://moped.sics.se/?p=360',0,'revision','',0),(361,16,'2015-02-06 12:13:01','2015-02-06 11:13:01','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\n[Describe how to monitor Autosar nodes using xterm]\r\n<h4><em><strong>Configuring TCU for a new hotspot</strong></em></h4>\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, <a title=\"BluIno on GitHub\" href=\"https://github.com/MiichaelD/BluIno\" target=\"_blank\">BluIno</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-06 12:13:01','2015-02-06 11:13:01','',127,'https://moped.sics.se/?p=361',0,'revision','',0),(364,16,'2015-02-11 09:00:14','2015-02-11 08:00:14','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n[caption id=\"attachment_82\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png\"><img class=\"size-large wp-image-82\" alt=\"The MOPED model car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis-1024x582.png\" width=\"604\" height=\"343\" /></a> The MOPED car[/caption]\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. Similarly as this is normally done in real vehicles, the ECUs are connected through a CAN network.\r\n\r\n[caption id=\"attachment_109\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture.jpg\"><img class=\"size-large wp-image-109\" alt=\"The ECU and network architecture of the MOPED platform\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_ecu_architecture-1024x494.jpg\" width=\"604\" height=\"291\" /></a> The ECU and network architecture[/caption]\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2015-02-11 09:00:14','2015-02-11 08:00:14','',93,'https://moped.sics.se/?p=364',0,'revision','',0),(365,16,'2015-02-11 09:26:19','2015-02-11 08:26:19','','moped_architecture','','inherit','closed','open','','moped_architecture','','','2015-02-11 09:26:19','2015-02-11 08:26:19','',93,'https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg',0,'attachment','image/jpeg',0),(366,16,'2015-02-11 09:28:07','2015-02-11 08:28:07','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n[caption id=\"attachment_82\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png\"><img class=\"size-large wp-image-82\" alt=\"The MOPED model car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis-1024x582.png\" width=\"604\" height=\"343\" /></a> The MOPED car[/caption]\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. Similarly as this is normally done in real vehicles, the ECUs are connected through a CAN network.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg\"><img class=\"alignnone size-full wp-image-365\" alt=\"moped_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg\" width=\"1398\" height=\"634\" /></a>\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-autosave-v1','','','2015-02-11 09:28:07','2015-02-11 08:28:07','',93,'https://moped.sics.se/?p=366',0,'revision','',0),(367,16,'2015-02-11 09:28:18','2015-02-11 08:28:18','Below, the general composition of the MOPED platform is described, while detailed assembly instructions can be found <a title=\"Assembly instructions\" href=\"https://moped.sics.se/?page_id=101\">here</a>.\r\n\r\n<strong><em>Mechanics</em></strong>\r\nThe mechanical platform consists of an off-the shelf radio controlled car in scale 1/10, 53 cm long and with a turning diameter of 1.2 m. It is equipped with a brushless electrical DC motor for driving the rear wheels, and a servo motor for steering the front wheels. It is sufficiently large to allow easy packaging of electronics, and still conveniently small for driving indoors. In order to use the car indoors without risking devastating crashes, the original motor was replaced with a weaker one rated at 190W, and then the new motor was further down-calibrated for slower driving.\r\n\r\n[caption id=\"attachment_82\" align=\"aligncenter\" width=\"604\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis.png\"><img class=\"size-large wp-image-82\" alt=\"The MOPED model car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/bilen_3rpis-1024x582.png\" width=\"604\" height=\"343\" /></a> The MOPED car[/caption]\r\n\r\n<strong><em>Electronics</em></strong>\r\nA key decision in the project was which hardware to use for the ECUs, and main factors here was accessibility and extensibility. The hardware should be readily available on the open market at a low cost, but still be fairly powerful to not limit future extensions. Two alternatives emerged in the evaluation: Arduino and Raspberry Pi model B, and the latter was selected. The rationale for this was that at the time of the decision, it was more capable than the corresponding Arduino alternative. However, current versions of the Arduino, e.g. Arduino Due, would also be feasible. The decision on ECU hardware is quite fundamental though, since a lot of embedded software is closely related to hardware, in particular OS and device drivers.\r\n\r\n[caption id=\"attachment_106\" align=\"aligncenter\" width=\"300\"]<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB.jpg\"><img class=\"size-medium wp-image-106\" alt=\"Raspberry Pi, model B\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/RaspberryPi_modelB-300x225.jpg\" width=\"300\" height=\"225\" /></a> Raspberry Pi, model B[/caption]\r\n\r\nThe Raspberry Pi has many powerful features, and only some of them are used in this project. It has an ARM11 based processor running at 700 MHz, 512 MB RAM, and contains an SD card for storing software. Peripherals include Ethernet connection, USB ports, 8 general-purpose I/O pins, UART, I2C-bus, and SPI-bus.\r\n\r\nTo make the architecture realistic, it was decided to build a distributed system with three ECUs, connected through a network. The ECUs are named Vehicle Control Unit (VCU), Sensor Control Unit (SCU), and Telematics Control Unit (TCU), to indicate their principle responsibilities. The rationale for using three ECUs was to allow a certain complexity in distributed control functionality, while at the same time keep a reasonable package volume and cost. Similarly as this is normally done in real vehicles, the ECUs are connected through a CAN network.\r\n\r\n<a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg\"><img class=\"alignnone size-full wp-image-365\" alt=\"moped_architecture\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/moped_architecture.jpg\" width=\"1398\" height=\"634\" /></a>\r\n\r\nSince the model car is intended for indoor use, no particular protection has been used against environmental factors, such as temperature, dust, moisture, etc.\r\n\r\n<strong><em>Electrical Power</em></strong>\r\nThe electrical power system consists of a lithium-polymer battery of 4000 mAh, of a standard type used for radio control models, and the rationale for this choice was simply that the mechanical platform was adapted for it. The battery has 7.2V nominal voltage, which is fed to the motor and steering servo. For the motor, there is in addition a 45A speed controller. To feed the ECUs, 5V power is required, so a voltage regulator is needed between the battery and the ECUs.\r\n\r\n<strong><em>Sensors and Actuators</em></strong>\r\nThe platform is equipped with various sensors and actuators, using the general-purpose I/O pins available on the ECUs. On the VCU, two optical wheel speed sensors are used to determine vehicle speed, measuring both a front and a rear wheel to be able to detect wheel slip. It also has sensors for measuring battery voltage. Actuators include control of the motor and steering servo, and these are based on PWM signals. There is also a set of light-emitting diodes, that can be turned on or off individually, to mimic the different lights of a real car.\r\n\r\nThe SCU contains more advanced sensor systems, and includes connection to an inertial measurement unit with nine degrees of freedom, which contains accelerometer, gyro, and magnetometer, each in three axes. This sensor is connected using an I2C protocol. It also contains a forward-looking sensor for measurement of distance to obstacles. Currently, a simple ultrasonic sensor with a range of approximately 4 m is used, but future plans include an investigation of more advanced sensor solution, and most likely also sensor fusion to give an improved picture of the outer world.\r\n\r\nThe TCU currently contains a WiFi interface through a USB dongle. Previously, a Bluetooth serial connection has also been implemented. There are plans to later include an indoor positioning functionality in this, to provide something similar to GPS navigation in real vehicles.\r\n\r\nThe rationale for selecting this particular set of sensors and actuators has been to include sensors that are representative of functionality in real vehicles, and using similar technology. However, the MOPED platform is also used for experimenting with different sensor solutions, and therefore it is expected that many other interfaces, complementing or replacing the ones mentioned above, will be introduced over time.','Hardware configuration','','inherit','closed','open','','93-revision-v1','','','2015-02-11 09:28:18','2015-02-11 08:28:18','',93,'https://moped.sics.se/?p=367',0,'revision','',0),(368,16,'2015-02-11 09:29:56','2015-02-11 08:29:56','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E14</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet Switch</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DLINK DES-105</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010620335</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H1,H2,H3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ethernet cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Dustin</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">5010379761</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote> <strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n <em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n The A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n<span style=\"line-height: 1.5;\">Mount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.</span>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n Solder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\n If CAN communication is to be used, mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\nOptionally, if Ethernet is to be used, the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2015-02-11 09:29:56','2015-02-11 08:29:56','',101,'https://moped.sics.se/?p=368',0,'revision','',0),(369,16,'2015-02-11 09:33:23','2015-02-11 08:33:23','This build guide is intended to be an easy to use guide of how to build a MOPED care based on Raspberry Pi. Note that MOPED car is a research lab platform and it has a very complex electronics and software setup compared to a standard RC car. However the intended usage is completely different since the MOPED platform is a smaller version of the electrical architecture of future cars.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\"><img class=\" wp-image-237 aligncenter\" alt=\"moped_car\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car1.jpg\" width=\"851\" height=\"637\" /></a></p>\r\n\r\n<blockquote><strong><em>Parts list</em></strong></blockquote>\r\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><b>Pcs</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><b>Ref</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><b>Item</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><b>Identifier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><b>Supplier</b></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><b>Order number</b></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">M1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Model car chassis including servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy SCT 2WD 1/10 Brushless Short Course Truck (ARR)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9249000001</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Speed controller</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobbyking X-Car 45A Brushless Car ESC (sensored/sensorless)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9164000009</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Sensored brushless motor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy TrackStar 17.5T Sensored Brushless Motor 2270KV</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">9192000029</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">B1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Rechargable battery</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ZIPPY Flightmax 4000mAh 2S1P 30C hardcase pack</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">Z40002S1P-30</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E3,E4,E5</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Raspberry Pi model B</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">RASPBERRY-PI - RPI-B-512-CASED</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2217158</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E6,E7,E8</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">SDHC memory 4GB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">SAMSUNG - RASPBERRY-PI / PROG-4GB-SDCARD</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2113756</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E9</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">5V power supply</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">TURNIGY 8-15A UBEC for Lipoly</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">TR-UBEC15</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">2</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E10,E11</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Reflective sensor wheelspeed</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">OPTEK TECHNOLOGY - OPB715Z - OPTO SWITCH, REFLECTIVE</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">85414090</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E12</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Ultrasonic sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Ultrasonic Module HC-SR04 Arduino</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">387000005</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E13</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">9DOF IMU Acc/Gyro/Mag sensor</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MPU-9150EVB</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">DigKey</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1428-1010-ND</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><em><span style=\"color: #ff0000;\">1</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><em><span style=\"color: #ff0000;\">E14</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><em><span style=\"color: #ff0000;\">Optionally (not tested): Ethernet Switch</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><em><span style=\"color: #ff0000;\">DLINK DES-105</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><em><span style=\"color: #ff0000;\">Dustin</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><em><span style=\"color: #ff0000;\">5010620335</span></em></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E15</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">WiFi Dongle</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">ELEMENT14 - WIPI - DONGLE, WIFI, USB, FOR RASPBERRY PI</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2133900</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E16</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">A/D Converter</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">MCP3008</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1627174</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">E17</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Servo</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">(Part of M1 if ordernumber above is used)</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Resistors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">3x 2.2Kohm, 270ohm, 560ohm</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Capacitors</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">100nF</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"><em><span style=\"color: #ff0000;\">3</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"><em><span style=\"color: #ff0000;\">H1,H2,H3</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"><em><span style=\"color: #ff0000;\">Optionally (not tested): Ethernet cable</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"><em><span style=\"color: #ff0000;\">DELTACO UTP CAT.6 UNSHIELDED RJ45 0.3M</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"><em><span style=\"color: #ff0000;\">Dustin</span></em></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"><em><span style=\"color: #ff0000;\">5010379761</span></em></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\">H4,H5,H6</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Micro USB harness</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">PRO SIGNAL - HK-US10/1 - LEAD, USB A MALE-MICRO B MALE, 1M</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">2085464</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">3</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">CAN boards</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">See separate description</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Female-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Female-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000073</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\">1</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Wires Male-Female</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Arduino Male-Female 3 x 40P 200mm Wire Jumper Cable</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">438000072</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Shrinkage tube</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Headers 2,54mm spacing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">PROTOTYPE BOARD, 100X160</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">Farnell</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">1201477</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Turnigy Accucel-6 50W 6A Balancer/Charger</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">ACC6</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\">Programming Card</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\">Hobby King HKSS programming card for HK 150A ESC</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\">HobbyKing</td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\">HKSS-prog</td>\r\n</tr>\r\n<tr>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"36\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"41\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"145\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"275\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"57\"></td>\r\n<td valign=\"top\" nowrap=\"nowrap\" width=\"65\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote> <strong><em>Build steps</em></strong></blockquote>\r\n<strong><em>Exchange motor</em></strong>\r\n\r\nStart with an empty chassis.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\"><img class=\" wp-image-235 aligncenter\" alt=\"empty_chassis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/empty_chassis.jpg\" width=\"455\" height=\"342\" /></a></p>\r\nThe original motor is not suitable for low speed. Exchange the motor and speed controller to the one in the part list which has lower KV and is sensored.\r\n<ul>\r\n	<li><span style=\"line-height: 1.5;\">Disassemble the motor by first removing the motor cover.</span></li>\r\n	<li>Under the motor cover loosen the hex screws holding the motor</li>\r\n	<li>Loosen the small hex screw on the motor pinion and remove the pinion.</li>\r\n	<li>Mount the pinion on the new motor</li>\r\n	<li>Fasten the motor with the hex screws from the old motor. Adjust the freeplay between pinon and the big gear so there is some small play in between the pinion and the gear.</li>\r\n</ul>\r\n&nbsp;\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\"><img class=\" wp-image-238 aligncenter\" alt=\"motor_gear\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_gear1.jpg\" width=\"765\" height=\"279\" /></a></p>\r\n\r\n<h4><strong style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"><em>Connect speed controller and motor</em></strong><span style=\"font-family: \'Source Sans Pro\', Helvetica, sans-serif; font-size: 16px; line-height: 1.5;\"> </span></h4>\r\nNow it’s time to solder the wires from the speed controller to the motor. Check carefully the order of wires through the markings om the speed controller and the motor. Usually they are A, B and C.\r\n<p style=\"text-align: left;\">Route the wires through the chassis before soldering. Also ad about 15mm shrinkage tube on each wire. Then connect the black sensor cable between the speed controller and the motor, routed similar to the power cables.</p>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\"><img class=\" wp-image-239 aligncenter\" alt=\"motor_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/motor_wires.jpg\" width=\"331\" height=\"248\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em>Battery power harness to speed controller</em></strong><span style=\"line-height: 1.5;\"> </span>\r\n\r\nCut the power wires to the speed controller to be able to solder the wires to the BEC. Also ad the battery sensor wire and voltage divider as shown in the picture below. Cover the soldering with 20mm long shrinkage tube. Use a 270ohm and a 560ohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\"><img class=\" wp-image-244 aligncenter\" alt=\"speed_controller_wires\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_wires.jpg\" width=\"886\" height=\"315\" /></a></p>\r\nMount the BEC on top of the battery plate with adhesive velcro tape, and the speed controller and its decoupling capacitors on the chassis rear firewall in front of the motor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\"><img class=\" wp-image-243 aligncenter\" alt=\"speed_controller_mounting\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_controller_mounting.jpg\" width=\"672\" height=\"332\" /></a></p>\r\n<em><strong>Wheel sensors</strong></em>\r\n\r\nMount 5 strips of reflective aluminum tape inside right front wheel and right rear wheel.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\"><img class=\" wp-image-249 aligncenter\" alt=\"wheel_strips\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_strips.jpg\" width=\"248\" height=\"186\" /></a></p>\r\nOn right rear wheel, mount the reflective sensor with some dual sided scotch and some plastic coated single wire or a cable tie.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\"><img class=\" wp-image-247 aligncenter\" alt=\"wheel_sensor\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor.jpg\" width=\"652\" height=\"331\" /></a></p>\r\nSolder 2,54mm single wire header connectors. On the white wire ad a xxx kohm resistor.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\"><img class=\" wp-image-248 aligncenter\" alt=\"wheel_sensor_cables\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/wheel_sensor_cables.jpg\" width=\"298\" height=\"223\" /></a></p>\r\n<strong style=\"line-height: 1.5;\"><em><span style=\"line-height: 1.5;\">Servo and Speed controller board</span></em></strong>\r\n\r\nTo be able to connect speed controller and servo signaling and power a small distribution board is needed.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\"><img class=\" wp-image-245 aligncenter\" alt=\"speed_servo_controller\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/speed_servo_controller.jpg\" width=\"865\" height=\"311\" /></a></p>\r\n <strong><em><span style=\"line-height: 1.5;\">5V rail power distribution board</span></em></strong>\r\n\r\nSeveral items need 5V powerdistribution from the BEC. See the pictures below.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\"><img class=\" wp-image-232 aligncenter\" alt=\"5V_dist_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/5V_dist_board.jpg\" width=\"876\" height=\"311\" /></a></p>\r\n <em><strong><span style=\"line-height: 1.5;\">Raspberry Pi power distribution cords (3pcs)</span></strong></em>\r\n\r\nCut micro-USB harness to suitable length for  connecting the three Raspberry Pi:s. Typical these harness has read, black, white and green wiring inside. Black and red are ground respective 5V supply. Now solder 2,54 mm single wire headers to the black and the red wires. See the pictures below. Cover with shrinkage tubes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\"><img class=\" wp-image-240 aligncenter\" alt=\"power_dist_cords\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/power_dist_cords1.jpg\" width=\"1265\" height=\"311\" /></a></p>\r\n <em><b>Ultrasonic sensor board</b></em>\r\n\r\nTo mount the ultrasonic sensor build a small breadboard as shown in the pictures below. The breadboard is mounted in the front of the chassis, just behind the protection bar. The trig signal (white wire on the picture) needs a 2,2 kohm resistor in series.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\"><img class=\" wp-image-246 aligncenter\" alt=\"ultrasonic\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/ultrasonic.jpg\" width=\"721\" height=\"248\" /></a></p>\r\n <em><b>A/D converter</b></em>\r\n\r\nTo be able to measure battery voltage there is need for an A/D converter board.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\"><img class=\" wp-image-233 aligncenter\" alt=\"adc_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/adc_board.jpg\" width=\"706\" height=\"249\" /></a></p>\r\n The A/D converter is connected to the SPI port on the SCU. See the connection table.\r\n\r\n<em><b>Preparing Raspberry Pi boards</b></em>\r\n\r\nDuring development it’s convenient to have possibility for manual reset of the raspberry Pi:s. To enable reset – solder a 2 pin header on the raspberry Pi board before putting the board into the lower half of the plastic case.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\"><img class=\" wp-image-242 aligncenter\" alt=\"rpis\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpis.jpg\" width=\"713\" height=\"530\" /></a></p>\r\n<span style=\"line-height: 1.5;\">Mount the three Raspberry Pi:s by adding velcro fastners as shown in the pictures below.</span>\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\"><img class=\" wp-image-241 aligncenter\" alt=\"rpi_fasteners\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/rpi_fasteners.jpg\" width=\"761\" height=\"280\" /></a></p>\r\n Solder a header to the IMU board. Mount the IMU board with a screw in the front right pre drilled hole in the chassis bottom plate.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\"><img class=\" wp-image-236 aligncenter\" alt=\"imu_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/imu_board.jpg\" width=\"318\" height=\"239\" /></a></p>\r\nIf CAN communication is to be used (this is the setup that is currently supported by the MOPED software), mount one CAN board on each Raspberry Pi by just putting them on the P1 connector. Connect the boards by simple wires, and put a jumper on one of the end nodes.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\"><img class=\" wp-image-234 aligncenter\" alt=\"can_board\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/can_board.jpg\" width=\"779\" height=\"280\" /></a></p>\r\nOptionally, if Ethernet is to be used (this is a promising approach but needs further software development), the Ethernet switch can be mounted on underside of the chassis. The switch has to be able to be supplied by 5V. Connect RJ45 cables in between the switch and the Raspberry Pi:s.\r\n\r\nNow connect wires as described in the connection table to the Raspberry Pi:s. See the high res picture below about the final result.\r\n<p style=\"text-align: center;\"><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\"><img class=\" wp-image-253 aligncenter\" alt=\"moped_car_high_res\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/moped_car_high_res.jpg\" width=\"1001\" height=\"1335\" /></a></p>','Assembly instructions','','inherit','closed','open','','101-revision-v1','','','2015-02-11 09:33:23','2015-02-11 08:33:23','',101,'https://moped.sics.se/?p=369',0,'revision','',0),(371,16,'2015-02-11 09:48:29','2015-02-11 08:48:29','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\nA convenient way for monitoring the Autosar nodes is to set up serial port connections, using a serial-USB cable and a terminal emulator program, such as xterm or PuTTY. More details about how this can be done are collected <a title=\"Serial-USB connection details\" href=\"http://elinux.org/RPi_Serial_Connection\">on this wiki page</a>.\r\n\r\n<em style=\"font-family: Bitter, Georgia, serif; font-size: 20px; line-height: 1.3;\"><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, <a title=\"BluIno on GitHub\" href=\"https://github.com/MiichaelD/BluIno\" target=\"_blank\">BluIno</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-11 09:48:29','2015-02-11 08:48:29','',127,'https://moped.sics.se/?p=371',0,'revision','',0),(372,16,'2015-02-11 09:49:43','2015-02-11 08:49:43','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\nA convenient way for monitoring the Autosar nodes is to set up a connection to their serial ports, using a serial-USB cable and a terminal emulator program, such as xterm or PuTTY. More details about how this can be done are collected on<a title=\"How to set up Serial-USB connection\" href=\"http://elinux.org/RPi_Serial_Connection\">this wiki page</a>.\r\n\r\n<em style=\"font-family: Bitter, Georgia, serif; font-size: 20px; line-height: 1.3;\"><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, <a title=\"BluIno on GitHub\" href=\"https://github.com/MiichaelD/BluIno\" target=\"_blank\">BluIno</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-11 09:49:43','2015-02-11 08:49:43','',127,'https://moped.sics.se/?p=372',0,'revision','',0),(373,16,'2015-02-11 09:50:01','2015-02-11 08:50:01','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\nA convenient way for monitoring the Autosar nodes is to set up a connection to their serial ports, using a serial-USB cable and a terminal emulator program, such as xterm or PuTTY. More details about how this can be done are collected on <a title=\"How to set up Serial-USB connection\" href=\"http://elinux.org/RPi_Serial_Connection\">this wiki page</a>.\r\n\r\n<em style=\"font-family: Bitter, Georgia, serif; font-size: 20px; line-height: 1.3;\"><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, <a title=\"BluIno on GitHub\" href=\"https://github.com/MiichaelD/BluIno\" target=\"_blank\">BluIno</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-11 09:50:01','2015-02-11 08:50:01','',127,'https://moped.sics.se/?p=373',0,'revision','',0),(374,16,'2015-02-11 09:50:12','2015-02-11 08:50:12','<span style=\"line-height: 1.5;\">Current MOPED setup consists of one so-called telematics control unit (TCU), which is the gateway for cooperation with the external word, and two vehicle control nodes, vehicle control unit (VCU) and sensor control unit (SCU). </span>\r\n<h4><em><strong>TCU setup</strong></em></h4>\r\n<span style=\"line-height: 1.5;\">TCU contains functionality for interacting with a plugin server, with other embedded platforms, and last but not least with the user. It runs Linux, taking use of existing WiFi-drivers, while the other nodes are Autosar-based. To send signals (for example plugin binaries) from our gateway to the Autosar control units, the Linux kernel must be configured to include CAN-drivers. Details on how this is done can be found <a title=\"Setting up Linux on TCU\" href=\"https://moped.sics.se/?page_id=328\">here</a>.</span>\r\n<h4><em style=\"line-height: 1.5;\"><strong>VCU/SCU setup</strong></em></h4>\r\n<em><strong></strong></em>For the Autosar nodes, the SD cards only need to be formatted and filled with some basic <a title=\"Basic Raspberry Pi bootloaders\" href=\"https://moped.sics.se/wordpress/wp-content/uploads/2015/02/bootloaders.zip\">bootloader files</a> (unzipped). Next, copy an appropriate Autosar kernel image file, either <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel.img\">kernel_VCU</a> or <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/kernel_SCU.img\">kernel_SCU</a>, and you are done.\r\n\r\nA convenient way for monitoring the Autosar nodes is to set up a connection to their serial ports, using a serial-USB cable and a terminal emulator program, such as xterm or PuTTY. More details about how this can be done are collected on <a title=\"How to set up Serial-USB connection\" href=\"http://elinux.org/RPi_Serial_Connection\" target=\"_blank\">this wiki page</a>.\r\n\r\n<em style=\"font-family: Bitter, Georgia, serif; font-size: 20px; line-height: 1.3;\"><strong>Configuring TCU for a new hotspot</strong></em>\r\n\r\nIn some applications, most notably if you wish to drive the MOPED car using your smart phone, the TCU and the phone must be on the same network. The simplest way to achieve this is to let the phone act as a hotspot that allows TCU to connect to it. To make it work, the WiFi Protected Access (WPA) configuration file on TCU must be updated with the phone\'s login details.\r\n\r\nLog in on TCU, either directly, connecting HDMI-cable, keyboard, and mouse to the Raspberry Pi, or through SSH. An alternative way is to mount the TCU SD-card and work directly on your desktop. Now, open the WPA configuration file for editing:\r\n<pre>sudo nano etc/wpa_supplicant/wpa_supplicant.conf</pre>\r\nand add the following lines:\r\n<pre>network={\r\n ssid=\"hotspot_name\"\r\n psk=\"hotspot_password\"\r\n proto=RSN\r\n key_mgmt=WPA-PSK\r\n pairwise=CCMP\r\n auth_alg=OPEN\r\n priority=60\r\n}</pre>\r\nwhere \"hotspot_name\" and \"hotspot_password\" are of course unique to your phone\'s hotspot. The priority is arbitrary, but the higher it is the more probable it is that the MOPED car will connect to your phone, rather than to your colleague\'s that happens to play around with the platform next door, just to annoy you.\r\n\r\nThat\'s it, Ctrl-X to exit and save, and the car should be ready for driving.\r\n<h4>WirelessIno - the driving app</h4>\r\nTo drive the car, there is a handy app for Android phones, named WirelessIno, developed on top of a bluetooth communication app with a similar name, <a title=\"BluIno on GitHub\" href=\"https://github.com/MiichaelD/BluIno\" target=\"_blank\">BluIno</a>. To install the app on your Android phone, make sure that the option \"install apps from unknown sources\" or \"development options\" is chosen. This is probably the most tricky part of the WirelessIno installation. Next, download the <a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/WirelessIno.apk\">Wirelessino.apk</a> to your phone, tap on it when the download is finished and click \"yes\".\r\n\r\nNext, the telematics node on the car needs to be configured with the phone\'s hotspot (see the instructions above). When that is done, start up the hotspot and restart the car. Once the car-to-phone connection is established, the WiFi-stick should be shining with a steady blue light. Take a note of the ip address that the car obtained in the local network (it is normally shown in the list of connected devices in phone\'s WiFi-sharing settings) and connect the WirelessIno to port 9000 on that address.\r\n\r\nThat should be it, cross your fingers and drive!','Installation instructions','','inherit','closed','open','','127-revision-v1','','','2015-02-11 09:50:12','2015-02-11 08:50:12','',127,'https://moped.sics.se/?p=374',0,'revision','',0),(384,33,'2015-06-16 09:00:57','2015-06-16 08:00:57','[groups_member group=\"Engineers\"]\r\n[vehicle_build_form]\r\n[/groups_member]','Vehicle Manufacture','','inherit','closed','open','','11-revision-v1','','','2015-06-16 09:00:57','2015-06-16 08:00:57','',11,'http://localhost/?p=384',0,'revision','',0),(385,33,'2015-06-16 09:45:08','2015-06-16 08:45:08','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_upload_form]\r\noperate_user_vehicle_association()\r\n[/groups_member]','Vehicle Configuration Upload','','inherit','closed','open','','68-revision-v1','','','2015-06-16 09:45:08','2015-06-16 08:45:08','',68,'http://localhost/?p=385',0,'revision','',0),(386,33,'2015-06-16 09:46:52','2015-06-16 08:46:52','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_upload_form]\r\n[operate_user_vehicle_association]\r\n[/groups_member]','Vehicle Configuration Upload','','inherit','closed','open','','68-revision-v1','','','2015-06-16 09:46:52','2015-06-16 08:46:52','',68,'http://localhost/?p=386',0,'revision','',0),(387,33,'2015-06-16 09:48:02','2015-06-16 08:48:02','[groups_member group=\"Engineers\"]\r\n[vehicle_configuration_upload_form]\r\n[operate_user_vehicle_association]\r\n[/groups_member]','Vehicle Configuration Upload And Associations','','inherit','closed','open','','68-revision-v1','','','2015-06-16 09:48:02','2015-06-16 08:48:02','',68,'http://localhost/?p=387',0,'revision','',0),(388,33,'2015-10-29 15:59:06','2015-10-29 14:59:06','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\n<ol>\n	<li>Connect the power supply and the charger, for example Turnigy, to the battery according to the picture.\n<ul>\n	<li>red-to-red</li>\n	<li>black-to-black</li>\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\n</ul>\n</li>\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\n	<li>Turn on the power supply.</li>\n	<li>Set the current to max.</li>\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left buttons on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\n<ul>\n	<li>press enter to set xxA</li>\n	<li>update the number (xx) of Amperes using -/+</li>\n	<li>enter to confirm</li>\n</ul>\n</li>\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\n	<li>Press stop on Turnigy and turn off the power supply.</li>\n</ol>','Battery charging','','inherit','closed','open','','220-autosave-v1','','','2015-10-29 15:59:06','2015-10-29 14:59:06','',220,'http://localhost/?p=388',0,'revision','',0),(389,33,'2015-10-29 15:59:18','2015-10-29 14:59:18','<em style=\"line-height: 1.5;\"><strong><a href=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\"><img alt=\"LiPo_charging\" src=\"https://moped.sics.se/wordpress/wp-content/uploads/2014/08/LiPo_charging.jpeg\" width=\"1295\" height=\"730\" /></a></strong></em>\r\n<ol>\r\n	<li>Connect the power supply and the charger, for example Turnigy, to the battery according to the picture.\r\n<ul>\r\n	<li>red-to-red</li>\r\n	<li>black-to-black</li>\r\n	<li>3-pin cable on the battery to 3-pins on Turnigy</li>\r\n</ul>\r\n</li>\r\n	<li>It is recommended to place the battery in a LiPo-safe bag.</li>\r\n	<li>Before turning on the power supply, switch the current and voltage wheels to minimum values.</li>\r\n	<li>Turn on the power supply.</li>\r\n	<li>Set the current to max.</li>\r\n	<li>Set the voltage to approximately 15V on the power supply box.</li>\r\n	<li>Make sure that the charging type is set to LiPo (shown in the Turnigy display). If this is not the case, press Type and Status-left buttons on the Turnigy device until LiPo mode pops up on the display. Then press start/enter.</li>\r\n	<li>Choose an appropriate charging current on the Turnigy device (for example 4A for a 4000mAh battery):\r\n<ul>\r\n	<li>press enter to set xxA</li>\r\n	<li>update the number (xx) of Amperes using -/+</li>\r\n	<li>enter to confirm</li>\r\n</ul>\r\n</li>\r\n	<li><span style=\"line-height: 1.5;\">Press enter/start on Turnigy and hold until it beeps, which means that the charging has started. The current value on the power supply box should be non-zero. If this is not the case, try to decrease the charging current on the Turnigy device.</span></li>\r\n	<li>It\'s almost done when the voltage value (on the Turnigy display) is around 8.4V.</li>\r\n	<li>Turnigy beeps when the charging is finished completely. Now it is important to switch off the charging current without too long delay to avoid over-charging.</li>\r\n	<li>Press stop on Turnigy and turn off the power supply.</li>\r\n</ol>','Battery charging','','inherit','closed','open','','220-revision-v1','','','2015-10-29 15:59:18','2015-10-29 14:59:18','',220,'http://localhost/?p=389',0,'revision','',0),(390,33,'2015-11-10 17:33:28','0000-00-00 00:00:00','','Auto Draft','','auto-draft','closed','open','','','','','2015-11-10 17:33:28','0000-00-00 00:00:00','',0,'http://localhost/?p=390',0,'post','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (36,4,0),(37,4,0),(40,4,0),(41,4,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,0),(4,4,'nav_menu','',0,4);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `name` (`name`),
  KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(4,'Menu 1','menu-1',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=460 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'first_name',''),(2,1,'last_name',''),(3,1,'nickname','admin'),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'comment_shortcuts','false'),(7,1,'admin_color','fresh'),(8,1,'use_ssl','0'),(9,1,'show_admin_bar_front','true'),(10,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(11,1,'wp_user_level','10'),(12,1,'dismissed_wp_pointers','wp330_toolbar,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,wp350_media,wp360_revisions,wp360_locks'),(13,1,'show_welcome_panel','1'),(14,1,'wp_user-settings','editor=tinymce&libraryContent=browse&mfold=o&wplink=1&align=center&imgsize=full&hidetb=1&uploader=1'),(15,1,'wp_user-settings-time','1419001483'),(16,1,'wp_dashboard_quick_press_last_post_id','382'),(29,1,'managenav-menuscolumnshidden','a:4:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";}'),(30,1,'metaboxhidden_nav-menus','a:3:{i:0;s:8:\"add-post\";i:1;s:12:\"add-post_tag\";i:2;s:15:\"add-post_format\";}'),(31,1,'nav_menu_recently_edited','4'),(44,3,'first_name',''),(45,3,'last_name',''),(46,3,'nickname','jax'),(47,3,'description',''),(48,3,'rich_editing','true'),(49,3,'comment_shortcuts','false'),(50,3,'admin_color','fresh'),(51,3,'use_ssl','0'),(52,3,'show_admin_bar_front','true'),(53,3,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(54,3,'wp_user_level','0'),(55,3,'default_password_nag',''),(68,5,'first_name',''),(69,5,'last_name',''),(70,5,'nickname','eilert'),(71,5,'description',''),(72,5,'rich_editing','true'),(73,5,'comment_shortcuts','false'),(74,5,'admin_color','fresh'),(75,5,'use_ssl','0'),(76,5,'show_admin_bar_front','true'),(77,5,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(78,5,'wp_user_level','0'),(79,5,'default_password_nag','1'),(188,15,'first_name',''),(189,15,'last_name',''),(190,15,'nickname','mrintegrity'),(191,15,'description',''),(192,15,'rich_editing','true'),(193,15,'comment_shortcuts','false'),(194,15,'admin_color','fresh'),(195,15,'use_ssl','0'),(196,15,'show_admin_bar_front','true'),(197,15,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(198,15,'wp_user_level','0'),(199,15,'default_password_nag','1'),(200,16,'first_name','Avenir'),(201,16,'last_name','Kobetski'),(202,16,'nickname','avenir'),(203,16,'description',''),(204,16,'rich_editing','true'),(205,16,'comment_shortcuts','false'),(206,16,'admin_color','fresh'),(207,16,'use_ssl','0'),(208,16,'show_admin_bar_front','true'),(209,16,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(210,16,'wp_user_level','10'),(211,16,'default_password_nag',''),(224,18,'first_name',''),(225,18,'last_name',''),(226,18,'nickname','zhangshuzhou'),(227,18,'description',''),(228,18,'rich_editing','true'),(229,18,'comment_shortcuts','false'),(230,18,'admin_color','classic'),(231,18,'use_ssl','0'),(232,18,'show_admin_bar_front','true'),(233,18,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(234,18,'wp_user_level','0'),(235,18,'default_password_nag',''),(236,16,'wp_user-settings','mfold=o&libraryContent=browse&wplink=1&hidetb=1&editor=tinymce'),(237,16,'wp_user-settings-time','1423643293'),(238,19,'first_name',''),(239,19,'last_name',''),(240,19,'nickname','zeni'),(241,19,'description',''),(242,19,'rich_editing','true'),(243,19,'comment_shortcuts','false'),(244,19,'admin_color','fresh'),(245,19,'use_ssl','0'),(246,19,'show_admin_bar_front','true'),(247,19,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(248,19,'wp_user_level','0'),(249,19,'default_password_nag',''),(250,20,'first_name',''),(251,20,'last_name',''),(252,20,'nickname','developer'),(253,20,'description',''),(254,20,'rich_editing','true'),(255,20,'comment_shortcuts','false'),(256,20,'admin_color','fresh'),(257,20,'use_ssl','0'),(258,20,'show_admin_bar_front','true'),(259,20,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(260,20,'wp_user_level','0'),(261,20,'dismissed_wp_pointers','wp330_toolbar,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,wp350_media,wp360_revisions,wp360_locks'),(262,21,'first_name',''),(263,21,'last_name',''),(264,21,'nickname','engineer'),(265,21,'description',''),(266,21,'rich_editing','true'),(267,21,'comment_shortcuts','false'),(268,21,'admin_color','fresh'),(269,21,'use_ssl','0'),(270,21,'show_admin_bar_front','true'),(271,21,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(272,21,'wp_user_level','0'),(273,21,'dismissed_wp_pointers','wp330_toolbar,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,wp350_media,wp360_revisions,wp360_locks'),(274,1,'meta-box-order_page','a:3:{s:4:\"side\";s:50:\"groups-access,submitdiv,pageparentdiv,postimagediv\";s:6:\"normal\";s:70:\"revisionsdiv,postcustom,commentstatusdiv,commentsdiv,slugdiv,authordiv\";s:8:\"advanced\";s:0:\"\";}'),(275,1,'screen_layout_page','2'),(276,1,'closedpostboxes_page','a:0:{}'),(277,1,'metaboxhidden_page','a:6:{i:0;s:12:\"revisionsdiv\";i:1;s:10:\"postcustom\";i:2;s:16:\"commentstatusdiv\";i:3;s:11:\"commentsdiv\";i:4;s:7:\"slugdiv\";i:5;s:9:\"authordiv\";}'),(278,22,'first_name',''),(279,22,'last_name',''),(280,22,'nickname','johan1219'),(281,22,'description',''),(282,22,'rich_editing','true'),(283,22,'comment_shortcuts','false'),(284,22,'admin_color','fresh'),(285,22,'use_ssl','0'),(286,22,'show_admin_bar_front','true'),(287,22,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(288,22,'wp_user_level','0'),(289,22,'default_password_nag',''),(290,16,'wp_dashboard_quick_press_last_post_id','379'),(291,16,'dismissed_wp_pointers','wp350_media,wp360_revisions,wp330_toolbar'),(292,1,'wporg_favorites',''),(293,16,'closedpostboxes_page','a:0:{}'),(294,16,'metaboxhidden_page','a:6:{i:0;s:12:\"revisionsdiv\";i:1;s:10:\"postcustom\";i:2;s:16:\"commentstatusdiv\";i:3;s:11:\"commentsdiv\";i:4;s:7:\"slugdiv\";i:5;s:9:\"authordiv\";}'),(367,29,'first_name',''),(368,29,'last_name',''),(369,29,'nickname','niklasg'),(370,29,'description',''),(371,29,'rich_editing','true'),(372,29,'comment_shortcuts','false'),(373,29,'admin_color','fresh'),(374,29,'use_ssl','0'),(375,29,'show_admin_bar_front','true'),(376,29,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(377,29,'wp_user_level','0'),(378,29,'default_password_nag',''),(379,29,'dismissed_wp_pointers','wp330_toolbar'),(380,30,'first_name',''),(381,30,'last_name',''),(382,30,'nickname','jesan'),(383,30,'description',''),(384,30,'rich_editing','true'),(385,30,'comment_shortcuts','false'),(386,30,'admin_color','fresh'),(387,30,'use_ssl','0'),(388,30,'show_admin_bar_front','true'),(389,30,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(390,30,'wp_user_level','0'),(391,30,'default_password_nag',''),(392,31,'first_name',''),(393,31,'last_name',''),(394,31,'nickname','fbjorn'),(395,31,'description',''),(396,31,'rich_editing','true'),(397,31,'comment_shortcuts','false'),(398,31,'admin_color','fresh'),(399,31,'use_ssl','0'),(400,31,'show_admin_bar_front','true'),(401,31,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(402,31,'wp_user_level','0'),(403,31,'default_password_nag',''),(416,33,'first_name',''),(417,33,'last_name',''),(418,33,'nickname','arndt'),(419,33,'description',''),(420,33,'rich_editing','true'),(421,33,'comment_shortcuts','false'),(422,33,'admin_color','fresh'),(423,33,'use_ssl','0'),(424,33,'show_admin_bar_front','true'),(425,33,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(426,33,'wp_user_level','10'),(427,33,'default_password_nag',''),(428,33,'wp_dashboard_quick_press_last_post_id','390'),(429,33,'dismissed_wp_pointers','wp350_media,wp330_toolbar,wp360_revisions'),(430,33,'wp_user-settings','editor=html'),(431,33,'wp_user-settings-time','1424792968'),(432,33,'session_tokens','a:3:{s:64:\"dd962771b150dea903422aff20bac7abd43d534af0cf31ec993ade1281c5bd72\";a:4:{s:10:\"expiration\";i:1448382628;s:2:\"ip\";s:13:\"193.10.66.250\";s:2:\"ua\";s:76:\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0\";s:5:\"login\";i:1447173028;}s:64:\"048aa098782b85a15ef80489d690b2e956b43c1b52dd44cfcbe0cdb6e84ab4ae\";a:4:{s:10:\"expiration\";i:1448448955;s:2:\"ip\";s:13:\"193.10.66.250\";s:2:\"ua\";s:76:\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0\";s:5:\"login\";i:1447239355;}s:64:\"24c0ddf7c06d891fc15a7653cdd203afbe307374dbb77810b86f59a2dee7befa\";a:4:{s:10:\"expiration\";i:1448449851;s:2:\"ip\";s:13:\"193.10.66.250\";s:2:\"ua\";s:76:\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0\";s:5:\"login\";i:1447240251;}}'),(433,33,'closedpostboxes_dashboard','a:0:{}'),(434,33,'metaboxhidden_dashboard','a:1:{i:0;s:21:\"dashboard_browser_nag\";}'),(435,34,'first_name',''),(436,34,'last_name',''),(437,34,'nickname','MatildaMessenger'),(438,34,'description',''),(439,34,'rich_editing','true'),(440,34,'comment_shortcuts','false'),(441,34,'admin_color','fresh'),(442,34,'use_ssl','0'),(443,34,'show_admin_bar_front','true'),(444,34,'wp_capabilities','a:1:{s:10:\"subscriber\";b:1;}'),(445,34,'wp_user_level','0'),(446,34,'default_password_nag','1'),(447,35,'first_name','Xinhai'),(448,35,'last_name','Zhang'),(449,35,'nickname','xinhai'),(450,35,'description',''),(451,35,'rich_editing','true'),(452,35,'comment_shortcuts','false'),(453,35,'admin_color','fresh'),(454,35,'use_ssl','0'),(455,35,'show_admin_bar_front','true'),(456,35,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(457,35,'wp_user_level','10'),(458,35,'dismissed_wp_pointers','wp330_toolbar,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,wp350_media,wp360_revisions,wp360_locks'),(459,35,'wp_dashboard_quick_press_last_post_id','383');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;

/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-11-11 14:38:52
